{"PubSubContext":{"namespace":"Predis\\PubSub","functions":{"__construct":{"parameters":{"client":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{"param":["ClientInterface $client  Client instance used by the context.","array           $options Options for the context initialization."]}},"getClient":{"parameters":[],"annotations":{" short_description":"Returns the underlying client instance used by the pub\/sub iterator.","return":["ClientInterface"]}},"checkCapabilities":{"parameters":{"client":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks if the passed client instance satisfies the required conditions\nneeded to initialize a Publish \/ Subscribe context.","param":["ClientInterface $client Client instance used by the context."]}},"genericSubscribeInit":{"parameters":{"subscribeAction":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"This method shares the logic to handle both SUBSCRIBE and PSUBSCRIBE.","param":["string $subscribeAction Type of subscription."]}},"writeCommand":{"parameters":{"method":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Writes a Redis command on the underlying connection.","param":["string $method    ID of the command.","array  $arguments List of arguments."]}},"disconnect":{"parameters":[],"annotations":{" short_description":"Closes the underlying connection on forced disconnection."}},"getValue":{"parameters":[],"annotations":{" short_description":"Waits for a new message from the server generated by one of the active\nsubscriptions and returns it when available.","return":["array"]}},"__destruct":{"parameters":[],"annotations":{" short_description":"Automatically closes the context when PHP's garbage collector kicks in."}},"isFlagSet":{"parameters":{"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks if the specified flag is valid in the state of the context.","param":["int  $value Flag."],"return":["bool"]}},"ping":{"parameters":{"payload":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"PING the server with an optional payload that will be echoed as a\nPONG message in the pub\/sub loop.","param":["string $payload Optional PING payload."]}},"subscribe":{"parameters":{"channel":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Subscribes to the specified channels.","param":["mixed $channel,... One or more channel names."]}},"unsubscribe":{"parameters":[],"annotations":{" short_description":"Unsubscribes from the specified channels.","param":["string ... One or more channel names."]}},"psubscribe":{"parameters":{"pattern":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Subscribes to the specified channels using a pattern.","param":["mixed $pattern,... One or more channel name patterns."]}},"punsubscribe":{"parameters":[],"annotations":{" short_description":"Unsubscribes from the specified channels using a pattern.","param":["string ... One or more channel name patterns."]}},"closeContext":{"parameters":{"force":{"default":false,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Closes the context by unsubscribing from all the subscribed channels.\nOptionally, the context can be forcefully closed by dropping the\nunderlying connection.","param":["bool $force Forcefully close the context by closing the connection."],"return":["bool Returns false if there are no pending messages."]}},"rewind":{"parameters":[],"annotations":{" short_description":""}},"current":{"parameters":[],"annotations":{" short_description":"Returns the last message payload retrieved from the server and generated\nby one of the active subscriptions.","return":["array"]}},"key":{"parameters":[],"annotations":{" short_description":""}},"next":{"parameters":[],"annotations":{" short_description":""}},"valid":{"parameters":[],"annotations":{" short_description":"Checks if the the context is still in a valid state to continue.","return":["bool"]}},"invalidate":{"parameters":[],"annotations":{" short_description":"Resets the state of the context."}}}},"DispatcherLoop":{"namespace":"Predis\\PubSub","functions":{"__construct":{"parameters":{"client":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["ClientInterface $client Client instance used by the context."]}},"validateCallback":{"parameters":{"callable":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks if the passed argument is a valid callback.","param":["mixed $callable A callback."]}},"getPubSubContext":{"parameters":[],"annotations":{" short_description":"Returns the underlying Publish \/ Subscribe context.","return":["PubSubContext"]}},"subscriptionCallback":{"parameters":{"callable":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sets a callback that gets invoked upon new subscriptions.","param":["mixed $callable A callback."]}},"defaultCallback":{"parameters":{"callable":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sets a callback that gets invoked when a message is received on a\nchannel that does not have an associated callback.","param":["mixed $callable A callback."]}},"attachCallback":{"parameters":{"channel":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Binds a callback to a channel.","param":["string   $channel  Channel name.","Callable $callback A callback."]}},"detachCallback":{"parameters":{"channel":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Stops listening to a channel and removes the associated callback.","param":["string $channel Redis channel."]}},"run":{"parameters":[],"annotations":{" short_description":"Starts the dispatcher loop."}},"stop":{"parameters":[],"annotations":{" short_description":"Terminates the dispatcher loop."}},"getPrefixKeys":{"parameters":[],"annotations":{" short_description":"Return the prefix of the keys","return":["string"]}}}},"AbstractPubSubContext":{"namespace":"Predis\\PubSub","functions":{"__destruct":{"parameters":[],"annotations":{" short_description":"Automatically closes the context when PHP's garbage collector kicks in."}},"isFlagSet":{"parameters":{"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks if the specified flag is valid in the state of the context.","param":["int  $value Flag."],"return":["bool"]}},"ping":{"parameters":{"payload":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"PING the server with an optional payload that will be echoed as a\nPONG message in the pub\/sub loop.","param":["string $payload Optional PING payload."]}},"subscribe":{"parameters":{"channel":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Subscribes to the specified channels.","param":["mixed $channel,... One or more channel names."]}},"unsubscribe":{"parameters":[],"annotations":{" short_description":"Unsubscribes from the specified channels.","param":["string ... One or more channel names."]}},"psubscribe":{"parameters":{"pattern":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Subscribes to the specified channels using a pattern.","param":["mixed $pattern,... One or more channel name patterns."]}},"punsubscribe":{"parameters":[],"annotations":{" short_description":"Unsubscribes from the specified channels using a pattern.","param":["string ... One or more channel name patterns."]}},"closeContext":{"parameters":{"force":{"default":false,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Closes the context by unsubscribing from all the subscribed channels.\nOptionally, the context can be forcefully closed by dropping the\nunderlying connection.","param":["bool $force Forcefully close the context by closing the connection."],"return":["bool Returns false if there are no pending messages."]}},"disconnect":{"parameters":[],"annotations":{" short_description":"Closes the underlying connection on forced disconnection."}},"writeCommand":{"parameters":{"method":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Writes a Redis command on the underlying connection.","param":["string $method    ID of the command.","array  $arguments List of arguments."]}},"rewind":{"parameters":[],"annotations":{" short_description":""}},"current":{"parameters":[],"annotations":{" short_description":"Returns the last message payload retrieved from the server and generated\nby one of the active subscriptions.","return":["array"]}},"key":{"parameters":[],"annotations":{" short_description":""}},"next":{"parameters":[],"annotations":{" short_description":""}},"valid":{"parameters":[],"annotations":{" short_description":"Checks if the the context is still in a valid state to continue.","return":["bool"]}},"invalidate":{"parameters":[],"annotations":{" short_description":"Resets the state of the context."}},"getValue":{"parameters":[],"annotations":{" short_description":"Waits for a new message from the server generated by one of the active\nsubscriptions and returns it when available.","return":["array"]}}}},"PubSubContextTest":{"namespace":"Predis\\PubSub","functions":{"testPubSubContextRequirePubSubRelatedCommand":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\NotSupportedException"],"expectedExceptionMessage":["The current profile does not support PUB\/SUB related commands"]}},"testPubSubContextDoesNotWorkOnClusters":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\NotSupportedException"],"expectedExceptionMessage":["Cannot initialize a PUB\/SUB context when using aggregated connections"]}},"testConstructorWithoutSubscriptionsDoesNotOpenContext":{"parameters":[],"annotations":{"group":["disconnected"]}},"testConstructorWithSubscriptionsOpensContext":{"parameters":[],"annotations":{"group":["disconnected"]}},"testClosingContextWithTrueClosesConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testClosingContextWithFalseSendsUnsubscriptions":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIsNotValidWhenNotSubscribed":{"parameters":[],"annotations":{"group":["disconnected"]}},"testHandlesPongMessages":{"parameters":[],"annotations":[]},"testHandlesPongMessagesWithPayload":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReadsMessageFromConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReadsPmessageFromConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReadsSubscriptionMessageFromConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReadsUnsubscriptionMessageFromConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testUnsubscriptionMessageWithZeroChannelCountInvalidatesContext":{"parameters":[],"annotations":{"group":["disconnected"]}},"testGetUnderlyingClientInstance":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPubSubAgainstRedisServer":{"parameters":[],"annotations":{"group":["connected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"DispatcherLoopTest":{"namespace":"Predis\\PubSub","functions":{"testDispatcherLoopAgainstRedisServer":{"parameters":[],"annotations":{"group":["connected"]}},"testDispatcherLoopAgainstRedisServerWithPrefix":{"parameters":[],"annotations":{"group":["connected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ListPopLastBlocking":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ZSetLexCount":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"SetDifferenceStore":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ListTrim":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"KeyKeysV12x":{"namespace":"Predis\\Command","functions":{"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ZSetIncrementBy":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"HashScan":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prepareOptions":{"parameters":{"options":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a list of options and modifiers compatible with Redis.","param":["array $options List of options."],"return":["array"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"StringSubstr":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"TransactionWatch":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"HyperLogLogMerge":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ServerConfig":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ServerTime":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ListPushHead":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"KeyExpire":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"StringSetBit":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"KeyRename":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ListPopFirst":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ConnectionPing":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ServerScript":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ConnectionEcho":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"PubSubUnsubscribeByPattern":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"PrefixableCommand":{"namespace":"Predis\\Command","functions":{"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}}}},"ZSetCount":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"StringStrlen":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"KeyDump":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"KeyPreciseExpireAt":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"StringGetBit":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"HyperLogLogCount":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"KeyType":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ServerEvalSHA":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"getScriptHash":{"parameters":[],"annotations":{" short_description":"Returns the SHA1 hash of the body of the script.","return":["string SHA1 hash."]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ServerDatabaseSize":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"KeyMove":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ListPopLastPushHeadBlocking":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"TransactionMulti":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ZSetCardinality":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"StringGetSet":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ServerBackgroundRewriteAOF":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ServerLastSave":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ZSetRangeByLex":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prepareOptions":{"parameters":{"options":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a list of options and modifiers compatible with Redis.","param":["array $options List of options."],"return":["array"]}},"withScores":{"parameters":[],"annotations":{" short_description":"Checks for the presence of the WITHSCORES modifier.","return":["bool"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"HashGetAll":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ListInsert":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"HashLength":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ListPopFirstBlocking":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"StringGet":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"StringGetMultiple":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ZSetIntersectionStore":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prepareOptions":{"parameters":{"options":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a list of options and modifiers compatible with Redis.","param":["array $options List of options."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"StringSetMultiplePreserve":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"HashSet":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"PubSubSubscribe":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"KeyExpireAt":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ZSetReverseRange":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prepareOptions":{"parameters":{"options":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a list of options and modifiers compatible with Redis.","param":["array $options List of options."],"return":["array"]}},"withScores":{"parameters":[],"annotations":{" short_description":"Checks for the presence of the WITHSCORES modifier.","return":["bool"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"SetScan":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prepareOptions":{"parameters":{"options":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a list of options and modifiers compatible with Redis.","param":["array $options List of options."],"return":["array"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"KeyRestore":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"TransactionUnwatch":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"KeyDelete":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ListSet":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ZSetAdd":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ServerShutdown":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"KeyKeys":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"StringGetRange":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"StringSetPreserve":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"SetCardinality":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"SetUnion":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ListPushTailX":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"KeyTimeToLive":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ZSetRemoveRangeByRank":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"TransactionDiscard":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ZSetReverseRangeByScore":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prepareOptions":{"parameters":{"options":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a list of options and modifiers compatible with Redis.","param":["array $options List of options."],"return":["array"]}},"withScores":{"parameters":[],"annotations":{" short_description":"Checks for the presence of the WITHSCORES modifier.","return":["bool"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"SetPop":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ServerInfo":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"parseRow":{"parameters":{"row":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses single row of the reply buffer and returns the key-value pair.","param":["string $row Single row of the reply buffer."],"return":["array"]}},"parseDatabaseStats":{"parameters":{"str":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses the reply buffer and extracts the statistics of each logical DB.","param":["string $str Reply buffer."],"return":["array"]}},"parseAllocationStats":{"parameters":{"str":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses the reply buffer and extracts the allocation statistics.","param":["string $str Reply buffer."],"return":["array"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"SetIntersection":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"StringBitOp":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"SetIntersectionStore":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ZSetScore":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"PubSubPublish":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ZSetScan":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prepareOptions":{"parameters":{"options":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a list of options and modifiers compatible with Redis.","param":["array $options List of options."],"return":["array"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"SetDifference":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ConnectionAuth":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"KeyPersist":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"HashDelete":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ConnectionSelect":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ListLength":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"StringDecrement":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"KeyPreciseExpire":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"KeyRandom":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"SetAdd":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"SetUnionStore":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ServerFlushDatabase":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"StringSetExpire":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"HashIncrementByFloat":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"SetRemove":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ListRemove":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"RawCommand":{"namespace":"Predis\\Command","functions":{"__construct":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":[]},"create":{"parameters":{"commandID":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Creates a new raw command using a variadic method.","param":["string           $commandID Redis command ID.","string ... Arguments list for the command."],"return":["CommandInterface"]}},"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}}}},"HashSetPreserve":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"HashValues":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"HashSetMultiple":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"KeyExists":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"KeyScan":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prepareOptions":{"parameters":{"options":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a list of options and modifiers compatible with Redis.","param":["array $options List of options."],"return":["array"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ServerBackgroundSave":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"HashGet":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"StringBitCount":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"SetRandomMember":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ScriptedCommand":{"namespace":"Predis\\Command","functions":{"getScript":{"parameters":[],"annotations":{" short_description":"Gets the body of a Lua script.","return":["string"]}},"getKeysCount":{"parameters":[],"annotations":{" short_description":"Specifies the number of arguments that should be considered as keys."," long_description":"The default behaviour for the base class is to return 0 to indicate that\nall the elements of the arguments array should be considered as keys, but\nsubclasses can enforce a static number of keys.","return":["int"]}},"getKeys":{"parameters":[],"annotations":{" short_description":"Returns the elements from the arguments that are identified as keys.","return":["array"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"getEvalArguments":{"parameters":[],"annotations":{"return":["array"]}},"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"getScriptHash":{"parameters":[],"annotations":{" short_description":"Returns the SHA1 hash of the body of the script.","return":["string SHA1 hash."]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"StringIncrementBy":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"StringAppend":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"StringPreciseSetExpire":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ListPopLastPushHead":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ServerInfoV26x":{"namespace":"Predis\\Command","functions":{"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"parseRow":{"parameters":{"row":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses single row of the reply buffer and returns the key-value pair.","param":["string $row Single row of the reply buffer."],"return":["array"]}},"parseDatabaseStats":{"parameters":{"str":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses the reply buffer and extracts the statistics of each logical DB.","param":["string $str Reply buffer."],"return":["array"]}},"parseAllocationStats":{"parameters":{"str":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses the reply buffer and extracts the allocation statistics.","param":["string $str Reply buffer."],"return":["array"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"PrefixableCommandInterface":{"namespace":"Predis\\Command","functions":{"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}}}},"ZSetReverseRank":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"PubSubSubscribeByPattern":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"KeySort":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ServerSave":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"StringSet":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"AbstractCommand":{"namespace":"Predis\\Command","functions":{"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}}}},"HyperLogLogAdd":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ServerClient":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"parseClientList":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses the reply buffer and returns the list of clients returned by\nthe CLIENT LIST command.","param":["string $data Reply buffer"],"return":["array"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ServerObject":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"StringIncrement":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ZSetRange":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prepareOptions":{"parameters":{"options":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a list of options and modifiers compatible with Redis.","param":["array $options List of options."],"return":["array"]}},"withScores":{"parameters":[],"annotations":{" short_description":"Checks for the presence of the WITHSCORES modifier.","return":["bool"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ServerEval":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"getScriptHash":{"parameters":[],"annotations":{" short_description":"Calculates the SHA1 hash of the body of the script.","return":["string SHA1 hash."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ListPushHeadX":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ListIndex":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"TransactionExec":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ServerMonitor":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"StringSetMultiple":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ServerCommand":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ZSetRemoveRangeByLex":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"HashExists":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ConnectionQuit":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"HashKeys":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"HashIncrementBy":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"PrefixHelpers":{"namespace":"Predis\\Command","functions":{"first":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Applies the specified prefix only the first argument.","param":["CommandInterface $command Command instance.","string           $prefix  Prefix string."]}},"all":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Applies the specified prefix to all the arguments.","param":["CommandInterface $command Command instance.","string           $prefix  Prefix string."]}},"interleaved":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Applies the specified prefix only to even arguments in the list.","param":["CommandInterface $command Command instance.","string           $prefix  Prefix string."]}},"skipFirst":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Applies the specified prefix to all the arguments but the first one.","param":["CommandInterface $command Command instance.","string           $prefix  Prefix string."]}},"skipLast":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Applies the specified prefix to all the arguments but the last one.","param":["CommandInterface $command Command instance.","string           $prefix  Prefix string."]}}}},"KeyPreciseTimeToLive":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ZSetRemove":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"StringSetRange":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"KeyRenamePreserve":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ListRange":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"PubSubUnsubscribe":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"SetIsMember":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ZSetRemoveRangeByScore":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"StringIncrementByFloat":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ZSetRank":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"StringDecrementBy":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"SetMembers":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"HashGetMultiple":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ServerSlowlog":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"CommandInterface":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}}}},"ServerSlaveOf":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ServerFlushAll":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ListPopLast":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ListPushTail":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"SetMove":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ZSetUnionStore":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"prepareOptions":{"parameters":{"options":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a list of options and modifiers compatible with Redis.","param":["array $options List of options."],"return":["array"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ZSetRangeByScore":{"namespace":"Predis\\Command","functions":{"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"prepareOptions":{"parameters":{"options":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a list of options and modifiers compatible with Redis.","param":["array $options List of options."],"return":["array"]}},"withScores":{"parameters":[],"annotations":{" short_description":"Checks for the presence of the WITHSCORES modifier.","return":["bool"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"SetDifferenceStoreTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsSourceKeysAsSingleArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testStoresMembersOfSetOnSingleSet":{"parameters":[],"annotations":{"group":["connected"]}},"testStoresDifferenceOfMultipleSets":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongTypeOfSourceKey":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"PubSubUnsubscribeTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsAsSingleArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testDoesNotSwitchToSubscribeMode":{"parameters":[],"annotations":{"group":["connected"]}},"testUnsubscribesFromNotSubscribedChannels":{"parameters":[],"annotations":{"group":["connected"]}},"testUnsubscribesFromSubscribedChannels":{"parameters":[],"annotations":{"group":["connected"]}},"testUnsubscribesFromAllSubscribedChannels":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"StringDecrementTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCreatesNewKeyOnNonExistingKey":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsTheValueOfTheKeyAfterDecrement":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnKeyValueNotInteger":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR value is not an integer or out of range"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"KeyPreciseExpireAtTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCanExpireKeys":{"parameters":[],"annotations":{"medium":[""],"group":["connected","slow"]}},"testDeletesKeysOnPastUnixTime":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ZSetAddTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsMembersScoresAsSingleArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAddsOrUpdatesMembersOrderingByScore":{"parameters":[],"annotations":{"group":["connected"]}},"testAcceptsFloatValuesAsScore":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"HashSetTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSetsValueOfSpecifiedField":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"HyperLogLogAddTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsFieldsAsSingleArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"requiresRedisVersion":[">= 2.8.9"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ListPopLastPushHeadTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsElementPoppedFromSourceAndPushesToDestination":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsElementPoppedFromSourceAndPushesToSelf":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsNullOnEmptySource":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongTypeOfSourceKey":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"testThrowsExceptionOnWrongTypeOfDestinationKey":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"StringSetBitTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCanSetBitsOfStrings":{"parameters":[],"annotations":{"group":["connected"]}},"testCreatesNewKeyOnNonExistingKey":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnInvalidBitValue":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR bit is not an integer or out of range"]}},"testThrowsExceptionOnNegativeOffset":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR bit offset is not an integer or out of range"]}},"testThrowsExceptionOnInvalidOffset":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR bit offset is not an integer or out of range"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"StringSetTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSetStringValue":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"TransactionExecTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExecutesTransactionAndReturnsArrayOfReplies":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsEmptyArrayOnEmptyTransactions":{"parameters":[],"annotations":{"group":["connected"]}},"testRepliesOfTransactionsAreNotParsed":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionWhenCallingOutsideTransaction":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR EXEC without MULTI"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"StringSetRangeTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCreatesNewKeyOnNonExistingKey":{"parameters":[],"annotations":{"group":["connected"]}},"testOverwritesOrAppendBytesInKeys":{"parameters":[],"annotations":{"group":["connected"]}},"testHandlesBinaryData":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnInvalidOffset":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR offset is out of range"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ZSetCardinalityTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsSizeOfSortedSet":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"KeyTypeTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsTypeOfKey":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"HashDeleteTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsFieldsAsSingleArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testDeletesSpecifiedFieldsFromHash":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"KeyRenamePreserveTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRenamesKeys":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsFalseOnNonExistingKeys":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR no such key"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerMonitorTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsTrueAndReadsEventsFromTheConnection":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"SetIntersectionTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsAsSingleArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsMembersOfSetOnSingleKey":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsEmptyArrayOnNonExistingSetForIntersection":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsMembersFromIntersectionAmongSets":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerFlushAllTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ZSetRemoveRangeByScoreTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRemovesRangeByScore":{"parameters":[],"annotations":{"group":["connected"]}},"testRemovesRangeByExclusiveScore":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"StringPreciseSetExpireTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCreatesNewKeyAndSetsTTL":{"parameters":[],"annotations":{"group":["connected"]}},"testKeyExpiresAfterTTL":{"parameters":[],"annotations":{"group":["connected","slow"]}},"testThrowsExceptionOnNonIntegerTTL":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR value is not an integer or out of range"]}},"testThrowsExceptionOnZeroTTL":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR invalid expire time in SETEX"],"todo":["Should not Redis return PSETEX instead of SETEX here?"]}},"testThrowsExceptionOnNegativeTTL":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR invalid expire time in SETEX"],"todo":["Should not Redis return PSETEX instead of SETEX here?"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ListSetTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSetsElementAtSpecifiedIndex":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnIndexOutOfRange":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR index out of range"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"SetScanTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsBasicUsage":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsWithOptionsArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testScanWithoutMatch":{"parameters":[],"annotations":{"group":["connected"]}},"testScanWithMatchingMembers":{"parameters":[],"annotations":{"group":["connected"]}},"testScanWithNoMatchingMembers":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"SetRandomMemberTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsRandomMemberFromSet":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsNullOnNonExistingSet":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"StringStrlenTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsTheLengthOfString":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsZeroOnNonExistingKeys":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"StringSubstrTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"HashKeysTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsKeysOfHash":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ZSetRemoveTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRemovesSpecifiedMembers":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"StringIncrementByFloatTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCreatesNewKeyOnNonExistingKey":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsTheValueOfTheKeyAfterIncrement":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnDecrementValueNotFloat":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR value is not a valid float"]}},"testThrowsExceptionOnKeyValueNotFloat":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR value is not a valid float"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"StringGetBitTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCanGetBitsFromString":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnNegativeOffset":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR bit offset is not an integer or out of range"]}},"testThrowsExceptionOnInvalidOffset":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR bit offset is not an integer or out of range"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ConnectionSelectTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCanSelectDifferentDatabase":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnUnexpectedDatabase":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR invalid DB index"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"HyperLogLogMergeTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsFieldsAsSingleArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"requiresRedisVersion":[">= 2.8.9"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ConnectionAuthTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"TransactionDiscardTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAbortsTransactionAndRestoresNormalFlow":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionWhenCallingOutsideTransaction":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR DISCARD without MULTI"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"HashGetAllTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsAllTheFieldsAndTheirValues":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerBackgroundSaveTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ZSetUnionStoreTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsSourceKeysAsSingleArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testStoresUnionInNewSortedSet":{"parameters":[],"annotations":{"group":["connected"]}},"testStoresUnionWithAggregateModifier":{"parameters":[],"annotations":{"group":["connected"]}},"testStoresUnionWithWeightsModifier":{"parameters":[],"annotations":{"group":["connected"]}},"testStoresUnionWithCombinedModifiers":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"StringGetSetTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsPreviousValueOfKey":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerShutdownTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ZSetReverseRankTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsRank":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"KeyRandomTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsFalseOnNonExpiringKeys":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsNullOnEmptyDatabase":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ConnectionPingTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAlwaysReturnsTrue":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerTimeTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsServerTime":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"HashValuesTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsValuesOfHash":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ConnectionEchoTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAlwaysReturnsThePassedMessage":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"StringBitCountTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsNumberOfBitsSet":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"StringAppendTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCreatesNewKeyOnNonExistingKey":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsTheLenghtOfTheStringAfterAppend":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerClientTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArgumentsOfClientKill":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsOfClientList":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsOfClientGetname":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsOfClientSetname":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponseOfClientKill":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponseOfClientList":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsListOfConnectedClients":{"parameters":[],"annotations":{"group":["connected"]}},"testGetsNameOfConnection":{"parameters":[],"annotations":{"group":["connected"],"requiresRedisVersion":[">= 2.6.9"]}},"testSetsNameOfConnection":{"parameters":[],"annotations":{"group":["connected"],"requiresRedisVersion":[">= 2.6.9"]}},"invalidConnectionNameProvider":{"parameters":[],"annotations":{"return":["array"]}},"testInvalidSetNameOfConnection":{"parameters":{"invalidConnectionName":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"group":["connected"],"requiresRedisVersion":[">= 2.6.9"],"dataProvider":["invalidConnectionNameProvider"],"expectedException":["Predis\\ServerException"]}},"testThrowsExceptioOnWrongModifier":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"]}},"testThrowsExceptionWhenKillingUnknownClient":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR No such client"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"HashGetTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsValueOfSpecifiedField":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ZSetIntersectionStoreTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsSourceKeysAsSingleArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testStoresIntersectionInNewSortedSet":{"parameters":[],"annotations":{"group":["connected"]}},"testStoresIntersectionWithAggregateModifier":{"parameters":[],"annotations":{"group":["connected"]}},"testStoresIntersectionWithWeightsModifier":{"parameters":[],"annotations":{"group":["connected"]}},"testStoresIntersectionWithCombinedModifiers":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ZSetRangeByLexTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsWithNamedLimit":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsElementsInWholeRange":{"parameters":[],"annotations":{"group":["connected"],"requiresRedisVersion":[">= 2.8.9"]}},"testReturnsElementsInInclusiveRange":{"parameters":[],"annotations":{"group":["connected"],"requiresRedisVersion":[">= 2.8.9"]}},"testReturnsElementsInExclusiveRange":{"parameters":[],"annotations":{"group":["connected"],"requiresRedisVersion":[">= 2.8.9"]}},"testReturnsElementsInMixedRange":{"parameters":[],"annotations":{"group":["connected"],"requiresRedisVersion":[">= 2.8.9"]}},"testRangeWithLimitModifier":{"parameters":[],"annotations":{"group":["connected"],"requiresRedisVersion":[">= 2.8.9"]}},"testThrowsExceptionOnInvalidRangeFormat":{"parameters":[],"annotations":{"group":["connected"],"requiresRedisVersion":[">= 2.8.9"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["min or max not valid string range item"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"requiresRedisVersion":[">= 2.8.9"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"SetIntersectionStoreTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsSourceKeysAsSingleArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testStoresMembersOfSetOnSingleKey":{"parameters":[],"annotations":{"group":["connected"]}},"testDoesNotStoreOnNonExistingSetForIntersection":{"parameters":[],"annotations":{"group":["connected"]}},"testStoresIntersectionOfMultipleSets":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongTypeOfSourceKey":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ListPushTailTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsValuesAsSingleArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPushesElementsToHeadOfList":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"StringDecrementByTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCreatesNewKeyOnNonExistingKey":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsTheValueOfTheKeyAfterDecrement":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnDecrementValueNotInteger":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR value is not an integer or out of range"]}},"testThrowsExceptionOnKeyValueNotInteger":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR value is not an integer or out of range"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"TransactionUnwatchTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testUnwatchWatchedKeys":{"parameters":[],"annotations":{"group":["connected"]}},"testCanBeCalledInsideTransaction":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ConnectionQuitTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsTrueWhenClosingConnection":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ZSetCountTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsNumberOfElementsInGivenScoreRange":{"parameters":[],"annotations":{"group":["connected"]}},"testInfinityScoreIntervals":{"parameters":[],"annotations":{"group":["connected"]}},"testExclusiveScoreIntervals":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"HashIncrementByTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIncrementsValueOfFieldByInteger":{"parameters":[],"annotations":{"group":["connected"]}},"testDecrementsValueOfFieldByInteger":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnStringField":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR hash value is not an integer"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"SetMembersTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsFalseOnNonExistingSet":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"KeyKeysV12xTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"SetMoveTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsMemberExistenceInSet":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongTypeOfSourceKey":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"testThrowsExceptionOnWrongTypeOfDestinationKey":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerConfigTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponseOfConfigGet":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponseOfConfigSet":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponseOfConfigResetstat":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsListOfConfigurationValues":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsListOfOneConfigurationEntry":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsEmptyListOnUnknownConfigurationEntry":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsTrueOnSuccessfulConfiguration":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionWhenSettingUnknownConfiguration":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR Unsupported CONFIG parameter: foo"]}},"testReturnsTrueOnResetstat":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnUnknownSubcommand":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"SetRemoveTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsMembersAsSingleArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRemovesMembersFromSet":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerCommandTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseEmptyResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsEmptyCommandInfoOnNonExistingCommand":{"parameters":[],"annotations":{"group":["connected"],"requiresRedisVersion":[">= 2.8.13"]}},"testReturnsCommandInfoOnExistingCommand":{"parameters":[],"annotations":{"group":["connected"],"requiresRedisVersion":[">= 2.8.13"]}},"testReturnsListOfCommandInfoWithNoArguments":{"parameters":[],"annotations":{"group":["connected"],"requiresRedisVersion":[">= 2.8.13"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ZSetScanTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsBasicUsage":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsWithOptionsArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testScanWithoutMatch":{"parameters":[],"annotations":{"group":["connected"]}},"testScanWithMatchingMembers":{"parameters":[],"annotations":{"group":["connected"]}},"testScanWithNoMatchingMembers":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerEvalSHATest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testGetScriptHash":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExecutesSpecifiedLuaScript":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongNumberOfKeys":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"]}},"testThrowsExceptionOnInvalidScript":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ZSetIncrementByTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIncrementsScoreOfMemberByFloat":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"PubSubUnsubscribeByPatternTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsAsSingleArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testDoesNotSwitchToSubscribeMode":{"parameters":[],"annotations":{"group":["connected"]}},"testUnsubscribesFromNotSubscribedChannels":{"parameters":[],"annotations":{"group":["connected"]}},"testUnsubscribesFromSubscribedChannels":{"parameters":[],"annotations":{"group":["connected"]}},"__testUnsubscribesFromAllSubscribedChannels":{"parameters":[],"annotations":{"group":["connected"],"todo":["Disabled for now, must investigate why this test hangs on PUNSUBSCRIBE."]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"StringIncrementTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCreatesNewKeyOnNonExistingKey":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsTheValueOfTheKeyAfterIncrement":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ListPopLastTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPopsTheLastElementFromList":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsNullOnEmptyList":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"SetCardinalityTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsNumberOfMembers":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsZeroOnEmptySet":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerEvalTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testGetScriptHash":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExecutesSpecifiedLuaScript":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongNumberOfKeys":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"]}},"testThrowsExceptionOnInvalidScript":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"KeyScanTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsBasicUsage":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsWithOptionsArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testScanWithoutMatch":{"parameters":[],"annotations":{"group":["connected"]}},"testScanWithMatchingKeys":{"parameters":[],"annotations":{"group":["connected"]}},"testScanWithNoMatchingKeys":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"PubSubPublishTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPublishesMessagesToChannel":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ScriptedCommandTest":{"namespace":"Predis\\Command","functions":{"testGetArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testGetArgumentsWithNegativeKeysCount":{"parameters":[],"annotations":{"group":["disconnected"]}},"testGetArgumentsWithZeroKeysCount":{"parameters":[],"annotations":{"group":["disconnected"]}},"testGetKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testGetKeysWithZeroKeysCount":{"parameters":[],"annotations":{"group":["disconnected"]}},"testGetKeysWithNegativeKeysCount":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysWithNegativeKeysCount":{"parameters":[],"annotations":{"group":["disconnected"]}},"testGetScriptHash":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ZSetReverseRangeByScoreTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsWithStringWithscores":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsWithNamedLimit":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponseWithScores":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAddsWithscoresModifiersOnlyWhenOptionIsTrue":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsElementsInScoreRange":{"parameters":[],"annotations":{"group":["connected"]}},"testInfinityScoreIntervals":{"parameters":[],"annotations":{"group":["connected"]}},"testExclusiveScoreIntervals":{"parameters":[],"annotations":{"group":["connected"]}},"testRangeWithWithscoresModifier":{"parameters":[],"annotations":{"group":["connected"]}},"testRangeWithLimitModifier":{"parameters":[],"annotations":{"group":["connected"]}},"testRangeWithCombinedModifiers":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"PubSubSubscribeTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsAsSingleArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsTheFirstSubscribedChannelDetails":{"parameters":[],"annotations":{"group":["connected"]}},"testCanSendSubscribeAfterSubscribe":{"parameters":[],"annotations":{"group":["connected"]}},"testCanSendPsubscribeAfterSubscribe":{"parameters":[],"annotations":{"group":["connected"]}},"testCanSendUnsubscribeAfterSubscribe":{"parameters":[],"annotations":{"group":["connected"]}},"testCanSendPunsubscribeAfterSubscribe":{"parameters":[],"annotations":{"group":["connected"]}},"testCanSendQuitAfterSubscribe":{"parameters":[],"annotations":{"group":["connected"]}},"testCannotSendOtherCommandsAfterSubscribe":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR only (P)SUBSCRIBE \/ (P)UNSUBSCRIBE \/ QUIT allowed in this context"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"SetIsMemberTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsMemberExistenceInSet":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsFalseOnNonExistingSet":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"StringGetRangeTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsSubstring":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsEmptyStringOnNonExistingKey":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ListPushHeadXTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPushesElementsToHeadOfExistingList":{"parameters":[],"annotations":{"group":["connected"]}},"testDoesNotPushElementOnNonExistingKey":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"StringSetMultipleTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsAsSingleNamedArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCreatesMultipleKeys":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"KeyExistsTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsTrueIfKeyExists":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsFalseIfKeyDoesNotExist":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ListIndexTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsElementAtIndex":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsElementAtNegativeIndex":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ListPushHeadTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsValuesAsSingleArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPushesElementsToHeadOfList":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerLastSaveTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsIntegerValue":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerFlushDatabaseTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFlushesTheEntireLogicalDatabase":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"HashGetMultipleTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsFieldsAsSingleArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsValuesOfSpecifiedFields":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ListPopFirstTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPopsTheFirstElementFromList":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsNullOnEmptyList":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"HashIncrementByFloatTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIncrementsValueOfFieldByFloat":{"parameters":[],"annotations":{"group":["connected"]}},"testDecrementsValueOfFieldByFloat":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnStringField":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR hash value is not a valid float"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ListTrimTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testTrimsListWithPositiveStartAndStop":{"parameters":[],"annotations":{"group":["connected"]}},"testTrimsListWithPositiveStartAndNegativeStop":{"parameters":[],"annotations":{"group":["connected"]}},"testTrimsListWithNegativeStartAndStop":{"parameters":[],"annotations":{"group":["connected"]}},"testHandlesStartAndStopOverflow":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"SetDifferenceTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsAsSingleArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsMembersOnSingleKeyOrNonExistingSetForDifference":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsMembersFromDifferenceAmongSets":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerObjectTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testObjectRefcount":{"parameters":[],"annotations":{"group":["connected"]}},"testObjectIdletime":{"parameters":[],"annotations":{"group":["connected"]}},"testObjectEncoding":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsNullOnNonExistingKey":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnInvalidSubcommand":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerInfoV26xTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCanParseResponsesFromOlderRedisVersions":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsAnArrayOfInfo":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"CommandTest":{"namespace":"Predis\\Command","functions":{"testImplementsCorrectInterface":{"parameters":[],"annotations":{"group":["disconnected"]}},"testGetEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSetRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSetArguments":{"parameters":[],"annotations":{"group":["disconnected"],"todo":["Since AbstractCommand::filterArguments is protected we cannot set an expectation\n      for it when AbstractCommand::setArguments() is invoked. I wonder how we can do that."]}},"testGetArgumentAtIndex":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSetAndGetHash":{"parameters":[],"annotations":{"group":["disconnected"]}},"testToString":{"parameters":[],"annotations":{"group":["disconnected"]}},"testToStringWithLongArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testNormalizeArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testNormalizeVariadic":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"KeyRestoreTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"PrefixableCommandTest":{"namespace":"Predis\\Command","functions":{"testImplementsCorrectInterface":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAddPrefixToFirstArgument":{"parameters":[],"annotations":{"group":["disconnected"]}},"testDoesNotBreakOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ZSetRemoveRangeByLexTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRemovesRangeByLexWithWholeRange":{"parameters":[],"annotations":{"group":["connected"],"requiresRedisVersion":[">= 2.8.9"]}},"testRemovesRangeByLexWithInclusiveRange":{"parameters":[],"annotations":{"group":["connected"],"requiresRedisVersion":[">= 2.8.9"]}},"testRemovesRangeByLexWithExclusiveRange":{"parameters":[],"annotations":{"group":["connected"],"requiresRedisVersion":[">= 2.8.9"]}},"testRemovesRangeByLexWithMixedRange":{"parameters":[],"annotations":{"group":["connected"],"requiresRedisVersion":[">= 2.8.9"]}},"testThrowsExceptionOnInvalidRangeFormat":{"parameters":[],"annotations":{"group":["connected"],"requiresRedisVersion":[">= 2.8.9"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["min or max not valid string range item"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"requiresRedisVersion":[">= 2.8.9"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"StringIncrementByTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCreatesNewKeyOnNonExistingKey":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsTheValueOfTheKeyAfterIncrement":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnDecrementValueNotInteger":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR value is not an integer or out of range"]}},"testThrowsExceptionOnKeyValueNotInteger":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR value is not an integer or out of range"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerScriptTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExistsReturnAnArrayOfValues":{"parameters":[],"annotations":{"group":["connected"],"todo":["We should probably convert integers to booleans."]}},"testLoadReturnsHashOfScripts":{"parameters":[],"annotations":{"group":["connected"]}},"testFlushesExistingScripts":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnInvalidSubcommand":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"KeyKeysTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsArrayOfMatchingKeys":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerDatabaseSizeTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsCurrentSizeOfDatabase":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"KeyExpireTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsFalseOnNonExistingKeys":{"parameters":[],"annotations":{"group":["connected"]}},"testCanExpireKeys":{"parameters":[],"annotations":{"medium":[""],"group":["connected","slow"]}},"testConsistencyWithTTL":{"parameters":[],"annotations":{"medium":[""],"group":["connected","slow"]}},"testDeletesKeysOnNegativeTTL":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"HashLengthTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsLengthOfHash":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"KeyDumpTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"StringSetPreserveTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSetStringValue":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"KeySortTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"lpushUnorderedList":{"parameters":{"redis":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"key":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Utility method to to an LPUSH of some unordered values on a key.","param":["Predis\\Client $redis Redis client instance.","string        $key   Target key"],"return":["array"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testGetModifierCanBeString":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testBasicSort":{"parameters":[],"annotations":{"group":["connected"]}},"testSortWithAscOrDescModifier":{"parameters":[],"annotations":{"group":["connected"]}},"testSortWithLimitModifier":{"parameters":[],"annotations":{"group":["connected"]}},"testSortWithAlphaModifier":{"parameters":[],"annotations":{"group":["connected"]}},"testSortWithStoreModifier":{"parameters":[],"annotations":{"group":["connected"]}},"testSortWithCombinedModifiers":{"parameters":[],"annotations":{"group":["connected"]}},"testSortWithGetModifiers":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"StringGetMultipleTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsAsSingleArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsArrayOfValues":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsArrayWithNullValuesOnNonExistingKeys":{"parameters":[],"annotations":{"group":["connected"]}},"testDoesNotThrowExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ListPushTailXTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPushesElementsToHeadOfExistingList":{"parameters":[],"annotations":{"group":["connected"]}},"testDoesNotPushElementOnNonExistingKey":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"HashSetPreserveTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSetsNewFieldsAndPreserversExistingOnes":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ZSetScoreTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsRank":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"KeyDeleteTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsAsSingleArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsNumberOfDeletedKeys":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"RawCommandTest":{"namespace":"Predis\\Command","functions":{"testConstructorWithCommandID":{"parameters":[],"annotations":{"group":["disconnected"]}},"testConstructorWithCommandIDAndArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testStaticCreate":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExceptionOnMissingCommandID":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["InvalidArgumentException"],"expectedExceptionMessage":["Arguments array is missing the command ID"]}},"testPHPWarningOnMissingCommandIDWithStaticCreate":{"parameters":[],"annotations":{" short_description":"The signature of RawCommand::create() requires one argument which is the\nID of the command (other arguments are fetched dinamically). If the first\nargument is missing, PHP emits an E_WARNING.","group":["disconnected"],"expectedException":["PHPUnit_Framework_Error_Warning"]}},"testSetArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSetRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSetAndGetHash":{"parameters":[],"annotations":{"group":["disconnected"]}},"testNormalizesCommandIdentifiersToUppercase":{"parameters":[],"annotations":{"group":["disconnected"]}},"testToString":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"HashSetMultipleTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsFieldsValuesAsSingleArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSetsSpecifiedFieldsOfHash":{"parameters":[],"annotations":{"group":["connected"]}},"testSetsTheSpecifiedFie":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"StringSetMultiplePreserveTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsAsSingleNamedArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCreatesMultipleKeys":{"parameters":[],"annotations":{"group":["connected"]}},"testCreatesMultipleKeysAndPreservesExistingOnes":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"SetUnionTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsAsSingleArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsMembersOnSingleKeyOrNonExistingSetForUnion":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsMembersFromDifferenceAmongSets":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"KeyPreciseExpireTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsFalseOnNonExistingKeys":{"parameters":[],"annotations":{"group":["connected"]}},"testCanExpireKeys":{"parameters":[],"annotations":{"medium":[""],"group":["connected","slow"]}},"testConsistencyWithTTL":{"parameters":[],"annotations":{"group":["connected","slow"]}},"testDeletesKeysOnNegativeTTL":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"HyperLogLogCountTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsFieldsAsSingleArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"requiresRedisVersion":[">= 2.8.9"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"testThrowsExceptionOnWrongTypeOfAtLeastOneKey":{"parameters":[],"annotations":{"group":["connected"],"requiresRedisVersion":[">= 2.8.9"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ListRangeTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsListSliceWithPositiveStartAndStop":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsListSliceWithPositiveStartAndNegativeStop":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsListSliceWithNegativeStartAndStop":{"parameters":[],"annotations":{"group":["connected"]}},"testHandlesStartAndStopOverflow":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsEmptyArrayOnNonExistingList":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerSaveTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"KeyTimeToLiveTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsTTL":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsLessThanZeroOnNonExpiringKeys":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsLessThanZeroOnNonExistingKeys":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ZSetLexCountTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExclusiveIntervalRange":{"parameters":[],"annotations":{"group":["connected"],"requiresRedisVersion":[">= 2.8.9"]}},"testInclusiveIntervalRange":{"parameters":[],"annotations":{"group":["connected"],"requiresRedisVersion":[">= 2.8.9"]}},"testWholeRangeInterval":{"parameters":[],"annotations":{"group":["connected"],"requiresRedisVersion":[">= 2.8.9"]}},"testThrowsExceptionOnInvalidRangeFormat":{"parameters":[],"annotations":{"group":["connected"],"requiresRedisVersion":[">= 2.8.9"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["min or max not valid string range item"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"requiresRedisVersion":[">= 2.8.9"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerSlaveOfTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArgumentsHostPortArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsNoOneArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsNoOneString":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ListInsertTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsLengthOfListAfterInser":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsNegativeLengthOnFailedInsert":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsZeroLengthOnNonExistingList":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ListPopFirstBlockingTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsKeysAsSingleArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerSlowlogTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsAnArrayOfLoggedCommands":{"parameters":[],"annotations":{"group":["connected"]}},"testCanResetTheLog":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnInvalidSubcommand":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"KeyMoveTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testMovesKeysToDifferentDatabases":{"parameters":[],"annotations":{"group":["connected"],"todo":["This test fails if REDIS_SERVER_DBNUM is 0."]}},"testThrowsExceptionOnInvalidDatabases":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR index out of range"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"KeyPreciseTimeToLiveTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsTTL":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsLessThanZeroOnNonExpiringKeys":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsLessThanZeroOnNonExistingKeys":{"parameters":[],"annotations":{"group":["connected"],"todo":["PTTL changed in Redis >= 2.8 to return -2 on non existing keys, we\n      should handle this case with a better solution than the current one."]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"TransactionMultiTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testInitializesNewTransaction":{"parameters":[],"annotations":{"group":["connected"]}},"testActuallyReturnsReplyObjectAbstraction":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionWhenCallingMultiInsideTransaction":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR MULTI calls can not be nested"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ListPopLastPushHeadBlockingTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"KeyPersistTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRemovesExpireFromKey":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsFalseOnNonExpiringKeys":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsFalseOnNonExistentKeys":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ZSetReverseRangeTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsWithStringWithscores":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponseWithScores":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAddsWithscoresModifiersOnlyWhenOptionIsTrue":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsElementsInRange":{"parameters":[],"annotations":{"group":["connected"]}},"testRangeWithWithscoresModifier":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"SetPopTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPopsRandomMemberFromSet":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"SetUnionStoreTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsSourceKeysAsSingleArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testStoresMembersOfSetOnSingleSet":{"parameters":[],"annotations":{"group":["connected"]}},"testStoresUnionOfMultipleSets":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongTypeOfSourceKey":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ListPopLastBlockingTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsKeysAsSingleArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"SetAddTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsValuesAsSingleArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAddsMembersToSet":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"StringGetTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsStringValue":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsEmptyStringOnEmptyStrings":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsNullOnNonExistingKeys":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"HashScanTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsBasicUsage":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsWithOptionsArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testScanWithoutMatch":{"parameters":[],"annotations":{"group":["connected"]}},"testScanWithMatchingMembers":{"parameters":[],"annotations":{"group":["connected"]}},"testScanWithNoMatchingMembers":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ListLengthTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsLengthOfList":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsZeroLengthOnNonExistingList":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"PubSubSubscribeByPatternTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsAsSingleArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsTheFirstPsubscribedChannelDetails":{"parameters":[],"annotations":{"group":["connected"]}},"testCanSendPsubscribeAfterPsubscribe":{"parameters":[],"annotations":{"group":["connected"]}},"testCanSendSubscribeAfterPsubscribe":{"parameters":[],"annotations":{"group":["connected"]}},"testCanSendUnsubscribeAfterPsubscribe":{"parameters":[],"annotations":{"group":["connected"]}},"testCanSendPunsubscribeAfterPsubscribe":{"parameters":[],"annotations":{"group":["connected"]}},"testCanSendQuitAfterPsubscribe":{"parameters":[],"annotations":{"group":["connected"]}},"testCannotSendOtherCommandsAfterPsubscribe":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR only (P)SUBSCRIBE \/ (P)UNSUBSCRIBE \/ QUIT allowed in this context"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ZSetRemoveRangeByRankTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRemovesRangeByRank":{"parameters":[],"annotations":{"group":["connected"]}},"testRemovesRangeByRankWithNegativeIndex":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ZSetRangeByScoreTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsWithStringWithscores":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsWithNamedLimit":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponseWithScores":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAddsWithscoresModifiersOnlyWhenOptionIsTrue":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsElementsInScoreRange":{"parameters":[],"annotations":{"group":["connected"]}},"testInfinityScoreIntervals":{"parameters":[],"annotations":{"group":["connected"]}},"testExclusiveScoreIntervals":{"parameters":[],"annotations":{"group":["connected"]}},"testRangeWithWithscoresModifier":{"parameters":[],"annotations":{"group":["connected"]}},"testRangeWithLimitModifier":{"parameters":[],"annotations":{"group":["connected"]}},"testRangeWithCombinedModifiers":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"HashExistsTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsExistenceOfSpecifiedField":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"KeyExpireAtTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsFalseOnNonExistingKeys":{"parameters":[],"annotations":{"group":["connected"]}},"testCanExpireKeys":{"parameters":[],"annotations":{"medium":[""],"group":["connected","slow"]}},"testDeletesKeysOnPastUnixTime":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"StringSetExpireTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCreatesNewKeyAndSetsTTL":{"parameters":[],"annotations":{"group":["connected"]}},"testKeyExpiresAfterTTL":{"parameters":[],"annotations":{"medium":[""],"group":["connected","slow"]}},"testThrowsExceptionOnNonIntegerTTL":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR value is not an integer or out of range"]}},"testThrowsExceptionOnZeroTTL":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR invalid expire time in SETEX"]}},"testThrowsExceptionOnNegativeTTL":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR invalid expire time in SETEX"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerInfoTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCanParseResponsesFromRedis30":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsAnArrayOfInfo":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"KeyRenameTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRenamesKeys":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnNonExistingKeys":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR no such key"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ZSetRangeTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsWithStringWithscores":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponseWithScores":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAddsWithscoresModifiersOnlyWhenOptionIsTrue":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsElementsInRange":{"parameters":[],"annotations":{"group":["connected"]}},"testRangeWithWithscoresModifier":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"PrefixHelpersTest":{"namespace":"Predis\\Command","functions":{"testPrefixFirst":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixAll":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixInterleaved":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixSkipLast":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"StringBitOpTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsKeysAsSingleArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCanPerformBitwiseAND":{"parameters":[],"annotations":{"group":["connected"]}},"testCanPerformBitwiseOR":{"parameters":[],"annotations":{"group":["connected"]}},"testCanPerformBitwiseXOR":{"parameters":[],"annotations":{"group":["connected"]}},"testCanPerformBitwiseNOT":{"parameters":[],"annotations":{"group":["connected"]}},"testBitwiseNOTAcceptsOnlyOneSourceKey":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR BITOP NOT must be called with a single source key."]}},"testThrowsExceptionOnInvalidOperation":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR syntax error"]}},"testThrowsExceptionOnInvalidSourceKey":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"testDoesNotThrowExceptionOnInvalidDestinationKey":{"parameters":[],"annotations":{"group":["connected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ListRemoveTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRemovesMatchingElementsFromHeadToTail":{"parameters":[],"annotations":{"group":["connected"]}},"testRemovesMatchingElementsFromTailToHead":{"parameters":[],"annotations":{"group":["connected"]}},"testRemovesAllMatchingElements":{"parameters":[],"annotations":{"group":["connected"]}},"testReturnsZeroOnNonMatchingElementsOrEmptyList":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"TransactionWatchTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArgumentsAsSingleArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAbortsTransactionOnExternalWriteOperations":{"parameters":[],"annotations":{"group":["connected"]}},"testCanWatchNotYetExistingKeys":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionWhenCallingInsideTransaction":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR WATCH inside MULTI is not allowed"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ZSetRankTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPrefixKeysIgnoredOnEmptyArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsRank":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnWrongType":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerBackgroundRewriteAOFTest":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"testFilterArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParseResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"PredisCommandTestCase":{"namespace":"Predis\\Command","functions":{"getExpectedCommand":{"parameters":[],"annotations":{" short_description":"Returns the expected command.","return":["CommandInterface|string Instance or FQN of the expected command."]}},"getExpectedId":{"parameters":[],"annotations":{" short_description":"Returns the expected command ID.","return":["string"]}},"getCommand":{"parameters":[],"annotations":{" short_description":"Returns a new command instance.","return":["CommandInterface"]}},"getClient":{"parameters":{"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["bool   $flushdb Flush selected database before returning the client."],"return":["Client"]}},"isPrefixable":{"parameters":[],"annotations":{" short_description":"Returns wether the command is prefixable or not.","return":["bool"]}},"getCommandWithArguments":{"parameters":[],"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["... List of arguments for the command."],"return":["CommandInterface"]}},"getCommandWithArgumentsArray":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new command instance with the specified arguments.","param":["array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"testCommandId":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRawArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ProcessorChain":{"namespace":"Predis\\Command\\Processor","functions":{"__construct":{"parameters":{"processors":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["array $processors List of instances of CommandProcessorInterface."]}},"add":{"parameters":{"processor":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Adds a command processor.","param":["CommandProcessorInterface $processor A command processor."]}},"remove":{"parameters":{"processor":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Removes a command processor from the chain.","param":["CommandProcessorInterface $processor A command processor."]}},"process":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Processes a Redis command.","param":["CommandInterface $command Redis command."]}},"getProcessors":{"parameters":[],"annotations":{" short_description":"Returns an ordered list of the command processors in the chain.","return":["array"]}},"getIterator":{"parameters":[],"annotations":{" short_description":"Returns an iterator over the list of command processor in the chain.","return":["\\ArrayIterator"]}},"count":{"parameters":[],"annotations":{" short_description":"Returns the number of command processors in the chain.","return":["int"]}},"offsetExists":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":""}},"offsetGet":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":""}},"offsetSet":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"processor":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":""}},"offsetUnset":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":""}}}},"KeyPrefixProcessor":{"namespace":"Predis\\Command\\Processor","functions":{"__construct":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string $prefix Prefix for the keys."]}},"setPrefix":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sets a prefix that is applied to all the keys.","param":["string $prefix Prefix for the keys."]}},"getPrefix":{"parameters":[],"annotations":{" short_description":"Gets the current prefix.","return":["string"]}},"process":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Processes a Redis command.","param":["CommandInterface $command Redis command."]}},"__toString":{"parameters":[],"annotations":{" short_description":""}}}},"CommandProcessorInterface":{"namespace":"Predis\\Command\\Processor","functions":{"process":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Processes a Redis command.","param":["CommandInterface $command Redis command."]}}}},"CommandProcessorChainInterface":{"namespace":"Predis\\Command\\Processor","functions":{"add":{"parameters":{"processor":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Adds a command processor.","param":["CommandProcessorInterface $processor A command processor."]}},"remove":{"parameters":{"processor":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Removes a command processor from the chain.","param":["CommandProcessorInterface $processor A command processor."]}},"getProcessors":{"parameters":[],"annotations":{" short_description":"Returns an ordered list of the command processors in the chain.","return":["array"]}},"process":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Processes a Redis command.","param":["CommandInterface $command Redis command."]}},"getIterator":{"parameters":[],"annotations":[]},"count":{"parameters":[],"annotations":[]}}},"CommandProcessingInterface":{"namespace":"Predis\\Command\\Processor","functions":{"setProcessor":{"parameters":{"processor":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Associates a command processor.","param":["CommandProcessorInterface $processor The command processor."]}},"getProcessor":{"parameters":[],"annotations":{" short_description":"Returns the associated command processor.","return":["CommandProcessorInterface"]}}}},"KeyPrefixProcessorTest":{"namespace":"Predis\\Command\\Processor","functions":{"testConstructorWithPrefix":{"parameters":[],"annotations":{"group":["disconnected"]}},"testChangePrefix":{"parameters":[],"annotations":{"group":["disconnected"]}},"testProcessPrefixableCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSkipPrefixableCommandsWithNoArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSkipNotPrefixableCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"testInstanceCanBeCastedToString":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ProcessorChainTest":{"namespace":"Predis\\Command\\Processor","functions":{"testConstructor":{"parameters":[],"annotations":{"group":["disconnected"]}},"testConstructorWithProcessorsArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCountProcessors":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAddProcessors":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAddMoreProcessors":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRemoveProcessors":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRemoveProcessorNotInChain":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRemoveProcessorFromEmptyChain":{"parameters":[],"annotations":{"group":["disconnected"]}},"testProcessChain":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"MultiBulkResponseSimple":{"namespace":"Predis\\Iterator","functions":{"__construct":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"size":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["SingleConnectionInterface $connection Connection to Redis.","int                       $size       Number of elements of the multibulk reply."]}},"__destruct":{"parameters":[],"annotations":{" short_description":"Handles the synchronization of the client with the Redis protocol\nthen PHP's garbage collector kicks in (e.g. then the iterator goes\nout of the scope of a foreach)."}},"sync":{"parameters":{"drop":{"default":false,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Synchronizes the client with the queued elements that have not been\nread from the connection by consuming the rest of the multibulk reply,\nor simply by dropping the connection.","param":["bool $drop True to synchronize the client by dropping the connection.\n                  False to synchronize the client by consuming the multibulk reply."]}},"getValue":{"parameters":[],"annotations":{" short_description":"Reads the next item of the multibulk reply from the server.","return":["mixed"]}},"asTuple":{"parameters":[],"annotations":{" short_description":"Returns an iterator that reads the multi-bulk response as\nlist of tuples.","return":["MultiBulkResponseTuple"]}},"rewind":{"parameters":[],"annotations":{" short_description":""}},"current":{"parameters":[],"annotations":{" short_description":""}},"key":{"parameters":[],"annotations":{" short_description":""}},"next":{"parameters":[],"annotations":{" short_description":""}},"valid":{"parameters":[],"annotations":{" short_description":""}},"count":{"parameters":[],"annotations":{" short_description":"Returns the number of items of the whole multibulk reply."," long_description":"This method should be used to get the size of the current multibulk\nreply without using iterator_count, which actually consumes the\niterator to calculate the size (rewinding is not supported).","return":["int"]}},"getPosition":{"parameters":[],"annotations":{" short_description":"Returns the current position of the iterator.","return":["int"]}}}},"MultiBulkResponse":{"namespace":"Predis\\Iterator","functions":{"rewind":{"parameters":[],"annotations":{" short_description":""}},"current":{"parameters":[],"annotations":{" short_description":""}},"key":{"parameters":[],"annotations":{" short_description":""}},"next":{"parameters":[],"annotations":{" short_description":""}},"valid":{"parameters":[],"annotations":{" short_description":""}},"count":{"parameters":[],"annotations":{" short_description":"Returns the number of items of the whole multibulk reply."," long_description":"This method should be used to get the size of the current multibulk\nreply without using iterator_count, which actually consumes the\niterator to calculate the size (rewinding is not supported).","return":["int"]}},"getPosition":{"parameters":[],"annotations":{" short_description":"Returns the current position of the iterator.","return":["int"]}},"getValue":{"parameters":[],"annotations":{" short_description":""}}}},"MultiBulkResponseTuple":{"namespace":"Predis\\Iterator","functions":{"__construct":{"parameters":{"iterator":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["MultiBulkResponseSimple $iterator Multibulk reply iterator."]}},"checkPreconditions":{"parameters":{"iterator":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks for valid preconditions.","param":["MultiBulkResponseSimple $iterator Multibulk reply iterator."]}},"getInnerIterator":{"parameters":[],"annotations":{" short_description":""}},"__destruct":{"parameters":[],"annotations":{" short_description":""}},"getValue":{"parameters":[],"annotations":{" short_description":""}},"rewind":{"parameters":[],"annotations":{" short_description":""}},"current":{"parameters":[],"annotations":{" short_description":""}},"key":{"parameters":[],"annotations":{" short_description":""}},"next":{"parameters":[],"annotations":{" short_description":""}},"valid":{"parameters":[],"annotations":{" short_description":""}},"count":{"parameters":[],"annotations":{" short_description":"Returns the number of items of the whole multibulk reply."," long_description":"This method should be used to get the size of the current multibulk\nreply without using iterator_count, which actually consumes the\niterator to calculate the size (rewinding is not supported).","return":["int"]}},"getPosition":{"parameters":[],"annotations":{" short_description":"Returns the current position of the iterator.","return":["int"]}}}},"MultiBulkResponseSimpleTest":{"namespace":"Predis\\Iterator","functions":{"testIterableMultibulk":{"parameters":[],"annotations":{"group":["connected"]}},"testIterableMultibulkCanBeWrappedAsTupleIterator":{"parameters":[],"annotations":{"group":["connected"]}},"testSyncWithFalseConsumesReplyFromUnderlyingConnection":{"parameters":[],"annotations":{"group":["connected"]}},"testSyncWithTrueDropsUnderlyingConnection":{"parameters":[],"annotations":{"group":["connected"]}},"testGarbageCollectorDropsUnderlyingConnection":{"parameters":[],"annotations":{"group":["connected"]}},"getClient":{"parameters":[],"annotations":{" short_description":"Returns a new client instance.","return":["Client"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"MultiBulkResponseTupleTest":{"namespace":"Predis\\Iterator","functions":{"testInitiatedMultiBulkIteratorsAreNotValid":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["RuntimeException"],"expectedExceptionMessage":["Cannot initialize a tuple iterator with an already initiated iterator"]}},"testMultiBulkWithOddSizesAreInvalid":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["UnexpectedValueException"],"expectedExceptionMessage":["Invalid reply size for a tuple iterator [3]"]}},"testIterableMultibulk":{"parameters":[],"annotations":{"group":["connected"]}},"testGarbageCollectorDropsUnderlyingConnection":{"parameters":[],"annotations":{"group":["connected"]}},"getClient":{"parameters":[],"annotations":{" short_description":"Returns a new client instance.","return":["Client"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"SessionHandler":{"namespace":"Predis\\Session","functions":{"__construct":{"parameters":{"client":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"options":{"default":[],"isNull":false,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{"param":["ClientInterface $client  Fully initialized client instance.","array           $options Session handler options."]}},"register":{"parameters":[],"annotations":{" short_description":"Registers the handler instance as the current session handler."}},"open":{"parameters":{"save_path":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"session_id":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":""}},"close":{"parameters":[],"annotations":{" short_description":""}},"gc":{"parameters":{"maxlifetime":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":""}},"read":{"parameters":{"session_id":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":""}},"write":{"parameters":{"session_id":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"session_data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":""}},"destroy":{"parameters":{"session_id":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":""}},"getClient":{"parameters":[],"annotations":{" short_description":"Returns the underlying client instance.","return":["ClientInterface"]}},"getMaxLifeTime":{"parameters":[],"annotations":{" short_description":"Returns the session max lifetime value.","return":["int"]}}}},"ServerException":{"namespace":"Predis","functions":{"getErrorType":{"parameters":[],"annotations":{" short_description":"Gets the type of the error returned by Redis.","return":["string"]}},"toResponseError":{"parameters":[],"annotations":{" short_description":"Converts the exception to an instance of ResponseError.","return":["ResponseError"]}},"__clone":{"parameters":[],"annotations":[]},"__construct":{"parameters":{"message":{"default":"","isNull":false,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"code":{"default":"","isNull":false,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"previous":{"default":"","isNull":false,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":[]},"getMessage":{"parameters":[],"annotations":[]},"getCode":{"parameters":[],"annotations":[]},"getFile":{"parameters":[],"annotations":[]},"getLine":{"parameters":[],"annotations":[]},"getTrace":{"parameters":[],"annotations":[]},"getPrevious":{"parameters":[],"annotations":[]},"getTraceAsString":{"parameters":[],"annotations":[]},"__toString":{"parameters":[],"annotations":[]}}},"Client":{"namespace":"Predis","functions":{"__construct":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Initializes a new client with optional connection parameters and client options.","param":["mixed $parameters Connection parameters for one or multiple servers.","mixed $options    Options that specify certain behaviours for the client."]}},"filterOptions":{"parameters":{"options":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Creates an instance of Predis\\Option\\ClientOptions from various types of\narguments (string, array, Predis\\Profile\\ServerProfile) or returns the\npassed object if it is an instance of Predis\\Option\\ClientOptions.","param":["mixed         $options Client options."],"return":["ClientOptions"]}},"initializeConnection":{"parameters":{"parameters":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Initializes one or multiple connection (cluster) objects from various\ntypes of arguments (string, array) or returns the passed object if it\nimplements Predis\\Connection\\ConnectionInterface.","param":["mixed               $parameters Connection parameters or instance."],"return":["ConnectionInterface"]}},"getProfile":{"parameters":[],"annotations":{" short_description":"Returns the server profile used by the client.","return":["ServerProfileInterface"]}},"getOptions":{"parameters":[],"annotations":{" short_description":"Returns the client options specified upon initialization.","return":["ClientOptionsInterface"]}},"getConnectionFactory":{"parameters":[],"annotations":{" short_description":"Returns the connection factory object used by the client.","return":["ConnectionFactoryInterface"]}},"getClientFor":{"parameters":{"connectionID":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of a client for the specified connection when the\nclient is connected to a cluster. The new instance will use the same\noptions of the original client.","param":["string $connectionID Identifier for the connection."],"return":["Client"]}},"connect":{"parameters":[],"annotations":{" short_description":"Opens the connection to the server."}},"disconnect":{"parameters":[],"annotations":{" short_description":"Disconnects from the server."}},"quit":{"parameters":[],"annotations":{" short_description":"Disconnects from the server."," long_description":"This method is an alias of disconnect()."}},"isConnected":{"parameters":[],"annotations":{" short_description":"Checks if the underlying connection is connected to Redis.","return":["bool True means that the connection is open.\n             False means that the connection is closed."]}},"getConnection":{"parameters":[],"annotations":{" short_description":"Returns the underlying connection instance.","return":["ConnectionInterface"]}},"getConnectionById":{"parameters":{"connectionId":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Retrieves a single connection out of an aggregated connections instance.","param":["string                               $connectionId Index or alias of the single connection."],"return":["Connection\\SingleConnectionInterface"]}},"__call":{"parameters":{"commandID":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Creates a Redis command with the specified arguments and sends a request\nto the server.","param":["string $commandID Command ID.","array  $arguments Arguments for the command."],"return":["mixed"]}},"createCommand":{"parameters":{"commandID":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Creates a new instance of the specified Redis command.","param":["string                   $method    The name of a Redis command.","array                    $arguments The arguments for the command."],"return":["Command\\CommandInterface"]}},"executeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Executes the specified Redis command.","param":["CommandInterface $command A Redis command."],"return":["mixed"]}},"onResponseError":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"response":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Handles -ERR responses returned by Redis.","param":["CommandInterface       $command  The command that generated the error.","ResponseErrorInterface $response The error response instance."],"return":["mixed"]}},"sharedInitializer":{"parameters":{"argv":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"initializer":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Calls the specified initializer method on $this with 0, 1 or 2 arguments."," long_description":"TODO: Invert $argv and $initializer.","param":["array  $argv        Arguments for the initializer.","string $initializer The initializer method."],"return":["mixed"]}},"pipeline":{"parameters":[],"annotations":{" short_description":"Creates a new pipeline context and returns it, or returns the results of\na pipeline executed inside the optionally provided callable object.","param":["mixed                 ... Options for the context, a callable object, or both."],"return":["PipelineContext|array"]}},"initPipeline":{"parameters":{"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"callable":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Pipeline context initializer.","param":["array                 $options  Options for the context.","mixed                 $callable Optional callable object used to execute the context."],"return":["PipelineContext|array"]}},"pipelineExecute":{"parameters":{"pipeline":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callable":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Executes a pipeline context when a callable object is passed.","param":["PipelineContext       $pipeline Pipeline context instance.","mixed                 $callable Optional callable object used to execute the context."],"return":["PipelineContext|array"]}},"multiExec":{"parameters":[],"annotations":{" short_description":"Creates a new transaction context and returns it, or returns the results of\na transaction executed inside the optionally provided callable object.","deprecated":["You should start using the new Client::transaction() method\n            as it will replace Client::multiExec() in the next major\n            version of the library."],"param":["mixed                  ... Options for the context, a callable object, or both."],"return":["MultiExecContext|array"]}},"transaction":{"parameters":[],"annotations":{" short_description":"Creates a new transaction context and returns it, or returns the results of\na transaction executed inside the optionally provided callable object.","param":["mixed                  ... Options for the context, a callable object, or both."],"return":["MultiExecContext|array"]}},"initMultiExec":{"parameters":{"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"callable":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Transaction context initializer.","param":["array                  $options  Options for the context.","mixed                  $callable Optional callable object used to execute the context."],"return":["MultiExecContext|array"]}},"pubSub":{"parameters":[],"annotations":{" short_description":"Creates a new Publish \/ Subscribe context and returns it, or executes it\ninside the optionally provided callable object.","deprecated":["This method will change in the next major release to support\n            the new PUBSUB command introduced in Redis 2.8. Please use\n            Client::pubSubLoop() to create Predis\\PubSub\\PubSubContext\n            instances from now on."],"param":["mixed               ... Options for the context, a callable object, or both."],"return":["PubSubContext|array"]}},"pubSubLoop":{"parameters":[],"annotations":{" short_description":"Creates a new Publish \/ Subscribe context and returns it, or executes it\ninside the optionally provided callable object.","param":["mixed               ... Options for the context, a callable object, or both."],"return":["PubSubContext|array"]}},"initPubSub":{"parameters":{"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"callable":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Publish \/ Subscribe context initializer.","param":["array         $options  Options for the context.","mixed         $callable Optional callable object used to execute the context."],"return":["PubSubContext"]}},"monitor":{"parameters":[],"annotations":{" short_description":"Returns a new monitor context.","return":["MonitorContext"]}}}},"ResponseError":{"namespace":"Predis","functions":{"__construct":{"parameters":{"message":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string $message Error message returned by Redis"]}},"getMessage":{"parameters":[],"annotations":{" short_description":"Returns the error message","return":["string"]}},"getErrorType":{"parameters":[],"annotations":{" short_description":"Returns the error type (e.g. ERR, ASK, MOVED)","return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Converts the object to its string representation.","return":["string"]}}}},"ResponseErrorInterface":{"namespace":"Predis","functions":{"getMessage":{"parameters":[],"annotations":{" short_description":"Returns the error message","return":["string"]}},"getErrorType":{"parameters":[],"annotations":{" short_description":"Returns the error type (e.g. ERR, ASK, MOVED)","return":["string"]}}}},"ResponseQueued":{"namespace":"Predis","functions":{"__toString":{"parameters":[],"annotations":{" short_description":"Converts the object to its string representation.","return":["string"]}},"__get":{"parameters":{"property":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the value of the specified property.","param":["string $property Name of the property."],"return":["mixed"]}},"__isset":{"parameters":{"property":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks if the specified property is set.","param":["string $property Name of the property."],"return":["bool"]}}}},"ExecutableContextInterface":{"namespace":"Predis","functions":{"execute":{"parameters":{"callable":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Starts the execution of the context.","param":["mixed $callable Optional callback for execution."],"return":["array"]}}}},"BasicClientInterface":{"namespace":"Predis","functions":{"executeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Executes the specified Redis command.","param":["CommandInterface $command A Redis command."],"return":["mixed"]}}}},"ClientInterface":{"namespace":"Predis","functions":{"getProfile":{"parameters":[],"annotations":{" short_description":"Returns the server profile used by the client.","return":["ServerProfileInterface"]}},"getOptions":{"parameters":[],"annotations":{" short_description":"Returns the client options specified upon initialization.","return":["ClientOptionsInterface"]}},"connect":{"parameters":[],"annotations":{" short_description":"Opens the connection to the server."}},"disconnect":{"parameters":[],"annotations":{" short_description":"Disconnects from the server."}},"getConnection":{"parameters":[],"annotations":{" short_description":"Returns the underlying connection instance.","return":["ConnectionInterface"]}},"createCommand":{"parameters":{"method":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Creates a new instance of the specified Redis command.","param":["string                   $method    The name of a Redis command.","array                    $arguments The arguments for the command."],"return":["Command\\CommandInterface"]}},"executeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Executes the specified Redis command.","param":["CommandInterface $command A Redis command."],"return":["mixed"]}}}},"NotSupportedException":{"namespace":"Predis","functions":{"__clone":{"parameters":[],"annotations":[]},"__construct":{"parameters":{"message":{"default":"","isNull":false,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"code":{"default":"","isNull":false,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"previous":{"default":"","isNull":false,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":[]},"getMessage":{"parameters":[],"annotations":[]},"getCode":{"parameters":[],"annotations":[]},"getFile":{"parameters":[],"annotations":[]},"getLine":{"parameters":[],"annotations":[]},"getTrace":{"parameters":[],"annotations":[]},"getPrevious":{"parameters":[],"annotations":[]},"getTraceAsString":{"parameters":[],"annotations":[]},"__toString":{"parameters":[],"annotations":[]}}},"Autoloader":{"namespace":"Predis","functions":{"__construct":{"parameters":{"baseDirectory":{"default":"\/home\/yash\/Projects\/php\/laravel\/vendor\/predis\/predis\/lib\/Predis","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string $baseDirectory Base directory where the source files are located."]}},"register":{"parameters":{"prepend":{"default":false,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Registers the autoloader class with the PHP SPL autoloader.","param":["bool $prepend Prepend the autoloader on the stack instead of appending it."]}},"autoload":{"parameters":{"className":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Loads a class from a file using its fully qualified name.","param":["string $className Fully qualified name of a class."]}}}},"PredisException":{"namespace":"Predis","functions":{"__clone":{"parameters":[],"annotations":[]},"__construct":{"parameters":{"message":{"default":"","isNull":false,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"code":{"default":"","isNull":false,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"previous":{"default":"","isNull":false,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":[]},"getMessage":{"parameters":[],"annotations":[]},"getCode":{"parameters":[],"annotations":[]},"getFile":{"parameters":[],"annotations":[]},"getLine":{"parameters":[],"annotations":[]},"getTrace":{"parameters":[],"annotations":[]},"getPrevious":{"parameters":[],"annotations":[]},"getTraceAsString":{"parameters":[],"annotations":[]},"__toString":{"parameters":[],"annotations":[]}}},"Helpers":{"namespace":"Predis","functions":{"onCommunicationException":{"parameters":{"exception":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Offers a generic and reusable method to handle exceptions generated by\na connection object.","deprecated":["Deprecated since v0.8.3 - moved in Predis\\CommunicationException::handle()"],"param":["CommunicationException $exception Exception."]}},"filterArrayArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","deprecated":["Deprecated since v0.8.3 - moved in Predis\\Command\\AbstractCommand::normalizeArguments()"],"param":["array $arguments Arguments for a command."],"return":["array"]}},"filterVariadicValues":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","deprecated":["Deprecated since v0.8.3 - moved in Predis\\Command\\AbstractCommand::normalizeVariadic()"],"param":["array $arguments Arguments for a command."],"return":["array"]}}}},"ClientException":{"namespace":"Predis","functions":{"__clone":{"parameters":[],"annotations":[]},"__construct":{"parameters":{"message":{"default":"","isNull":false,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"code":{"default":"","isNull":false,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"previous":{"default":"","isNull":false,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":[]},"getMessage":{"parameters":[],"annotations":[]},"getCode":{"parameters":[],"annotations":[]},"getFile":{"parameters":[],"annotations":[]},"getLine":{"parameters":[],"annotations":[]},"getTrace":{"parameters":[],"annotations":[]},"getPrevious":{"parameters":[],"annotations":[]},"getTraceAsString":{"parameters":[],"annotations":[]},"__toString":{"parameters":[],"annotations":[]}}},"ResponseObjectInterface":{"namespace":"Predis","functions":[]},"CommunicationException":{"namespace":"Predis","functions":{"__construct":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"code":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"innerException":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["SingleConnectionInterface $connection     Connection that generated the exception.","string                    $message        Error message.","int                       $code           Error code.","\\Exception                $innerException Inner exception for wrapping the original error."]}},"getConnection":{"parameters":[],"annotations":{" short_description":"Gets the connection that generated the exception.","return":["SingleConnectionInterface"]}},"shouldResetConnection":{"parameters":[],"annotations":{" short_description":"Indicates if the receiver should reset the underlying connection.","return":["bool"]}},"handle":{"parameters":{"exception":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Offers a generic and reusable method to handle exceptions generated by\na connection object.","param":["CommunicationException $exception Exception."]}},"__clone":{"parameters":[],"annotations":[]},"getMessage":{"parameters":[],"annotations":[]},"getCode":{"parameters":[],"annotations":[]},"getFile":{"parameters":[],"annotations":[]},"getLine":{"parameters":[],"annotations":[]},"getTrace":{"parameters":[],"annotations":[]},"getPrevious":{"parameters":[],"annotations":[]},"getTraceAsString":{"parameters":[],"annotations":[]},"__toString":{"parameters":[],"annotations":[]}}},"ResponseQueuedTest":{"namespace":"Predis","functions":{"testResponseQueuedClass":{"parameters":[],"annotations":{"group":["disconnected"]}},"testToString":{"parameters":[],"annotations":{"group":["disconnected"]}},"testQueuedProperty":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ClientExceptionTest":{"namespace":"Predis","functions":{"testExceptionMessage":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExceptionClass":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"PredisExceptionTest":{"namespace":"Predis","functions":{"testExceptionMessage":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerExceptionTest":{"namespace":"Predis","functions":{"testExceptionMessage":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExceptionClass":{"parameters":[],"annotations":{"group":["disconnected"]}},"testErrorType":{"parameters":[],"annotations":{"group":["disconnected"]}},"testToResponseError":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ClientTest":{"namespace":"Predis","functions":{"testConstructorWithoutArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testConstructorWithNullArgument":{"parameters":[],"annotations":{"group":["disconnected"]}},"testConstructorWithNullAndNullArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testConstructorWithArrayArgument":{"parameters":[],"annotations":{"group":["disconnected"]}},"testConstructorWithArrayOfArrayArgument":{"parameters":[],"annotations":{"group":["disconnected"]}},"testConstructorWithStringArgument":{"parameters":[],"annotations":{"group":["disconnected"]}},"testConstructorWithArrayOfStringArgument":{"parameters":[],"annotations":{"group":["disconnected"]}},"testConstructorWithArrayOfConnectionsArgument":{"parameters":[],"annotations":{"group":["disconnected"]}},"testConstructorWithConnectionArgument":{"parameters":[],"annotations":{"group":["disconnected"]}},"testConstructorWithClusterArgument":{"parameters":[],"annotations":{"group":["disconnected"]}},"testConstructorWithReplicationArgument":{"parameters":[],"annotations":{"group":["disconnected"]}},"testConstructorWithCallableArgument":{"parameters":[],"annotations":{"group":["disconnected"]}},"testConstructorWithCallableArgumentButInvalidReturnType":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["InvalidArgumentException"],"expectedExceptionMessage":["Callable parameters must return instances of Predis\\Connection\\ConnectionInterface"]}},"testConstructorWithNullAndArrayArgument":{"parameters":[],"annotations":{"group":["disconnected"]}},"testConstructorWithArrayAndOptionReplicationArgument":{"parameters":[],"annotations":{"group":["disconnected"]}},"testConnectAndDisconnect":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIsConnectedChecksConnectionState":{"parameters":[],"annotations":{"group":["disconnected"]}},"testQuitIsAliasForDisconnect":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCreatesNewCommandUsingSpecifiedProfile":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExecuteCommandReturnsParsedReplies":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExecuteCommandThrowsExceptionOnRedisError":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"testExecuteCommandReturnsErrorResponseOnRedisError":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCallingRedisCommandExecutesInstanceOfCommand":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCallingRedisCommandThrowsExceptionOnServerError":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["Operation against a key holding the wrong kind of value"]}},"testCallingRedisCommandReturnsErrorResponseOnRedisError":{"parameters":[],"annotations":{"group":["disconnected"]}},"testThrowsExceptionOnNonRegisteredRedisCommand":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\ClientException"],"expectedExceptionMessage":["'invalidcommand' is not a registered Redis command"]}},"testGetConnectionFromAggregatedConnectionWithAlias":{"parameters":[],"annotations":{"group":["disconnected"]}},"testGetConnectionByIdWorksOnlyWithAggregatedConnections":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\NotSupportedException"],"expectedExceptionMessage":["Retrieving connections by ID is supported only when using aggregated connections"]}},"testCreateClientWithConnectionFromAggregatedConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testGetClientForReturnsInstanceOfSubclass":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPipelineWithoutArgumentsReturnsPipelineContext":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPipelineWithArrayReturnsPipelineContextWithOptions":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPipelineWithCallableExecutesPipeline":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPipelineWithArrayAndCallableExecutesPipelineWithOptions":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPubSubLoopWithoutArgumentsReturnsPubSubContext":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPubSubLoopWithArrayReturnsPubSubContextWithOptions":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPubSubLoopWithArrayAndCallableExecutesPubSub":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPubSubIsAliasForPubSubLoop":{"parameters":[],"annotations":{"group":["disconnected"]}},"testMultiExecWithoutArgumentsReturnsMultiExecContext":{"parameters":[],"annotations":{"group":["disconnected"]}},"testMethodTransactionIsAliasForMethodMultiExec":{"parameters":[],"annotations":{"group":["disconnected"]}},"testMultiExecWithArrayReturnsMultiExecContextWithOptions":{"parameters":[],"annotations":{"group":["disconnected"]}},"testMultiExecWithArrayAndCallableExecutesMultiExec":{"parameters":[],"annotations":{"group":["disconnected"]}},"testMonitorReturnsMonitorContext":{"parameters":[],"annotations":{"group":["disconnected"]}},"testClientResendScriptedCommandUsingEvalOnNoScriptErrors":{"parameters":[],"annotations":{"group":["disconnected"]}},"getParametersString":{"parameters":{"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns an URI string representation of the specified connection parameters.","param":["Array  $parameters Array of connection parameters."],"return":["String URI string."]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"HelpersTest":{"namespace":"Predis","functions":{"testOnCommunicationException":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterArrayArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterVariadicValues":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ResponseErrorTest":{"namespace":"Predis","functions":{"testResponseErrorClass":{"parameters":[],"annotations":{"group":["disconnected"]}},"testErrorMessage":{"parameters":[],"annotations":{"group":["disconnected"]}},"testErrorType":{"parameters":[],"annotations":{"group":["disconnected"]}},"testToString":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"CommunicationExceptionTest":{"namespace":"Predis","functions":{"testExceptionMessage":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExceptionConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testShouldResetConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCommunicationExceptionHandling":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\CommunicationException"],"expectedExceptionMessage":["Communication error"]}},"getMockedConnectionBase":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a mocked connection instance.","param":["mixed                     $parameters Connection parameters."],"return":["SingleConnectionInterface"]}},"getException":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"code":{"default":0,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"inner":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a connection exception instance.","param":["Connection\\SingleConnectionInterface $connection Connection instance.","string                               $message    Exception message.","int                                  $code       Exception code.","\\Exception                           $inner      Inner exception."],"return":["\\Exception"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"CustomOption":{"namespace":"Predis\\Option","functions":{"__construct":{"parameters":{"options":{"default":[],"isNull":false,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{"param":["array $options List of options"]}},"ensureCallable":{"parameters":{"options":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"key":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks if the specified value in the options array is a callable object.","param":["array  $options Array of options","string $key     Target option."]}},"filter":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Filters (and optionally converts) the passed value.","param":["ClientOptionsInterface $options Options container.","mixed                  $value   Input value."],"return":["mixed"]}},"getDefault":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a default value for the option.","param":["ClientOptionsInterface $options Options container."],"return":["mixed"]}},"__invoke":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Filters a value and, if no value is specified, returns the default one\ndefined by the option.","param":["ClientOptionsInterface $options Options container.","mixed                  $value   Input value."],"return":["mixed"]}}}},"ClientOptionsInterface":{"namespace":"Predis\\Option","functions":[]},"ClientCluster":{"namespace":"Predis\\Option","functions":{"checkInstance":{"parameters":{"cluster":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks if the specified value is a valid instance of ClusterConnectionInterface.","param":["ClusterConnectionInterface $cluster Instance of a connection cluster."],"return":["ClusterConnectionInterface"]}},"filter":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Filters (and optionally converts) the passed value.","param":["ClientOptionsInterface $options Options container.","mixed                  $value   Input value."],"return":["mixed"]}},"getInitializer":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"fqnOrType":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns an initializer for the specified FQN or type.","param":["string                 $fqnOrType Type of cluster or FQN of a class implementing ClusterConnectionInterface.","ClientOptionsInterface $options   Instance of the client options."],"return":["\\Closure"]}},"getDefault":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a default value for the option.","param":["ClientOptionsInterface $options Options container."],"return":["mixed"]}},"__invoke":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Filters a value and, if no value is specified, returns the default one\ndefined by the option.","param":["ClientOptionsInterface $options Options container.","mixed                  $value   Input value."],"return":["mixed"]}}}},"ClientPrefix":{"namespace":"Predis\\Option","functions":{"filter":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Filters (and optionally converts) the passed value.","param":["ClientOptionsInterface $options Options container.","mixed                  $value   Input value."],"return":["mixed"]}},"getDefault":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a default value for the option.","param":["ClientOptionsInterface $options Options container."],"return":["mixed"]}},"__invoke":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Filters a value and, if no value is specified, returns the default one\ndefined by the option.","param":["ClientOptionsInterface $options Options container.","mixed                  $value   Input value."],"return":["mixed"]}}}},"OptionInterface":{"namespace":"Predis\\Option","functions":{"filter":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Filters (and optionally converts) the passed value.","param":["ClientOptionsInterface $options Options container.","mixed                  $value   Input value."],"return":["mixed"]}},"getDefault":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a default value for the option.","param":["ClientOptionsInterface $options Options container."],"return":["mixed"]}},"__invoke":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Filters a value and, if no value is specified, returns the default one\ndefined by the option.","param":["ClientOptionsInterface $options Options container.","mixed                  $value   Input value."],"return":["mixed"]}}}},"ClientOptions":{"namespace":"Predis\\Option","functions":{"__construct":{"parameters":{"options":{"default":[],"isNull":false,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{"param":["array $options Array of client options."]}},"getDefaultOptions":{"parameters":[],"annotations":{" short_description":"Ensures that the default options are initialized.","return":["array"]}},"initialize":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Initializes client options handlers.","param":["array $options List of client options values."],"return":["array"]}},"__isset":{"parameters":{"option":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks if the specified option is set.","param":["string $option Name of the option."],"return":["bool"]}},"__get":{"parameters":{"option":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the value of the specified option.","param":["string $option Name of the option."],"return":["mixed"]}},"getDefault":{"parameters":{"option":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the default value for the specified option.","param":["string|OptionInterface $option Name or instance of the option."],"return":["mixed"]}}}},"ClientConnectionFactory":{"namespace":"Predis\\Option","functions":{"filter":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Filters (and optionally converts) the passed value.","param":["ClientOptionsInterface $options Options container.","mixed                  $value   Input value."],"return":["mixed"]}},"getDefault":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a default value for the option.","param":["ClientOptionsInterface $options Options container."],"return":["mixed"]}},"__invoke":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Filters a value and, if no value is specified, returns the default one\ndefined by the option.","param":["ClientOptionsInterface $options Options container.","mixed                  $value   Input value."],"return":["mixed"]}}}},"ClientProfile":{"namespace":"Predis\\Option","functions":{"filter":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Filters (and optionally converts) the passed value.","param":["ClientOptionsInterface $options Options container.","mixed                  $value   Input value."],"return":["mixed"]}},"getDefault":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a default value for the option.","param":["ClientOptionsInterface $options Options container."],"return":["mixed"]}},"__invoke":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Filters a value and, if no value is specified, returns the default one\ndefined by the option.","param":["ClientOptionsInterface $options Options container.","mixed                  $value   Input value."],"return":["mixed"]}}}},"AbstractOption":{"namespace":"Predis\\Option","functions":{"filter":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Filters (and optionally converts) the passed value.","param":["ClientOptionsInterface $options Options container.","mixed                  $value   Input value."],"return":["mixed"]}},"getDefault":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a default value for the option.","param":["ClientOptionsInterface $options Options container."],"return":["mixed"]}},"__invoke":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Filters a value and, if no value is specified, returns the default one\ndefined by the option.","param":["ClientOptionsInterface $options Options container.","mixed                  $value   Input value."],"return":["mixed"]}}}},"ClientExceptions":{"namespace":"Predis\\Option","functions":{"filter":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Filters (and optionally converts) the passed value.","param":["ClientOptionsInterface $options Options container.","mixed                  $value   Input value."],"return":["mixed"]}},"getDefault":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a default value for the option.","param":["ClientOptionsInterface $options Options container."],"return":["mixed"]}},"__invoke":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Filters a value and, if no value is specified, returns the default one\ndefined by the option.","param":["ClientOptionsInterface $options Options container.","mixed                  $value   Input value."],"return":["mixed"]}}}},"ClientReplication":{"namespace":"Predis\\Option","functions":{"checkInstance":{"parameters":{"connection":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks if the specified value is a valid instance of ReplicationConnectionInterface.","param":["ReplicationConnectionInterface $connection Instance of a replication connection."],"return":["ReplicationConnectionInterface"]}},"filter":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Filters (and optionally converts) the passed value.","param":["ClientOptionsInterface $options Options container.","mixed                  $value   Input value."],"return":["mixed"]}},"getDefault":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a default value for the option.","param":["ClientOptionsInterface $options Options container."],"return":["mixed"]}},"__invoke":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Filters a value and, if no value is specified, returns the default one\ndefined by the option.","param":["ClientOptionsInterface $options Options container.","mixed                  $value   Input value."],"return":["mixed"]}}}},"ClientProfileTest":{"namespace":"Predis\\Option","functions":{"testValidationReturnsServerProfileWithStringValue":{"parameters":[],"annotations":{"group":["disconnected"]}},"testValidationAcceptsProfileInstancesAsValue":{"parameters":[],"annotations":{"group":["disconnected"]}},"testValidationAcceptsCallableObjectAsInitializers":{"parameters":[],"annotations":{"group":["disconnected"]}},"testValidationThrowsExceptionOnWrongInvalidArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testDefaultReturnsDefaultServerProfile":{"parameters":[],"annotations":{"group":["disconnected"]}},"testInvokeReturnsSpecifiedServerProfileOrDefault":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterSetsPrefixProcessorFromClientOptions":{"parameters":[],"annotations":{"group":["disconnected"],"todo":["Can't we when trap __isset when mocking an interface? Doesn't seem to work here."]}},"testDefaultSetsPrefixProcessorFromClientOptions":{"parameters":[],"annotations":{"group":["disconnected"],"todo":["Can't we when trap __isset when mocking an interface? Doesn't seem to work here."]}},"testValidationDoesNotSetPrefixProcessorWhenValueIsProfileInstance":{"parameters":[],"annotations":{"group":["disconnected"]}},"testValidationThrowsExceptionOnInvalidObjectReturnedByCallback":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["InvalidArgumentException"],"expectedExceptionMessage":["Invalid value for the profile option"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ClientClusterTest":{"namespace":"Predis\\Option","functions":{"testValidationAcceptsFQNStringAsInitializer":{"parameters":[],"annotations":{"group":["disconnected"]}},"testValidationRecognizesCertainPredefinedShortNames":{"parameters":[],"annotations":{"group":["disconnected"]}},"testValidationAcceptsCallableObjectAsInitializers":{"parameters":[],"annotations":{"group":["disconnected"]}},"testValidationThrowsExceptionOnInvalidClassTypes":{"parameters":[],"annotations":{"group":["disconnected"]}},"testValidationThrowsExceptionOnInvalidShortName":{"parameters":[],"annotations":{"group":["disconnected"]}},"testValidationThrowsExceptionOnInvalidObjectReturnedByCallback":{"parameters":[],"annotations":{"group":["disconnected"]}},"testValidationThrowsExceptionOnInvalidArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ClientOptionsTest":{"namespace":"Predis\\Option","functions":{"testConstructorWithoutArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testConstructorWithArrayArgument":{"parameters":[],"annotations":{"group":["disconnected"]}},"testHandlesCustomOptionsWithoutHandlers":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIsSetReturnsIfOptionHasBeenSetByUser":{"parameters":[],"annotations":{"group":["disconnected"]}},"testGetDefaultUsingOptionName":{"parameters":[],"annotations":{"group":["disconnected"]}},"testGetDefaultUsingUnhandledOptionName":{"parameters":[],"annotations":{"group":["disconnected"]}},"testGetDefaultUsingOptionInstance":{"parameters":[],"annotations":{"group":["disconnected"]}},"testGetDefaultUsingUnhandledOptionInstance":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"AbstractOptionTest":{"namespace":"Predis\\Option","functions":{"testValidationReturnsTheSameObject":{"parameters":[],"annotations":{"group":["disconnected"]}},"testDefaultReturnsNull":{"parameters":[],"annotations":{"group":["disconnected"]}},"testInvokePerformsValidationWhenValueIsSet":{"parameters":[],"annotations":{"group":["disconnected"]}},"testInvokeReturnsDefaultWhenValueIsNotSet":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ClientReplicationTest":{"namespace":"Predis\\Option","functions":{"testValidationAcceptsFQNStringAsInitializer":{"parameters":[],"annotations":{"group":["disconnected"]}},"testValidationAcceptsBooleanValue":{"parameters":[],"annotations":{"group":["disconnected"]}},"testValidationAcceptsCallableObjectAsInitializers":{"parameters":[],"annotations":{"group":["disconnected"]}},"testValidationThrowsExceptionOnInvalidObjectReturnedByCallback":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["InvalidArgumentException"]}},"testValidationThrowsExceptionOnInvalidClassTypes":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["InvalidArgumentException"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ClientExceptionsTest":{"namespace":"Predis\\Option","functions":{"testDefaultReturnsTrue":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ClientConnectionFactoryTest":{"namespace":"Predis\\Option","functions":{"testValidationReturnsDefaultFactoryWithSchemeDefinitionsArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testValidationAcceptsFactoryInstancesAsValue":{"parameters":[],"annotations":{"group":["disconnected"]}},"testValidationAcceptsCallableObjectAsInitializers":{"parameters":[],"annotations":{"group":["disconnected"]}},"testValidationAcceptsStringAsValue":{"parameters":[],"annotations":{"group":["disconnected"]}},"testValidationThrowsExceptionOnWrongInvalidArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testInvokeReturnsSpecifiedFactoryOrDefault":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ClientPrefixTest":{"namespace":"Predis\\Option","functions":{"testValidationReturnsCommandProcessor":{"parameters":[],"annotations":{"group":["disconnected"]}},"testDefaultReturnsNull":{"parameters":[],"annotations":{"group":["disconnected"]}},"testInvokeReturnsCommandProcessorOrNull":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"CustomOptionTest":{"namespace":"Predis\\Option","functions":{"testConstructorAcceptsOnlyCallablesForFilter":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["InvalidArgumentException"]}},"testConstructorAcceptsOnlyCallablesForDefault":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["InvalidArgumentException"]}},"testConstructorIgnoresUnrecognizedParameters":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFilterWithoutCallbackReturnsValue":{"parameters":[],"annotations":{"group":["disconnected"]}},"testDefaultWithoutCallbackReturnsNull":{"parameters":[],"annotations":{"group":["disconnected"]}},"testInvokeCallsFilterCallback":{"parameters":[],"annotations":{"group":["disconnected"]}},"testInvokeCallsDefaultCallback":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ResponseBulkHandler":{"namespace":"Predis\\Protocol\\Text","functions":{"handle":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"lengthString":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Handles a bulk reply returned by Redis.","param":["ComposableConnectionInterface $connection   Connection to Redis.","string                        $lengthString Bytes size of the bulk reply."],"return":["string"]}}}},"TextProtocol":{"namespace":"Predis\\Protocol\\Text","functions":{"__construct":{"parameters":[],"annotations":[]},"write":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Writes a Redis command on the specified connection.","param":["ComposableConnectionInterface $connection Connection to Redis.","CommandInterface              $command    Redis command."]}},"read":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Reads replies from a connection to Redis and deserializes them.","param":["ComposableConnectionInterface $connection Connection to Redis."],"return":["mixed"]}},"setOption":{"parameters":{"option":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sets the options for the protocol processor.","param":["string $option Name of the option.","mixed  $value  Value of the option."]}}}},"ResponseErrorHandler":{"namespace":"Predis\\Protocol\\Text","functions":{"handle":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"errorMessage":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a type of reply returned by Redis and reads more data from the\nconnection if needed.","param":["ComposableConnectionInterface $connection Connection to Redis.","string                        $payload    Initial payload of the reply."],"return":["mixed"]}}}},"ResponseMultiBulkHandler":{"namespace":"Predis\\Protocol\\Text","functions":{"handle":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"lengthString":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Handles a multi-bulk reply returned by Redis.","param":["ComposableConnectionInterface $connection   Connection to Redis.","string                        $lengthString Number of items in the multi-bulk reply."],"return":["array"]}}}},"TextResponseReader":{"namespace":"Predis\\Protocol\\Text","functions":{"__construct":{"parameters":[],"annotations":[]},"getDefaultHandlers":{"parameters":[],"annotations":{" short_description":"Returns the default set of response handlers for all the type of replies\nthat can be returned by Redis."}},"setHandler":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"handler":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sets a response handler for a certain prefix that identifies a type of\nreply that can be returned by Redis.","param":["string                   $prefix  Identifier for a type of reply.","ResponseHandlerInterface $handler Response handler for the reply."]}},"getHandler":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the response handler associated to a certain type of reply that\ncan be returned by Redis.","param":["string                   $prefix Identifier for a type of reply."],"return":["ResponseHandlerInterface"]}},"read":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Reads replies from a connection to Redis and deserializes them.","param":["ComposableConnectionInterface $connection Connection to Redis."],"return":["mixed"]}},"protocolError":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper method used to handle a protocol error generated while reading a\nreply from a connection to Redis.","param":["ComposableConnectionInterface $connection Connection to Redis that generated the error.","string                        $message    Error message."]}}}},"ResponseMultiBulkStreamHandler":{"namespace":"Predis\\Protocol\\Text","functions":{"handle":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"lengthString":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Handles a multi-bulk reply returned by Redis in a streamable fashion.","param":["ComposableConnectionInterface $connection   Connection to Redis.","string                        $lengthString Number of items in the multi-bulk reply."],"return":["MultiBulkResponseSimple"]}}}},"ResponseStatusHandler":{"namespace":"Predis\\Protocol\\Text","functions":{"handle":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"status":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a type of reply returned by Redis and reads more data from the\nconnection if needed.","param":["ComposableConnectionInterface $connection Connection to Redis.","string                        $payload    Initial payload of the reply."],"return":["mixed"]}}}},"ComposableTextProtocol":{"namespace":"Predis\\Protocol\\Text","functions":{"__construct":{"parameters":{"options":{"default":[],"isNull":false,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{"param":["array $options Set of options used to initialize the protocol processor."]}},"initializeOptions":{"parameters":{"options":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Initializes the protocol processor using a set of options.","param":["array $options Set of options."]}},"setOption":{"parameters":{"option":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sets the options for the protocol processor.","param":["string $option Name of the option.","mixed  $value  Value of the option."]}},"serialize":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":""}},"write":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Writes a Redis command on the specified connection.","param":["ComposableConnectionInterface $connection Connection to Redis.","CommandInterface              $command    Redis command."]}},"read":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Reads replies from a connection to Redis and deserializes them.","param":["ComposableConnectionInterface $connection Connection to Redis."],"return":["mixed"]}},"setSerializer":{"parameters":{"serializer":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sets the command serializer to be used by the protocol processor.","param":["CommandSerializerInterface $serializer Command serializer."]}},"getSerializer":{"parameters":[],"annotations":{" short_description":"Returns the command serializer used by the protocol processor.","return":["CommandSerializerInterface"]}},"setReader":{"parameters":{"reader":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sets the response reader to be used by the protocol processor.","param":["ResponseReaderInterface $reader Response reader."]}},"getReader":{"parameters":[],"annotations":{" short_description":"Returns the response reader used by the protocol processor.","return":["ResponseReaderInterface"]}}}},"ResponseIntegerHandler":{"namespace":"Predis\\Protocol\\Text","functions":{"handle":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"number":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Handles an integer reply returned by Redis.","param":["ComposableConnectionInterface $connection Connection to Redis.","string                        $number     String representation of an integer."],"return":["int"]}}}},"TextCommandSerializer":{"namespace":"Predis\\Protocol\\Text","functions":{"serialize":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Serializes a Redis command.","param":["CommandInterface $command Redis command."],"return":["string"]}}}},"ComposableTextProtocolTest":{"namespace":"Predis\\Protocol\\Text","functions":{"testCustomSerializer":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCustomReader":{"parameters":[],"annotations":{"group":["disconnected"]}},"testConnectionWrite":{"parameters":[],"annotations":{"group":["disconnected"]}},"testConnectionRead":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSetMultibulkOption":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSetInvalidOption":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["InvalidArgumentException"],"expectedExceptionMessage":["The option unknown_option is not supported by the current protocol"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ResponseMultiBulkHandlerTest":{"namespace":"Predis\\Protocol\\Text","functions":{"testMultiBulk":{"parameters":[],"annotations":{"group":["disconnected"]}},"testNull":{"parameters":[],"annotations":{"group":["disconnected"]}},"testInvalid":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\Protocol\\ProtocolException"],"expectedExceptionMessage":["Cannot parse 'invalid' as multi-bulk length"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"TextCommandSerializerTest":{"namespace":"Predis\\Protocol\\Text","functions":{"testSerializerIdWithNoArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSerializerIdWithArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ResponseIntegerHandlerTest":{"namespace":"Predis\\Protocol\\Text","functions":{"testInteger":{"parameters":[],"annotations":{"group":["disconnected"]}},"testNull":{"parameters":[],"annotations":{"group":["disconnected"]}},"testInvalid":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\Protocol\\ProtocolException"],"expectedExceptionMessage":["Cannot parse 'invalid' as numeric response"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"TextResponseReaderTest":{"namespace":"Predis\\Protocol\\Text","functions":{"testDefaultHandlers":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReplaceHandler":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReadResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testEmptyResponseHeader":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\Protocol\\ProtocolException"],"expectedExceptionMessage":["Unexpected empty header"]}},"testUnknownResponsePrefix":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\Protocol\\ProtocolException"],"expectedExceptionMessage":["Unknown prefix: '!'"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ResponseMultiBulkStreamHandlerTest":{"namespace":"Predis\\Protocol\\Text","functions":{"testOk":{"parameters":[],"annotations":{"group":["disconnected"]}},"testInvalid":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\Protocol\\ProtocolException"],"expectedExceptionMessage":["Cannot parse 'invalid' as multi-bulk length"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ResponseErrorHandlerTest":{"namespace":"Predis\\Protocol\\Text","functions":{"testOk":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ResponseStatusHandlerTest":{"namespace":"Predis\\Protocol\\Text","functions":{"testOk":{"parameters":[],"annotations":{"group":["disconnected"]}},"testQueued":{"parameters":[],"annotations":{"group":["disconnected"]}},"testPlainString":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"TextProtocolTest":{"namespace":"Predis\\Protocol\\Text","functions":{"testConnectionWrite":{"parameters":[],"annotations":{"group":["disconnected"]}},"testConnectionRead":{"parameters":[],"annotations":{"todo":["Improve test coverage"],"group":["disconnected"]}},"testIterableMultibulkSupport":{"parameters":[],"annotations":{"group":["disconnected"]}},"testUnknownResponsePrefix":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\Protocol\\ProtocolException"],"expectedExceptionMessage":["Unknown prefix: '!'"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ResponseBulkHandlerTest":{"namespace":"Predis\\Protocol\\Text","functions":{"testZeroLengthBulk":{"parameters":[],"annotations":{"group":["disconnected"]}},"testBulk":{"parameters":[],"annotations":{"group":["disconnected"]}},"testNull":{"parameters":[],"annotations":{"group":["disconnected"]}},"testInvalidLength":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\Protocol\\ProtocolException"],"expectedExceptionMessage":["Cannot parse 'invalid' as bulk length"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ComposableProtocolInterface":{"namespace":"Predis\\Protocol","functions":{"setSerializer":{"parameters":{"serializer":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sets the command serializer to be used by the protocol processor.","param":["CommandSerializerInterface $serializer Command serializer."]}},"getSerializer":{"parameters":[],"annotations":{" short_description":"Returns the command serializer used by the protocol processor.","return":["CommandSerializerInterface"]}},"setReader":{"parameters":{"reader":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sets the response reader to be used by the protocol processor.","param":["ResponseReaderInterface $reader Response reader."]}},"getReader":{"parameters":[],"annotations":{" short_description":"Returns the response reader used by the protocol processor.","return":["ResponseReaderInterface"]}},"write":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Writes a Redis command on the specified connection.","param":["ComposableConnectionInterface $connection Connection to Redis.","CommandInterface              $command    Redis command."]}},"setOption":{"parameters":{"option":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sets the options for the protocol processor.","param":["string $option Name of the option.","mixed  $value  Value of the option."]}},"read":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Reads replies from a connection to Redis and deserializes them.","param":["ComposableConnectionInterface $connection Connection to Redis."],"return":["mixed"]}}}},"ResponseHandlerInterface":{"namespace":"Predis\\Protocol","functions":{"handle":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"payload":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a type of reply returned by Redis and reads more data from the\nconnection if needed.","param":["ComposableConnectionInterface $connection Connection to Redis.","string                        $payload    Initial payload of the reply."],"return":["mixed"]}}}},"ResponseReaderInterface":{"namespace":"Predis\\Protocol","functions":{"read":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Reads replies from a connection to Redis and deserializes them.","param":["ComposableConnectionInterface $connection Connection to Redis."],"return":["mixed"]}}}},"ProtocolInterface":{"namespace":"Predis\\Protocol","functions":{"write":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Writes a Redis command on the specified connection.","param":["ComposableConnectionInterface $connection Connection to Redis.","CommandInterface              $command    Redis command."]}},"setOption":{"parameters":{"option":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sets the options for the protocol processor.","param":["string $option Name of the option.","mixed  $value  Value of the option."]}},"read":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Reads replies from a connection to Redis and deserializes them.","param":["ComposableConnectionInterface $connection Connection to Redis."],"return":["mixed"]}}}},"ProtocolException":{"namespace":"Predis\\Protocol","functions":{"__construct":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"code":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"innerException":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["SingleConnectionInterface $connection     Connection that generated the exception.","string                    $message        Error message.","int                       $code           Error code.","\\Exception                $innerException Inner exception for wrapping the original error."]}},"getConnection":{"parameters":[],"annotations":{" short_description":"Gets the connection that generated the exception.","return":["SingleConnectionInterface"]}},"shouldResetConnection":{"parameters":[],"annotations":{" short_description":"Indicates if the receiver should reset the underlying connection.","return":["bool"]}},"handle":{"parameters":{"exception":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Offers a generic and reusable method to handle exceptions generated by\na connection object.","param":["CommunicationException $exception Exception."]}},"__clone":{"parameters":[],"annotations":[]},"getMessage":{"parameters":[],"annotations":[]},"getCode":{"parameters":[],"annotations":[]},"getFile":{"parameters":[],"annotations":[]},"getLine":{"parameters":[],"annotations":[]},"getTrace":{"parameters":[],"annotations":[]},"getPrevious":{"parameters":[],"annotations":[]},"getTraceAsString":{"parameters":[],"annotations":[]},"__toString":{"parameters":[],"annotations":[]}}},"CommandSerializerInterface":{"namespace":"Predis\\Protocol","functions":{"serialize":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Serializes a Redis command.","param":["CommandInterface $command Redis command."],"return":["string"]}}}},"ProtocolExceptionTest":{"namespace":"Predis\\Protocol","functions":{"getException":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"code":{"default":0,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"inner":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a connection exception instance.","param":["Connection\\SingleConnectionInterface $connection Connection instance.","string                               $message    Exception message.","int                                  $code       Exception code.","\\Exception                           $inner      Inner exception."],"return":["\\Exception"]}},"testExceptionMessage":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExceptionConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testShouldResetConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCommunicationExceptionHandling":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\CommunicationException"],"expectedExceptionMessage":["Communication error"]}},"getMockedConnectionBase":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a mocked connection instance.","param":["mixed                     $parameters Connection parameters."],"return":["SingleConnectionInterface"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerVersion28":{"namespace":"Predis\\Profile","functions":{"getVersion":{"parameters":[],"annotations":{" short_description":"Gets a profile version corresponding to a Redis version.","return":["string"]}},"getSupportedCommands":{"parameters":[],"annotations":{" short_description":"Returns a map of all the commands supported by the profile and their\nactual PHP classes.","return":["array"]}},"__construct":{"parameters":[],"annotations":[]},"getDefault":{"parameters":[],"annotations":{" short_description":"Returns the default server profile.","return":["ServerProfileInterface"]}},"getDevelopment":{"parameters":[],"annotations":{" short_description":"Returns the development server profile.","return":["ServerProfileInterface"]}},"getDefaultProfiles":{"parameters":[],"annotations":{" short_description":"Returns a map of all the server profiles supported by default and their\nactual PHP classes.","return":["array"]}},"define":{"parameters":{"alias":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"profileClass":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Registers a new server profile.","param":["string $alias        Profile version or alias.","string $profileClass FQN of a class implementing Predis\\Profile\\ServerProfileInterface."]}},"get":{"parameters":{"version":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the specified server profile.","param":["string                 $version Profile version or alias."],"return":["ServerProfileInterface"]}},"supportsCommands":{"parameters":{"commands":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Checks if the profile supports the specified list of commands.","param":["array  $commands List of command IDs."],"return":["string"]}},"supportsCommand":{"parameters":{"command":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks if the profile supports the specified command.","param":["string $command Command ID."],"return":["bool"]}},"getCommandClass":{"parameters":{"command":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the FQN of the class that represent the specified command ID\nregistered in the current server profile.","param":["string $command Command ID."],"return":["string"]}},"createCommand":{"parameters":{"method":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Creates a new command instance.","param":["string           $method    Command ID.","array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"defineCommand":{"parameters":{"alias":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"command":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Defines a new commands in the server profile.","param":["string $alias   Command ID.","string $command FQN of a class implementing Predis\\Command\\CommandInterface."]}},"setProcessor":{"parameters":{"processor":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Associates a command processor.","param":["CommandProcessorInterface $processor The command processor."]}},"getProcessor":{"parameters":[],"annotations":{" short_description":"Returns the associated command processor.","return":["CommandProcessorInterface"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns the version of server profile as its string representation.","return":["string"]}}}},"ServerVersion12":{"namespace":"Predis\\Profile","functions":{"getVersion":{"parameters":[],"annotations":{" short_description":"Gets a profile version corresponding to a Redis version.","return":["string"]}},"getSupportedCommands":{"parameters":[],"annotations":{" short_description":"Returns a map of all the commands supported by the profile and their\nactual PHP classes.","return":["array"]}},"__construct":{"parameters":[],"annotations":[]},"getDefault":{"parameters":[],"annotations":{" short_description":"Returns the default server profile.","return":["ServerProfileInterface"]}},"getDevelopment":{"parameters":[],"annotations":{" short_description":"Returns the development server profile.","return":["ServerProfileInterface"]}},"getDefaultProfiles":{"parameters":[],"annotations":{" short_description":"Returns a map of all the server profiles supported by default and their\nactual PHP classes.","return":["array"]}},"define":{"parameters":{"alias":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"profileClass":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Registers a new server profile.","param":["string $alias        Profile version or alias.","string $profileClass FQN of a class implementing Predis\\Profile\\ServerProfileInterface."]}},"get":{"parameters":{"version":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the specified server profile.","param":["string                 $version Profile version or alias."],"return":["ServerProfileInterface"]}},"supportsCommands":{"parameters":{"commands":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Checks if the profile supports the specified list of commands.","param":["array  $commands List of command IDs."],"return":["string"]}},"supportsCommand":{"parameters":{"command":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks if the profile supports the specified command.","param":["string $command Command ID."],"return":["bool"]}},"getCommandClass":{"parameters":{"command":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the FQN of the class that represent the specified command ID\nregistered in the current server profile.","param":["string $command Command ID."],"return":["string"]}},"createCommand":{"parameters":{"method":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Creates a new command instance.","param":["string           $method    Command ID.","array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"defineCommand":{"parameters":{"alias":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"command":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Defines a new commands in the server profile.","param":["string $alias   Command ID.","string $command FQN of a class implementing Predis\\Command\\CommandInterface."]}},"setProcessor":{"parameters":{"processor":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Associates a command processor.","param":["CommandProcessorInterface $processor The command processor."]}},"getProcessor":{"parameters":[],"annotations":{" short_description":"Returns the associated command processor.","return":["CommandProcessorInterface"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns the version of server profile as its string representation.","return":["string"]}}}},"ServerVersion22":{"namespace":"Predis\\Profile","functions":{"getVersion":{"parameters":[],"annotations":{" short_description":"Gets a profile version corresponding to a Redis version.","return":["string"]}},"getSupportedCommands":{"parameters":[],"annotations":{" short_description":"Returns a map of all the commands supported by the profile and their\nactual PHP classes.","return":["array"]}},"__construct":{"parameters":[],"annotations":[]},"getDefault":{"parameters":[],"annotations":{" short_description":"Returns the default server profile.","return":["ServerProfileInterface"]}},"getDevelopment":{"parameters":[],"annotations":{" short_description":"Returns the development server profile.","return":["ServerProfileInterface"]}},"getDefaultProfiles":{"parameters":[],"annotations":{" short_description":"Returns a map of all the server profiles supported by default and their\nactual PHP classes.","return":["array"]}},"define":{"parameters":{"alias":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"profileClass":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Registers a new server profile.","param":["string $alias        Profile version or alias.","string $profileClass FQN of a class implementing Predis\\Profile\\ServerProfileInterface."]}},"get":{"parameters":{"version":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the specified server profile.","param":["string                 $version Profile version or alias."],"return":["ServerProfileInterface"]}},"supportsCommands":{"parameters":{"commands":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Checks if the profile supports the specified list of commands.","param":["array  $commands List of command IDs."],"return":["string"]}},"supportsCommand":{"parameters":{"command":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks if the profile supports the specified command.","param":["string $command Command ID."],"return":["bool"]}},"getCommandClass":{"parameters":{"command":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the FQN of the class that represent the specified command ID\nregistered in the current server profile.","param":["string $command Command ID."],"return":["string"]}},"createCommand":{"parameters":{"method":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Creates a new command instance.","param":["string           $method    Command ID.","array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"defineCommand":{"parameters":{"alias":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"command":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Defines a new commands in the server profile.","param":["string $alias   Command ID.","string $command FQN of a class implementing Predis\\Command\\CommandInterface."]}},"setProcessor":{"parameters":{"processor":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Associates a command processor.","param":["CommandProcessorInterface $processor The command processor."]}},"getProcessor":{"parameters":[],"annotations":{" short_description":"Returns the associated command processor.","return":["CommandProcessorInterface"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns the version of server profile as its string representation.","return":["string"]}}}},"ServerProfileInterface":{"namespace":"Predis\\Profile","functions":{"getVersion":{"parameters":[],"annotations":{" short_description":"Gets a profile version corresponding to a Redis version.","return":["string"]}},"supportsCommand":{"parameters":{"command":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks if the profile supports the specified command.","param":["string $command Command ID."],"return":["bool"]}},"supportsCommands":{"parameters":{"commands":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Checks if the profile supports the specified list of commands.","param":["array  $commands List of command IDs."],"return":["string"]}},"createCommand":{"parameters":{"method":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Creates a new command instance.","param":["string           $method    Command ID.","array            $arguments Arguments for the command."],"return":["CommandInterface"]}}}},"ServerVersion20":{"namespace":"Predis\\Profile","functions":{"getVersion":{"parameters":[],"annotations":{" short_description":"Gets a profile version corresponding to a Redis version.","return":["string"]}},"getSupportedCommands":{"parameters":[],"annotations":{" short_description":"Returns a map of all the commands supported by the profile and their\nactual PHP classes.","return":["array"]}},"__construct":{"parameters":[],"annotations":[]},"getDefault":{"parameters":[],"annotations":{" short_description":"Returns the default server profile.","return":["ServerProfileInterface"]}},"getDevelopment":{"parameters":[],"annotations":{" short_description":"Returns the development server profile.","return":["ServerProfileInterface"]}},"getDefaultProfiles":{"parameters":[],"annotations":{" short_description":"Returns a map of all the server profiles supported by default and their\nactual PHP classes.","return":["array"]}},"define":{"parameters":{"alias":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"profileClass":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Registers a new server profile.","param":["string $alias        Profile version or alias.","string $profileClass FQN of a class implementing Predis\\Profile\\ServerProfileInterface."]}},"get":{"parameters":{"version":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the specified server profile.","param":["string                 $version Profile version or alias."],"return":["ServerProfileInterface"]}},"supportsCommands":{"parameters":{"commands":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Checks if the profile supports the specified list of commands.","param":["array  $commands List of command IDs."],"return":["string"]}},"supportsCommand":{"parameters":{"command":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks if the profile supports the specified command.","param":["string $command Command ID."],"return":["bool"]}},"getCommandClass":{"parameters":{"command":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the FQN of the class that represent the specified command ID\nregistered in the current server profile.","param":["string $command Command ID."],"return":["string"]}},"createCommand":{"parameters":{"method":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Creates a new command instance.","param":["string           $method    Command ID.","array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"defineCommand":{"parameters":{"alias":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"command":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Defines a new commands in the server profile.","param":["string $alias   Command ID.","string $command FQN of a class implementing Predis\\Command\\CommandInterface."]}},"setProcessor":{"parameters":{"processor":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Associates a command processor.","param":["CommandProcessorInterface $processor The command processor."]}},"getProcessor":{"parameters":[],"annotations":{" short_description":"Returns the associated command processor.","return":["CommandProcessorInterface"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns the version of server profile as its string representation.","return":["string"]}}}},"ServerVersion26":{"namespace":"Predis\\Profile","functions":{"getVersion":{"parameters":[],"annotations":{" short_description":"Gets a profile version corresponding to a Redis version.","return":["string"]}},"getSupportedCommands":{"parameters":[],"annotations":{" short_description":"Returns a map of all the commands supported by the profile and their\nactual PHP classes.","return":["array"]}},"__construct":{"parameters":[],"annotations":[]},"getDefault":{"parameters":[],"annotations":{" short_description":"Returns the default server profile.","return":["ServerProfileInterface"]}},"getDevelopment":{"parameters":[],"annotations":{" short_description":"Returns the development server profile.","return":["ServerProfileInterface"]}},"getDefaultProfiles":{"parameters":[],"annotations":{" short_description":"Returns a map of all the server profiles supported by default and their\nactual PHP classes.","return":["array"]}},"define":{"parameters":{"alias":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"profileClass":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Registers a new server profile.","param":["string $alias        Profile version or alias.","string $profileClass FQN of a class implementing Predis\\Profile\\ServerProfileInterface."]}},"get":{"parameters":{"version":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the specified server profile.","param":["string                 $version Profile version or alias."],"return":["ServerProfileInterface"]}},"supportsCommands":{"parameters":{"commands":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Checks if the profile supports the specified list of commands.","param":["array  $commands List of command IDs."],"return":["string"]}},"supportsCommand":{"parameters":{"command":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks if the profile supports the specified command.","param":["string $command Command ID."],"return":["bool"]}},"getCommandClass":{"parameters":{"command":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the FQN of the class that represent the specified command ID\nregistered in the current server profile.","param":["string $command Command ID."],"return":["string"]}},"createCommand":{"parameters":{"method":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Creates a new command instance.","param":["string           $method    Command ID.","array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"defineCommand":{"parameters":{"alias":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"command":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Defines a new commands in the server profile.","param":["string $alias   Command ID.","string $command FQN of a class implementing Predis\\Command\\CommandInterface."]}},"setProcessor":{"parameters":{"processor":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Associates a command processor.","param":["CommandProcessorInterface $processor The command processor."]}},"getProcessor":{"parameters":[],"annotations":{" short_description":"Returns the associated command processor.","return":["CommandProcessorInterface"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns the version of server profile as its string representation.","return":["string"]}}}},"ServerProfile":{"namespace":"Predis\\Profile","functions":{"__construct":{"parameters":[],"annotations":[]},"getSupportedCommands":{"parameters":[],"annotations":{" short_description":"Returns a map of all the commands supported by the profile and their\nactual PHP classes.","return":["array"]}},"getDefault":{"parameters":[],"annotations":{" short_description":"Returns the default server profile.","return":["ServerProfileInterface"]}},"getDevelopment":{"parameters":[],"annotations":{" short_description":"Returns the development server profile.","return":["ServerProfileInterface"]}},"getDefaultProfiles":{"parameters":[],"annotations":{" short_description":"Returns a map of all the server profiles supported by default and their\nactual PHP classes.","return":["array"]}},"define":{"parameters":{"alias":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"profileClass":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Registers a new server profile.","param":["string $alias        Profile version or alias.","string $profileClass FQN of a class implementing Predis\\Profile\\ServerProfileInterface."]}},"get":{"parameters":{"version":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the specified server profile.","param":["string                 $version Profile version or alias."],"return":["ServerProfileInterface"]}},"supportsCommands":{"parameters":{"commands":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Checks if the profile supports the specified list of commands.","param":["array  $commands List of command IDs."],"return":["string"]}},"supportsCommand":{"parameters":{"command":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks if the profile supports the specified command.","param":["string $command Command ID."],"return":["bool"]}},"getCommandClass":{"parameters":{"command":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the FQN of the class that represent the specified command ID\nregistered in the current server profile.","param":["string $command Command ID."],"return":["string"]}},"createCommand":{"parameters":{"method":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Creates a new command instance.","param":["string           $method    Command ID.","array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"defineCommand":{"parameters":{"alias":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"command":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Defines a new commands in the server profile.","param":["string $alias   Command ID.","string $command FQN of a class implementing Predis\\Command\\CommandInterface."]}},"setProcessor":{"parameters":{"processor":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Associates a command processor.","param":["CommandProcessorInterface $processor The command processor."]}},"getProcessor":{"parameters":[],"annotations":{" short_description":"Returns the associated command processor.","return":["CommandProcessorInterface"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns the version of server profile as its string representation.","return":["string"]}},"getVersion":{"parameters":[],"annotations":{" short_description":"Gets a profile version corresponding to a Redis version.","return":["string"]}}}},"ServerVersion24":{"namespace":"Predis\\Profile","functions":{"getVersion":{"parameters":[],"annotations":{" short_description":"Gets a profile version corresponding to a Redis version.","return":["string"]}},"getSupportedCommands":{"parameters":[],"annotations":{" short_description":"Returns a map of all the commands supported by the profile and their\nactual PHP classes.","return":["array"]}},"__construct":{"parameters":[],"annotations":[]},"getDefault":{"parameters":[],"annotations":{" short_description":"Returns the default server profile.","return":["ServerProfileInterface"]}},"getDevelopment":{"parameters":[],"annotations":{" short_description":"Returns the development server profile.","return":["ServerProfileInterface"]}},"getDefaultProfiles":{"parameters":[],"annotations":{" short_description":"Returns a map of all the server profiles supported by default and their\nactual PHP classes.","return":["array"]}},"define":{"parameters":{"alias":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"profileClass":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Registers a new server profile.","param":["string $alias        Profile version or alias.","string $profileClass FQN of a class implementing Predis\\Profile\\ServerProfileInterface."]}},"get":{"parameters":{"version":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the specified server profile.","param":["string                 $version Profile version or alias."],"return":["ServerProfileInterface"]}},"supportsCommands":{"parameters":{"commands":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Checks if the profile supports the specified list of commands.","param":["array  $commands List of command IDs."],"return":["string"]}},"supportsCommand":{"parameters":{"command":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks if the profile supports the specified command.","param":["string $command Command ID."],"return":["bool"]}},"getCommandClass":{"parameters":{"command":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the FQN of the class that represent the specified command ID\nregistered in the current server profile.","param":["string $command Command ID."],"return":["string"]}},"createCommand":{"parameters":{"method":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Creates a new command instance.","param":["string           $method    Command ID.","array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"defineCommand":{"parameters":{"alias":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"command":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Defines a new commands in the server profile.","param":["string $alias   Command ID.","string $command FQN of a class implementing Predis\\Command\\CommandInterface."]}},"setProcessor":{"parameters":{"processor":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Associates a command processor.","param":["CommandProcessorInterface $processor The command processor."]}},"getProcessor":{"parameters":[],"annotations":{" short_description":"Returns the associated command processor.","return":["CommandProcessorInterface"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns the version of server profile as its string representation.","return":["string"]}}}},"ServerVersion30":{"namespace":"Predis\\Profile","functions":{"getVersion":{"parameters":[],"annotations":{" short_description":"Gets a profile version corresponding to a Redis version.","return":["string"]}},"getSupportedCommands":{"parameters":[],"annotations":{" short_description":"Returns a map of all the commands supported by the profile and their\nactual PHP classes.","return":["array"]}},"__construct":{"parameters":[],"annotations":[]},"getDefault":{"parameters":[],"annotations":{" short_description":"Returns the default server profile.","return":["ServerProfileInterface"]}},"getDevelopment":{"parameters":[],"annotations":{" short_description":"Returns the development server profile.","return":["ServerProfileInterface"]}},"getDefaultProfiles":{"parameters":[],"annotations":{" short_description":"Returns a map of all the server profiles supported by default and their\nactual PHP classes.","return":["array"]}},"define":{"parameters":{"alias":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"profileClass":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Registers a new server profile.","param":["string $alias        Profile version or alias.","string $profileClass FQN of a class implementing Predis\\Profile\\ServerProfileInterface."]}},"get":{"parameters":{"version":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the specified server profile.","param":["string                 $version Profile version or alias."],"return":["ServerProfileInterface"]}},"supportsCommands":{"parameters":{"commands":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Checks if the profile supports the specified list of commands.","param":["array  $commands List of command IDs."],"return":["string"]}},"supportsCommand":{"parameters":{"command":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks if the profile supports the specified command.","param":["string $command Command ID."],"return":["bool"]}},"getCommandClass":{"parameters":{"command":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the FQN of the class that represent the specified command ID\nregistered in the current server profile.","param":["string $command Command ID."],"return":["string"]}},"createCommand":{"parameters":{"method":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Creates a new command instance.","param":["string           $method    Command ID.","array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"defineCommand":{"parameters":{"alias":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"command":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Defines a new commands in the server profile.","param":["string $alias   Command ID.","string $command FQN of a class implementing Predis\\Command\\CommandInterface."]}},"setProcessor":{"parameters":{"processor":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Associates a command processor.","param":["CommandProcessorInterface $processor The command processor."]}},"getProcessor":{"parameters":[],"annotations":{" short_description":"Returns the associated command processor.","return":["CommandProcessorInterface"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns the version of server profile as its string representation.","return":["string"]}}}},"ServerVersionNext":{"namespace":"Predis\\Profile","functions":{"getVersion":{"parameters":[],"annotations":{" short_description":"Gets a profile version corresponding to a Redis version.","return":["string"]}},"getSupportedCommands":{"parameters":[],"annotations":{" short_description":"Returns a map of all the commands supported by the profile and their\nactual PHP classes.","return":["array"]}},"__construct":{"parameters":[],"annotations":[]},"getDefault":{"parameters":[],"annotations":{" short_description":"Returns the default server profile.","return":["ServerProfileInterface"]}},"getDevelopment":{"parameters":[],"annotations":{" short_description":"Returns the development server profile.","return":["ServerProfileInterface"]}},"getDefaultProfiles":{"parameters":[],"annotations":{" short_description":"Returns a map of all the server profiles supported by default and their\nactual PHP classes.","return":["array"]}},"define":{"parameters":{"alias":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"profileClass":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Registers a new server profile.","param":["string $alias        Profile version or alias.","string $profileClass FQN of a class implementing Predis\\Profile\\ServerProfileInterface."]}},"get":{"parameters":{"version":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the specified server profile.","param":["string                 $version Profile version or alias."],"return":["ServerProfileInterface"]}},"supportsCommands":{"parameters":{"commands":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Checks if the profile supports the specified list of commands.","param":["array  $commands List of command IDs."],"return":["string"]}},"supportsCommand":{"parameters":{"command":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks if the profile supports the specified command.","param":["string $command Command ID."],"return":["bool"]}},"getCommandClass":{"parameters":{"command":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the FQN of the class that represent the specified command ID\nregistered in the current server profile.","param":["string $command Command ID."],"return":["string"]}},"createCommand":{"parameters":{"method":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Creates a new command instance.","param":["string           $method    Command ID.","array            $arguments Arguments for the command."],"return":["CommandInterface"]}},"defineCommand":{"parameters":{"alias":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"command":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Defines a new commands in the server profile.","param":["string $alias   Command ID.","string $command FQN of a class implementing Predis\\Command\\CommandInterface."]}},"setProcessor":{"parameters":{"processor":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Associates a command processor.","param":["CommandProcessorInterface $processor The command processor."]}},"getProcessor":{"parameters":[],"annotations":{" short_description":"Returns the associated command processor.","return":["CommandProcessorInterface"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns the version of server profile as its string representation.","return":["string"]}}}},"ServerVersion28Test":{"namespace":"Predis\\Profile","functions":{"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of the tested profile.","param":["string                 $version Version of Redis."],"return":["ServerProfileInterface"]}},"getExpectedVersion":{"parameters":[],"annotations":{" short_description":"Returns the expected version string for the tested profile.","return":["string Version string."]}},"getExpectedCommands":{"parameters":[],"annotations":{" short_description":"Returns the expected list of commands supported by the tested profile.","return":["array List of supported commands."]}},"getCommands":{"parameters":{"profile":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the list of commands supported by the current\nserver profile.","param":["ServerProfileInterface $profile Server profile instance."],"return":["array"]}},"testGetVersion":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSupportedCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerVersionNextTest":{"namespace":"Predis\\Profile","functions":{"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of the tested profile.","param":["string                 $version Version of Redis."],"return":["ServerProfileInterface"]}},"getExpectedVersion":{"parameters":[],"annotations":{" short_description":"Returns the expected version string for the tested profile.","return":["string Version string."]}},"getExpectedCommands":{"parameters":[],"annotations":{" short_description":"Returns the expected list of commands supported by the tested profile.","return":["array List of supported commands."]}},"getCommands":{"parameters":{"profile":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the list of commands supported by the current\nserver profile.","param":["ServerProfileInterface $profile Server profile instance."],"return":["array"]}},"testGetVersion":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSupportedCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerVersion22Test":{"namespace":"Predis\\Profile","functions":{"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of the tested profile.","param":["string                 $version Version of Redis."],"return":["ServerProfileInterface"]}},"getExpectedVersion":{"parameters":[],"annotations":{" short_description":"Returns the expected version string for the tested profile.","return":["string Version string."]}},"getExpectedCommands":{"parameters":[],"annotations":{" short_description":"Returns the expected list of commands supported by the tested profile.","return":["array List of supported commands."]}},"getCommands":{"parameters":{"profile":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the list of commands supported by the current\nserver profile.","param":["ServerProfileInterface $profile Server profile instance."],"return":["array"]}},"testGetVersion":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSupportedCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerVersion20Test":{"namespace":"Predis\\Profile","functions":{"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of the tested profile.","param":["string                 $version Version of Redis."],"return":["ServerProfileInterface"]}},"getExpectedVersion":{"parameters":[],"annotations":{" short_description":"Returns the expected version string for the tested profile.","return":["string Version string."]}},"getExpectedCommands":{"parameters":[],"annotations":{" short_description":"Returns the expected list of commands supported by the tested profile.","return":["array List of supported commands."]}},"getCommands":{"parameters":{"profile":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the list of commands supported by the current\nserver profile.","param":["ServerProfileInterface $profile Server profile instance."],"return":["array"]}},"testGetVersion":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSupportedCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerVersion30Test":{"namespace":"Predis\\Profile","functions":{"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of the tested profile.","param":["string                 $version Version of Redis."],"return":["ServerProfileInterface"]}},"getExpectedVersion":{"parameters":[],"annotations":{" short_description":"Returns the expected version string for the tested profile.","return":["string Version string."]}},"getExpectedCommands":{"parameters":[],"annotations":{" short_description":"Returns the expected list of commands supported by the tested profile.","return":["array List of supported commands."]}},"getCommands":{"parameters":{"profile":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the list of commands supported by the current\nserver profile.","param":["ServerProfileInterface $profile Server profile instance."],"return":["array"]}},"testGetVersion":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSupportedCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerVersion26Test":{"namespace":"Predis\\Profile","functions":{"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of the tested profile.","param":["string                 $version Version of Redis."],"return":["ServerProfileInterface"]}},"getExpectedVersion":{"parameters":[],"annotations":{" short_description":"Returns the expected version string for the tested profile.","return":["string Version string."]}},"getExpectedCommands":{"parameters":[],"annotations":{" short_description":"Returns the expected list of commands supported by the tested profile.","return":["array List of supported commands."]}},"getCommands":{"parameters":{"profile":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the list of commands supported by the current\nserver profile.","param":["ServerProfileInterface $profile Server profile instance."],"return":["array"]}},"testGetVersion":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSupportedCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerProfileTest":{"namespace":"Predis\\Profile","functions":{"testGetVersion":{"parameters":[],"annotations":{"group":["disconnected"]}},"testGetDefault":{"parameters":[],"annotations":{"group":["disconnected"]}},"testGetDevelopment":{"parameters":[],"annotations":{"group":["disconnected"]}},"testGetUndefinedProfile":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\ClientException"],"expectedExceptionMessage":["Unknown server profile: 1.0"]}},"testDefineProfile":{"parameters":[],"annotations":{"group":["disconnected"]}},"testDefineInvalidProfile":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["InvalidArgumentException"],"expectedExceptionMessage":["Cannot register 'stdClass' as it is not a valid profile class"]}},"testToString":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSupportCommand":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSupportCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"testGetCommandClass":{"parameters":[],"annotations":{"group":["disconnected"]}},"testDefineCommand":{"parameters":[],"annotations":{"group":["disconnected"]}},"testDefineInvalidCommand":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["InvalidArgumentException"],"expectedExceptionMessage":["Cannot register 'stdClass' as it is not a valid Redis command"]}},"testCreateCommandWithoutArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCreateCommandWithArguments":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCreateUndefinedCommand":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\ClientException"],"expectedExceptionMessage":["'unknown' is not a registered Redis command"]}},"testGetDefaultProcessor":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSetProcessor":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSetAndUnsetProcessor":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSingleProcessor":{"parameters":[],"annotations":{"group":["disconnected"],"todo":["Could it be that objects passed to the return callback of a mocked\n      method are cloned instead of being passed by reference?"]}},"testChainOfProcessors":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerVersion12Test":{"namespace":"Predis\\Profile","functions":{"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of the tested profile.","param":["string                 $version Version of Redis."],"return":["ServerProfileInterface"]}},"getExpectedVersion":{"parameters":[],"annotations":{" short_description":"Returns the expected version string for the tested profile.","return":["string Version string."]}},"getExpectedCommands":{"parameters":[],"annotations":{" short_description":"Returns the expected list of commands supported by the tested profile.","return":["array List of supported commands."]}},"getCommands":{"parameters":{"profile":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the list of commands supported by the current\nserver profile.","param":["ServerProfileInterface $profile Server profile instance."],"return":["array"]}},"testGetVersion":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSupportedCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ServerVersion24Test":{"namespace":"Predis\\Profile","functions":{"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of the tested profile.","param":["string                 $version Version of Redis."],"return":["ServerProfileInterface"]}},"getExpectedVersion":{"parameters":[],"annotations":{" short_description":"Returns the expected version string for the tested profile.","return":["string Version string."]}},"getExpectedCommands":{"parameters":[],"annotations":{" short_description":"Returns the expected list of commands supported by the tested profile.","return":["array List of supported commands."]}},"getCommands":{"parameters":{"profile":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the list of commands supported by the current\nserver profile.","param":["ServerProfileInterface $profile Server profile instance."],"return":["array"]}},"testGetVersion":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSupportedCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"PredisProfileTestCase":{"namespace":"Predis\\Profile","functions":{"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of the tested profile.","param":["string                 $version Version of Redis."],"return":["ServerProfileInterface"]}},"getExpectedVersion":{"parameters":[],"annotations":{" short_description":"Returns the expected version string for the tested profile.","return":["string Version string."]}},"getExpectedCommands":{"parameters":[],"annotations":{" short_description":"Returns the expected list of commands supported by the tested profile.","return":["array List of supported commands."]}},"getCommands":{"parameters":{"profile":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the list of commands supported by the current\nserver profile.","param":["ServerProfileInterface $profile Server profile instance."],"return":["array"]}},"testGetVersion":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSupportedCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"MonitorContext":{"namespace":"Predis\\Monitor","functions":{"__construct":{"parameters":{"client":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["ClientInterface $client Client instance used by the context."]}},"__destruct":{"parameters":[],"annotations":{" short_description":"Automatically closes the context when PHP's garbage collector kicks in."}},"checkCapabilities":{"parameters":{"client":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks if the passed client instance satisfies the required conditions\nneeded to initialize a monitor context.","param":["ClientInterface $client Client instance used by the context."]}},"openContext":{"parameters":[],"annotations":{" short_description":"Initializes the context and sends the MONITOR command to the server."}},"closeContext":{"parameters":[],"annotations":{" short_description":"Closes the context. Internally this is done by disconnecting from server\nsince there is no way to terminate the stream initialized by MONITOR."}},"rewind":{"parameters":[],"annotations":{" short_description":""}},"current":{"parameters":[],"annotations":{" short_description":"Returns the last message payload retrieved from the server.","return":["Object"]}},"key":{"parameters":[],"annotations":{" short_description":""}},"next":{"parameters":[],"annotations":{" short_description":""}},"valid":{"parameters":[],"annotations":{" short_description":"Checks if the the context is still in a valid state to continue.","return":["bool"]}},"getValue":{"parameters":[],"annotations":{" short_description":"Waits for a new message from the server generated by MONITOR and\nreturns it when available.","return":["Object"]}}}},"MonitorContextTest":{"namespace":"Predis\\Monitor","functions":{"testMonitorContextRequireMonitorCommand":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\NotSupportedException"],"expectedExceptionMessage":["The current profile does not support the MONITOR command"]}},"testMonitorContextDoesNotWorkOnClusters":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\NotSupportedException"],"expectedExceptionMessage":["Cannot initialize a monitor context when using aggregated connections"]}},"testConstructorOpensContext":{"parameters":[],"annotations":{"group":["disconnected"]}},"testClosingContextClosesConnection":{"parameters":[],"annotations":{"group":["disconnected"],"todo":["We should investigate why disconnect is invoked 2 times in this test,\n      but the reason is probably that the GC invokes __destruct() on monitor\n      thus calling $client->disconnect() a second time at the end of the test."]}},"testGarbageCollectorRunClosesContext":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReadsMessageFromConnectionToRedis24":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReadsMessageFromConnectionToRedis26":{"parameters":[],"annotations":{"group":["disconnected"]}},"testMonitorAgainstRedisServer":{"parameters":[],"annotations":{"group":["connected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ReplicationConnectionInterface":{"namespace":"Predis\\Connection","functions":{"switchTo":{"parameters":{"connection":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Switches the internal connection object being used.","param":["string $connection Alias of a connection"]}},"getCurrent":{"parameters":[],"annotations":{" short_description":"Retrieves the connection object currently being used.","return":["SingleConnectionInterface"]}},"getMaster":{"parameters":[],"annotations":{" short_description":"Retrieves the connection object to the master Redis server.","return":["SingleConnectionInterface"]}},"getSlaves":{"parameters":[],"annotations":{" short_description":"Retrieves a list of connection objects to slaves Redis servers.","return":["SingleConnectionInterface"]}},"add":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Adds a connection instance to the aggregated connection.","param":["SingleConnectionInterface $connection Instance of a connection."]}},"remove":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Removes the specified connection instance from the aggregated\nconnection.","param":["SingleConnectionInterface $connection Instance of a connection."],"return":["bool                      Returns true if the connection was in the pool."]}},"getConnection":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the actual connection instance in charge of the specified command.","param":["CommandInterface          $command Instance of a Redis command."],"return":["SingleConnectionInterface"]}},"getConnectionById":{"parameters":{"connectionId":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Retrieves a connection instance from the aggregated connection\nusing an alias.","param":["string                    $connectionId Alias of a connection"],"return":["SingleConnectionInterface"]}},"connect":{"parameters":[],"annotations":{" short_description":"Opens the connection."}},"disconnect":{"parameters":[],"annotations":{" short_description":"Closes the connection."}},"isConnected":{"parameters":[],"annotations":{" short_description":"Returns if the connection is open.","return":["bool"]}},"writeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Write a Redis command on the connection.","param":["CommandInterface $command Instance of a Redis command."]}},"readResponse":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Reads the reply for a Redis command from the connection.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}},"executeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Writes a Redis command to the connection and reads back the reply.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}}}},"ConnectionInterface":{"namespace":"Predis\\Connection","functions":{"connect":{"parameters":[],"annotations":{" short_description":"Opens the connection."}},"disconnect":{"parameters":[],"annotations":{" short_description":"Closes the connection."}},"isConnected":{"parameters":[],"annotations":{" short_description":"Returns if the connection is open.","return":["bool"]}},"writeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Write a Redis command on the connection.","param":["CommandInterface $command Instance of a Redis command."]}},"readResponse":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Reads the reply for a Redis command from the connection.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}},"executeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Writes a Redis command to the connection and reads back the reply.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}}}},"ClusterConnectionInterface":{"namespace":"Predis\\Connection","functions":{"add":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Adds a connection instance to the aggregated connection.","param":["SingleConnectionInterface $connection Instance of a connection."]}},"remove":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Removes the specified connection instance from the aggregated\nconnection.","param":["SingleConnectionInterface $connection Instance of a connection."],"return":["bool                      Returns true if the connection was in the pool."]}},"getConnection":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the actual connection instance in charge of the specified command.","param":["CommandInterface          $command Instance of a Redis command."],"return":["SingleConnectionInterface"]}},"getConnectionById":{"parameters":{"connectionId":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Retrieves a connection instance from the aggregated connection\nusing an alias.","param":["string                    $connectionId Alias of a connection"],"return":["SingleConnectionInterface"]}},"connect":{"parameters":[],"annotations":{" short_description":"Opens the connection."}},"disconnect":{"parameters":[],"annotations":{" short_description":"Closes the connection."}},"isConnected":{"parameters":[],"annotations":{" short_description":"Returns if the connection is open.","return":["bool"]}},"writeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Write a Redis command on the connection.","param":["CommandInterface $command Instance of a Redis command."]}},"readResponse":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Reads the reply for a Redis command from the connection.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}},"executeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Writes a Redis command to the connection and reads back the reply.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}}}},"StreamConnection":{"namespace":"Predis\\Connection","functions":{"__construct":{"parameters":{"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"","param":["ConnectionParametersInterface $parameters Parameters used to initialize the connection."]}},"__destruct":{"parameters":[],"annotations":{" short_description":"Disconnects from the server and destroys the underlying resource when\nPHP's garbage collector kicks in only if the connection has not been\nmarked as persistent."}},"createResource":{"parameters":[],"annotations":{" short_description":"Creates the underlying resource used to communicate with Redis.","return":["mixed"]}},"tcpStreamInitializer":{"parameters":{"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Initializes a TCP stream resource.","param":["ConnectionParametersInterface $parameters Parameters used to initialize the connection."],"return":["resource"]}},"unixStreamInitializer":{"parameters":{"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Initializes a UNIX stream resource.","param":["ConnectionParametersInterface $parameters Parameters used to initialize the connection."],"return":["resource"]}},"connect":{"parameters":[],"annotations":{" short_description":"Opens the connection."}},"disconnect":{"parameters":[],"annotations":{" short_description":"Closes the connection."}},"sendInitializationCommands":{"parameters":[],"annotations":{" short_description":"Sends the initialization commands to Redis when the connection is opened."}},"writeBytes":{"parameters":{"buffer":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Performs a write operation on the stream of the buffer containing a\ncommand serialized with the Redis wire protocol.","param":["string $buffer Redis wire protocol representation of a command."]}},"read":{"parameters":[],"annotations":{" short_description":"Reads a reply from the server.","return":["mixed"]}},"writeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Write a Redis command on the connection.","param":["CommandInterface $command Instance of a Redis command."]}},"__sleep":{"parameters":[],"annotations":{" short_description":""}},"checkParameters":{"parameters":{"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks some of the parameters used to initialize the connection.","param":["ConnectionParametersInterface $parameters Initialization parameters for the connection."],"return":["ConnectionParametersInterface"]}},"isConnected":{"parameters":[],"annotations":{" short_description":"Returns if the connection is open.","return":["bool"]}},"pushInitCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Pushes the instance of a Redis command to the queue of commands executed\nwhen the actual connection to a server is estabilished.","param":["CommandInterface $command Instance of a Redis command."]}},"executeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Writes a Redis command to the connection and reads back the reply.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}},"readResponse":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Reads the reply for a Redis command from the connection.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}},"onConnectionError":{"parameters":{"message":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"code":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper method to handle connection errors.","param":["string $message Error message.","int    $code    Error code."]}},"onProtocolError":{"parameters":{"message":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper method to handle protocol errors.","param":["string $message Error message."]}},"onInvalidOption":{"parameters":{"option":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper method to handle not supported connection parameters.","param":["string $option     Name of the option.","mixed  $parameters Parameters used to initialize the connection."]}},"getResource":{"parameters":[],"annotations":{" short_description":"Returns the underlying resource used to communicate with a Redis server.","return":["mixed"]}},"getParameters":{"parameters":[],"annotations":{" short_description":"Gets the parameters used to initialize the connection object.","return":["ConnectionParametersInterface"]}},"getIdentifier":{"parameters":[],"annotations":{" short_description":"Gets an identifier for the connection.","return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a string representation of the connection.","return":["string"]}}}},"ComposableStreamConnection":{"namespace":"Predis\\Connection","functions":{"__construct":{"parameters":{"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"protocol":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["ConnectionParametersInterface $parameters Parameters used to initialize the connection.","ProtocolInterface             $protocol   A protocol processor."]}},"setProtocol":{"parameters":{"protocol":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sets the protocol processor used by the connection.","param":["ProtocolInterface $protocol Protocol processor."]}},"getProtocol":{"parameters":[],"annotations":{" short_description":"Gets the protocol processor used by the connection."}},"writeBytes":{"parameters":{"buffer":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Performs a write operation on the stream of the buffer containing a\ncommand serialized with the Redis wire protocol.","param":["string $buffer Redis wire protocol representation of a command."]}},"readBytes":{"parameters":{"length":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Reads a specified number of bytes from the connection.","param":["string"]}},"readLine":{"parameters":[],"annotations":{" short_description":"Reads a line from the connection."}},"writeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Write a Redis command on the connection.","param":["CommandInterface $command Instance of a Redis command."]}},"read":{"parameters":[],"annotations":{" short_description":"Reads a reply from the server.","return":["mixed"]}},"__sleep":{"parameters":[],"annotations":{" short_description":""}},"__destruct":{"parameters":[],"annotations":{" short_description":"Disconnects from the server and destroys the underlying resource when\nPHP's garbage collector kicks in only if the connection has not been\nmarked as persistent."}},"createResource":{"parameters":[],"annotations":{" short_description":"Creates the underlying resource used to communicate with Redis.","return":["mixed"]}},"tcpStreamInitializer":{"parameters":{"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Initializes a TCP stream resource.","param":["ConnectionParametersInterface $parameters Parameters used to initialize the connection."],"return":["resource"]}},"unixStreamInitializer":{"parameters":{"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Initializes a UNIX stream resource.","param":["ConnectionParametersInterface $parameters Parameters used to initialize the connection."],"return":["resource"]}},"connect":{"parameters":[],"annotations":{" short_description":"Opens the connection."}},"disconnect":{"parameters":[],"annotations":{" short_description":"Closes the connection."}},"sendInitializationCommands":{"parameters":[],"annotations":{" short_description":"Sends the initialization commands to Redis when the connection is opened."}},"checkParameters":{"parameters":{"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks some of the parameters used to initialize the connection.","param":["ConnectionParametersInterface $parameters Initialization parameters for the connection."],"return":["ConnectionParametersInterface"]}},"isConnected":{"parameters":[],"annotations":{" short_description":"Returns if the connection is open.","return":["bool"]}},"pushInitCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Pushes the instance of a Redis command to the queue of commands executed\nwhen the actual connection to a server is estabilished.","param":["CommandInterface $command Instance of a Redis command."]}},"executeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Writes a Redis command to the connection and reads back the reply.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}},"readResponse":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Reads the reply for a Redis command from the connection.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}},"onConnectionError":{"parameters":{"message":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"code":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper method to handle connection errors.","param":["string $message Error message.","int    $code    Error code."]}},"onProtocolError":{"parameters":{"message":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper method to handle protocol errors.","param":["string $message Error message."]}},"onInvalidOption":{"parameters":{"option":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper method to handle not supported connection parameters.","param":["string $option     Name of the option.","mixed  $parameters Parameters used to initialize the connection."]}},"getResource":{"parameters":[],"annotations":{" short_description":"Returns the underlying resource used to communicate with a Redis server.","return":["mixed"]}},"getParameters":{"parameters":[],"annotations":{" short_description":"Gets the parameters used to initialize the connection object.","return":["ConnectionParametersInterface"]}},"getIdentifier":{"parameters":[],"annotations":{" short_description":"Gets an identifier for the connection.","return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a string representation of the connection.","return":["string"]}}}},"AbstractConnection":{"namespace":"Predis\\Connection","functions":{"__construct":{"parameters":{"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["ConnectionParametersInterface $parameters Parameters used to initialize the connection."]}},"__destruct":{"parameters":[],"annotations":{" short_description":"Disconnects from the server and destroys the underlying resource when\nPHP's garbage collector kicks in."}},"checkParameters":{"parameters":{"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks some of the parameters used to initialize the connection.","param":["ConnectionParametersInterface $parameters Initialization parameters for the connection."],"return":["ConnectionParametersInterface"]}},"createResource":{"parameters":[],"annotations":{" short_description":"Creates the underlying resource used to communicate with Redis.","return":["mixed"]}},"isConnected":{"parameters":[],"annotations":{" short_description":"Returns if the connection is open.","return":["bool"]}},"connect":{"parameters":[],"annotations":{" short_description":"Opens the connection."}},"disconnect":{"parameters":[],"annotations":{" short_description":"Closes the connection."}},"pushInitCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Pushes the instance of a Redis command to the queue of commands executed\nwhen the actual connection to a server is estabilished.","param":["CommandInterface $command Instance of a Redis command."]}},"executeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Writes a Redis command to the connection and reads back the reply.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}},"readResponse":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Reads the reply for a Redis command from the connection.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}},"onConnectionError":{"parameters":{"message":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"code":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper method to handle connection errors.","param":["string $message Error message.","int    $code    Error code."]}},"onProtocolError":{"parameters":{"message":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper method to handle protocol errors.","param":["string $message Error message."]}},"onInvalidOption":{"parameters":{"option":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper method to handle not supported connection parameters.","param":["string $option     Name of the option.","mixed  $parameters Parameters used to initialize the connection."]}},"getResource":{"parameters":[],"annotations":{" short_description":"Returns the underlying resource used to communicate with a Redis server.","return":["mixed"]}},"getParameters":{"parameters":[],"annotations":{" short_description":"Gets the parameters used to initialize the connection object.","return":["ConnectionParametersInterface"]}},"getIdentifier":{"parameters":[],"annotations":{" short_description":"Gets an identifier for the connection.","return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a string representation of the connection.","return":["string"]}},"__sleep":{"parameters":[],"annotations":{" short_description":""}},"read":{"parameters":[],"annotations":{" short_description":"Reads a reply from the server.","return":["mixed"]}},"writeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Write a Redis command on the connection.","param":["CommandInterface $command Instance of a Redis command."]}}}},"ConnectionFactory":{"namespace":"Predis\\Connection","functions":{"__construct":{"parameters":{"profile":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Initializes a new instance of the default connection factory class used by Predis.","param":["ServerProfileInterface $profile Server profile used to initialize new connections."]}},"getDefaultSchemes":{"parameters":[],"annotations":{" short_description":"Returns a named array that maps URI schemes to connection classes.","return":["array Map of URI schemes and connection classes."]}},"checkInitializer":{"parameters":{"initializer":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks if the provided argument represents a valid connection class\nimplementing Predis\\Connection\\SingleConnectionInterface. Optionally,\ncallable objects are used for lazy initialization of connection objects.","param":["mixed $initializer FQN of a connection class or a callable for lazy initialization."],"return":["mixed"]}},"define":{"parameters":{"scheme":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"initializer":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Defines or overrides the connection class identified by a scheme prefix.","param":["string $scheme      URI scheme identifying the connection class.","mixed  $initializer FQN of a connection class or a callable object for lazy initialization."]}},"undefine":{"parameters":{"scheme":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Undefines the connection identified by a scheme prefix.","param":["string $scheme Parameters for the connection."]}},"create":{"parameters":{"parameters":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Creates a new connection object.","param":["mixed                     $parameters Parameters for the connection."],"return":["SingleConnectionInterface"]}},"createAggregated":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Prepares an aggregation of connection objects.","param":["AggregatedConnectionInterface $cluster    Instance of an aggregated connection class.","array                         $parameters List of parameters for each connection object."],"return":["AggregatedConnectionInterface"]}},"prepareConnection":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prepares a connection object after its initialization.","param":["SingleConnectionInterface $connection Instance of a connection object."]}},"setProfile":{"parameters":{"profile":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sets the server profile used to create initialization commands for connections.","param":["ServerProfileInterface $profile Server profile instance."]}},"getProfile":{"parameters":[],"annotations":{" short_description":"Returns the server profile used to create initialization commands for connections.","return":["ServerProfileInterface"]}}}},"ConnectionFactoryInterface":{"namespace":"Predis\\Connection","functions":{"define":{"parameters":{"scheme":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"initializer":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Defines or overrides the connection class identified by a scheme prefix.","param":["string $scheme      URI scheme identifying the connection class.","mixed  $initializer FQN of a connection class or a callable object for lazy initialization."]}},"undefine":{"parameters":{"scheme":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Undefines the connection identified by a scheme prefix.","param":["string $scheme Parameters for the connection."]}},"create":{"parameters":{"parameters":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Creates a new connection object.","param":["mixed                     $parameters Parameters for the connection."],"return":["SingleConnectionInterface"]}},"createAggregated":{"parameters":{"cluster":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Prepares an aggregation of connection objects.","param":["AggregatedConnectionInterface $cluster    Instance of an aggregated connection class.","array                         $parameters List of parameters for each connection object."],"return":["AggregatedConnectionInterface"]}}}},"SingleConnectionInterface":{"namespace":"Predis\\Connection","functions":{"__toString":{"parameters":[],"annotations":{" short_description":"Returns a string representation of the connection.","return":["string"]}},"getResource":{"parameters":[],"annotations":{" short_description":"Returns the underlying resource used to communicate with a Redis server.","return":["mixed"]}},"getParameters":{"parameters":[],"annotations":{" short_description":"Gets the parameters used to initialize the connection object.","return":["ConnectionParametersInterface"]}},"pushInitCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Pushes the instance of a Redis command to the queue of commands executed\nwhen the actual connection to a server is estabilished.","param":["CommandInterface $command Instance of a Redis command."]}},"read":{"parameters":[],"annotations":{" short_description":"Reads a reply from the server.","return":["mixed"]}},"connect":{"parameters":[],"annotations":{" short_description":"Opens the connection."}},"disconnect":{"parameters":[],"annotations":{" short_description":"Closes the connection."}},"isConnected":{"parameters":[],"annotations":{" short_description":"Returns if the connection is open.","return":["bool"]}},"writeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Write a Redis command on the connection.","param":["CommandInterface $command Instance of a Redis command."]}},"readResponse":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Reads the reply for a Redis command from the connection.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}},"executeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Writes a Redis command to the connection and reads back the reply.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}}}},"ConnectionParametersInterface":{"namespace":"Predis\\Connection","functions":{"__isset":{"parameters":{"parameter":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks if the specified parameters is set.","param":["string $parameter Name of the parameter."],"return":["bool"]}},"__get":{"parameters":{"parameter":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the value of the specified parameter.","param":["string $parameter Name of the parameter."],"return":["mixed"]}},"toArray":{"parameters":[],"annotations":{" short_description":"Returns an array representation of the connection parameters.","return":["array"]}}}},"PhpiredisConnection":{"namespace":"Predis\\Connection","functions":{"__construct":{"parameters":{"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"","param":["ConnectionParametersInterface $parameters Parameters used to initialize the connection."]}},"__destruct":{"parameters":[],"annotations":{" short_description":"Disconnects from the server and destroys the underlying resource and the\nprotocol reader resource when PHP's garbage collector kicks in."}},"checkExtensions":{"parameters":[],"annotations":{" short_description":"Checks if the socket and phpiredis extensions are loaded in PHP."}},"checkParameters":{"parameters":{"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks some of the parameters used to initialize the connection.","param":["ConnectionParametersInterface $parameters Initialization parameters for the connection."],"return":["ConnectionParametersInterface"]}},"initializeReader":{"parameters":[],"annotations":{" short_description":"Initializes the protocol reader resource."}},"getStatusHandler":{"parameters":[],"annotations":{" short_description":"Gets the handler used by the protocol reader to handle status replies.","return":["\\Closure"]}},"getErrorHandler":{"parameters":[],"annotations":{" short_description":"Gets the handler used by the protocol reader to handle Redis errors.","return":["\\Closure"]}},"emitSocketError":{"parameters":[],"annotations":{" short_description":"Helper method used to throw exceptions on socket errors."}},"createResource":{"parameters":[],"annotations":{" short_description":"Creates the underlying resource used to communicate with Redis.","return":["mixed"]}},"setSocketOptions":{"parameters":{"socket":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sets options on the socket resource from the connection parameters.","param":["resource                      $socket     Socket resource.","ConnectionParametersInterface $parameters Parameters used to initialize the connection."]}},"getAddress":{"parameters":{"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the address from the connection parameters.","param":["ConnectionParametersInterface $parameters Parameters used to initialize the connection."],"return":["string"]}},"connectWithTimeout":{"parameters":{"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Opens the actual connection to the server with a timeout.","param":["ConnectionParametersInterface $parameters Parameters used to initialize the connection."],"return":["string"]}},"connect":{"parameters":[],"annotations":{" short_description":"Opens the connection."}},"disconnect":{"parameters":[],"annotations":{" short_description":"Closes the connection."}},"sendInitializationCommands":{"parameters":[],"annotations":{" short_description":"Sends the initialization commands to Redis when the connection is opened."}},"write":{"parameters":{"buffer":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":""}},"read":{"parameters":[],"annotations":{" short_description":"Reads a reply from the server.","return":["mixed"]}},"writeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Write a Redis command on the connection.","param":["CommandInterface $command Instance of a Redis command."]}},"__wakeup":{"parameters":[],"annotations":{" short_description":""}},"isConnected":{"parameters":[],"annotations":{" short_description":"Returns if the connection is open.","return":["bool"]}},"pushInitCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Pushes the instance of a Redis command to the queue of commands executed\nwhen the actual connection to a server is estabilished.","param":["CommandInterface $command Instance of a Redis command."]}},"executeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Writes a Redis command to the connection and reads back the reply.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}},"readResponse":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Reads the reply for a Redis command from the connection.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}},"onConnectionError":{"parameters":{"message":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"code":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper method to handle connection errors.","param":["string $message Error message.","int    $code    Error code."]}},"onProtocolError":{"parameters":{"message":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper method to handle protocol errors.","param":["string $message Error message."]}},"onInvalidOption":{"parameters":{"option":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper method to handle not supported connection parameters.","param":["string $option     Name of the option.","mixed  $parameters Parameters used to initialize the connection."]}},"getResource":{"parameters":[],"annotations":{" short_description":"Returns the underlying resource used to communicate with a Redis server.","return":["mixed"]}},"getParameters":{"parameters":[],"annotations":{" short_description":"Gets the parameters used to initialize the connection object.","return":["ConnectionParametersInterface"]}},"getIdentifier":{"parameters":[],"annotations":{" short_description":"Gets an identifier for the connection.","return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a string representation of the connection.","return":["string"]}},"__sleep":{"parameters":[],"annotations":{" short_description":""}}}},"PhpiredisStreamConnection":{"namespace":"Predis\\Connection","functions":{"__construct":{"parameters":{"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"","param":["ConnectionParametersInterface $parameters Parameters used to initialize the connection."]}},"__destruct":{"parameters":[],"annotations":{" short_description":"Disconnects from the server and destroys the underlying resource when\nPHP's garbage collector kicks in only if the connection has not been\nmarked as persistent."}},"checkExtensions":{"parameters":[],"annotations":{" short_description":"Checks if the phpiredis extension is loaded in PHP."}},"checkParameters":{"parameters":{"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks some of the parameters used to initialize the connection.","param":["ConnectionParametersInterface $parameters Initialization parameters for the connection."],"return":["ConnectionParametersInterface"]}},"tcpStreamInitializer":{"parameters":{"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Initializes a TCP stream resource.","param":["ConnectionParametersInterface $parameters Parameters used to initialize the connection."],"return":["resource"]}},"initializeReader":{"parameters":[],"annotations":{" short_description":"Initializes the protocol reader resource."}},"getStatusHandler":{"parameters":[],"annotations":{" short_description":"Gets the handler used by the protocol reader to handle status replies.","return":["\\Closure"]}},"getErrorHandler":{"parameters":[],"annotations":{" short_description":"Gets the handler used by the protocol reader to handle Redis errors.","return":["\\Closure"]}},"read":{"parameters":[],"annotations":{" short_description":"Reads a reply from the server.","return":["mixed"]}},"writeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Write a Redis command on the connection.","param":["CommandInterface $command Instance of a Redis command."]}},"__sleep":{"parameters":[],"annotations":{" short_description":""}},"__wakeup":{"parameters":[],"annotations":{" short_description":""}},"createResource":{"parameters":[],"annotations":{" short_description":"Creates the underlying resource used to communicate with Redis.","return":["mixed"]}},"unixStreamInitializer":{"parameters":{"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Initializes a UNIX stream resource.","param":["ConnectionParametersInterface $parameters Parameters used to initialize the connection."],"return":["resource"]}},"connect":{"parameters":[],"annotations":{" short_description":"Opens the connection."}},"disconnect":{"parameters":[],"annotations":{" short_description":"Closes the connection."}},"sendInitializationCommands":{"parameters":[],"annotations":{" short_description":"Sends the initialization commands to Redis when the connection is opened."}},"writeBytes":{"parameters":{"buffer":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Performs a write operation on the stream of the buffer containing a\ncommand serialized with the Redis wire protocol.","param":["string $buffer Redis wire protocol representation of a command."]}},"isConnected":{"parameters":[],"annotations":{" short_description":"Returns if the connection is open.","return":["bool"]}},"pushInitCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Pushes the instance of a Redis command to the queue of commands executed\nwhen the actual connection to a server is estabilished.","param":["CommandInterface $command Instance of a Redis command."]}},"executeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Writes a Redis command to the connection and reads back the reply.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}},"readResponse":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Reads the reply for a Redis command from the connection.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}},"onConnectionError":{"parameters":{"message":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"code":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper method to handle connection errors.","param":["string $message Error message.","int    $code    Error code."]}},"onProtocolError":{"parameters":{"message":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper method to handle protocol errors.","param":["string $message Error message."]}},"onInvalidOption":{"parameters":{"option":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper method to handle not supported connection parameters.","param":["string $option     Name of the option.","mixed  $parameters Parameters used to initialize the connection."]}},"getResource":{"parameters":[],"annotations":{" short_description":"Returns the underlying resource used to communicate with a Redis server.","return":["mixed"]}},"getParameters":{"parameters":[],"annotations":{" short_description":"Gets the parameters used to initialize the connection object.","return":["ConnectionParametersInterface"]}},"getIdentifier":{"parameters":[],"annotations":{" short_description":"Gets an identifier for the connection.","return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a string representation of the connection.","return":["string"]}}}},"AggregatedConnectionInterface":{"namespace":"Predis\\Connection","functions":{"add":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Adds a connection instance to the aggregated connection.","param":["SingleConnectionInterface $connection Instance of a connection."]}},"remove":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Removes the specified connection instance from the aggregated\nconnection.","param":["SingleConnectionInterface $connection Instance of a connection."],"return":["bool                      Returns true if the connection was in the pool."]}},"getConnection":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the actual connection instance in charge of the specified command.","param":["CommandInterface          $command Instance of a Redis command."],"return":["SingleConnectionInterface"]}},"getConnectionById":{"parameters":{"connectionId":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Retrieves a connection instance from the aggregated connection\nusing an alias.","param":["string                    $connectionId Alias of a connection"],"return":["SingleConnectionInterface"]}},"connect":{"parameters":[],"annotations":{" short_description":"Opens the connection."}},"disconnect":{"parameters":[],"annotations":{" short_description":"Closes the connection."}},"isConnected":{"parameters":[],"annotations":{" short_description":"Returns if the connection is open.","return":["bool"]}},"writeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Write a Redis command on the connection.","param":["CommandInterface $command Instance of a Redis command."]}},"readResponse":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Reads the reply for a Redis command from the connection.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}},"executeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Writes a Redis command to the connection and reads back the reply.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}}}},"ComposableConnectionInterface":{"namespace":"Predis\\Connection","functions":{"setProtocol":{"parameters":{"protocol":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sets the protocol processor used by the connection.","param":["ProtocolInterface $protocol Protocol processor."]}},"getProtocol":{"parameters":[],"annotations":{" short_description":"Gets the protocol processor used by the connection."}},"writeBytes":{"parameters":{"buffer":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Writes a buffer that contains a serialized Redis command.","param":["string $buffer Serialized Redis command."]}},"readBytes":{"parameters":{"length":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Reads a specified number of bytes from the connection.","param":["string"]}},"readLine":{"parameters":[],"annotations":{" short_description":"Reads a line from the connection.","param":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a string representation of the connection.","return":["string"]}},"getResource":{"parameters":[],"annotations":{" short_description":"Returns the underlying resource used to communicate with a Redis server.","return":["mixed"]}},"getParameters":{"parameters":[],"annotations":{" short_description":"Gets the parameters used to initialize the connection object.","return":["ConnectionParametersInterface"]}},"pushInitCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Pushes the instance of a Redis command to the queue of commands executed\nwhen the actual connection to a server is estabilished.","param":["CommandInterface $command Instance of a Redis command."]}},"read":{"parameters":[],"annotations":{" short_description":"Reads a reply from the server.","return":["mixed"]}},"connect":{"parameters":[],"annotations":{" short_description":"Opens the connection."}},"disconnect":{"parameters":[],"annotations":{" short_description":"Closes the connection."}},"isConnected":{"parameters":[],"annotations":{" short_description":"Returns if the connection is open.","return":["bool"]}},"writeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Write a Redis command on the connection.","param":["CommandInterface $command Instance of a Redis command."]}},"readResponse":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Reads the reply for a Redis command from the connection.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}},"executeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Writes a Redis command to the connection and reads back the reply.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}}}},"ConnectionParameters":{"namespace":"Predis\\Connection","functions":{"__construct":{"parameters":{"parameters":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string|array $parameters Connection parameters in the form of an URI string or a named array."]}},"getDefaults":{"parameters":[],"annotations":{" short_description":"Returns some default parameters with their values.","return":["array"]}},"getValueCasters":{"parameters":[],"annotations":{" short_description":"Returns cast functions for user-supplied parameter values.","return":["array"]}},"castBoolean":{"parameters":{"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Validates value as boolean.","param":["mixed $value Input value."],"return":["bool"]}},"castFloat":{"parameters":{"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Validates value as float.","param":["mixed $value Input value."],"return":["float"]}},"castInteger":{"parameters":{"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Validates value as integer.","param":["mixed $value Input value."],"return":["int"]}},"parseURI":{"parameters":{"uri":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses an URI string and returns an array of connection parameters.","param":["string $uri Connection string."],"return":["array"]}},"filter":{"parameters":{"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Validates and converts each value of the connection parameters array.","param":["array $parameters Connection parameters."],"return":["array"]}},"__get":{"parameters":{"parameter":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the value of the specified parameter.","param":["string $parameter Name of the parameter."],"return":["mixed"]}},"__isset":{"parameters":{"parameter":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks if the specified parameters is set.","param":["string $parameter Name of the parameter."],"return":["bool"]}},"toArray":{"parameters":[],"annotations":{" short_description":"Returns an array representation of the connection parameters.","return":["array"]}},"__sleep":{"parameters":[],"annotations":{" short_description":""}}}},"WebdisConnection":{"namespace":"Predis\\Connection","functions":{"__construct":{"parameters":{"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["ConnectionParametersInterface $parameters Parameters used to initialize the connection."]}},"__destruct":{"parameters":[],"annotations":{" short_description":"Frees the underlying cURL and protocol reader resources when PHP's\ngarbage collector kicks in."}},"throwNotSupportedException":{"parameters":{"function":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper method used to throw on unsupported methods."}},"checkExtensions":{"parameters":[],"annotations":{" short_description":"Checks if the cURL and phpiredis extensions are loaded in PHP."}},"initializeCurl":{"parameters":{"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Initializes cURL.","param":["ConnectionParametersInterface $parameters Parameters used to initialize the connection."],"return":["resource"]}},"initializeReader":{"parameters":{"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Initializes phpiredis' protocol reader.","param":["ConnectionParametersInterface $parameters Parameters used to initialize the connection."],"return":["resource"]}},"getStatusHandler":{"parameters":[],"annotations":{" short_description":"Gets the handler used by the protocol reader to handle status replies.","return":["\\Closure"]}},"getErrorHandler":{"parameters":[],"annotations":{" short_description":"Gets the handler used by the protocol reader to handle Redis errors.","return":["\\Closure"]}},"feedReader":{"parameters":{"resource":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"buffer":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Feeds phpredis' reader resource with the data read from the network.","param":["resource $resource Reader resource.","string   $buffer   Buffer with the reply read from the network."],"return":["int"]}},"connect":{"parameters":[],"annotations":{" short_description":"Opens the connection."}},"disconnect":{"parameters":[],"annotations":{" short_description":"Closes the connection."}},"isConnected":{"parameters":[],"annotations":{" short_description":"Returns if the connection is open.","return":["bool"]}},"getCommandId":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks if the specified command is supported by this connection class.","param":["CommandInterface $command The instance of a Redis command."],"return":["string"]}},"writeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Write a Redis command on the connection.","param":["CommandInterface $command Instance of a Redis command."]}},"readResponse":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Reads the reply for a Redis command from the connection.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}},"executeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Writes a Redis command to the connection and reads back the reply.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}},"getResource":{"parameters":[],"annotations":{" short_description":"Returns the underlying resource used to communicate with a Redis server.","return":["mixed"]}},"getParameters":{"parameters":[],"annotations":{" short_description":"Gets the parameters used to initialize the connection object.","return":["ConnectionParametersInterface"]}},"pushInitCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Pushes the instance of a Redis command to the queue of commands executed\nwhen the actual connection to a server is estabilished.","param":["CommandInterface $command Instance of a Redis command."]}},"read":{"parameters":[],"annotations":{" short_description":"Reads a reply from the server.","return":["mixed"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a string representation of the connection.","return":["string"]}},"__sleep":{"parameters":[],"annotations":{" short_description":""}},"__wakeup":{"parameters":[],"annotations":{" short_description":""}}}},"RedisCluster":{"namespace":"Predis\\Connection","functions":{"__construct":{"parameters":{"connections":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["ConnectionFactoryInterface $connections Connection factory object."]}},"isConnected":{"parameters":[],"annotations":{" short_description":"Returns if the connection is open.","return":["bool"]}},"connect":{"parameters":[],"annotations":{" short_description":"Opens the connection."}},"disconnect":{"parameters":[],"annotations":{" short_description":"Closes the connection."}},"add":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Adds a connection instance to the aggregated connection.","param":["SingleConnectionInterface $connection Instance of a connection."]}},"remove":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Removes the specified connection instance from the aggregated\nconnection.","param":["SingleConnectionInterface $connection Instance of a connection."],"return":["bool                      Returns true if the connection was in the pool."]}},"removeById":{"parameters":{"connectionID":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Removes a connection instance by using its identifier.","param":["string $connectionID Connection identifier."],"return":["bool   True if the connection was in the pool."]}},"buildSlotsMap":{"parameters":[],"annotations":{" short_description":"Generates the current slots map by guessing the cluster configuration out\nof the connection parameters of the connections in the pool."," long_description":"Generation is based on the same algorithm used by Redis to generate the\ncluster, so it is most effective when all of the connections supplied on\ninitialization have the \"slots\" parameter properly set accordingly to the\ncurrent cluster configuration."}},"askClusterNodes":{"parameters":{"connection":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Generates an updated slots map fetching the cluster configuration using\nthe CLUSTER SLOTS command against the specified node or a random one from\nthe pool.","param":["SingleConnectionInterface $connection Optional connection instance."],"return":["array"]}},"getSlotsMap":{"parameters":[],"annotations":{" short_description":"Returns the current slots map for the cluster.","return":["array"]}},"setSlots":{"parameters":{"first":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"last":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"connection":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Pre-associates a connection to a slots range to avoid runtime guessing.","param":["int                              $first      Initial slot of the range.","int                              $last       Last slot of the range.","SingleConnectionInterface|string $connection ID or connection instance."]}},"guessNode":{"parameters":{"slot":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Guesses the correct node associated to a given slot using a precalculated\nslots map, falling back to the same logic used by Redis to initialize a\ncluster (best-effort).","param":["int    $slot Slot index."],"return":["string Connection ID."]}},"createConnection":{"parameters":{"connectionID":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Creates a new connection instance from the given connection ID.","param":["string                    $connectionID Identifier for the connection."],"return":["SingleConnectionInterface"]}},"getConnection":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the actual connection instance in charge of the specified command.","param":["CommandInterface          $command Instance of a Redis command."],"return":["SingleConnectionInterface"]}},"getConnectionBySlot":{"parameters":{"slot":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the connection currently associated to a given slot.","param":["int                       $slot Slot index."],"return":["SingleConnectionInterface"]}},"getConnectionById":{"parameters":{"connectionID":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Retrieves a connection instance from the aggregated connection\nusing an alias.","param":["string                    $connectionId Alias of a connection"],"return":["SingleConnectionInterface"]}},"getRandomConnection":{"parameters":[],"annotations":{" short_description":"Returns a random connection from the pool.","return":["SingleConnectionInterface"]}},"move":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"slot":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Permanently associates the connection instance to a new slot.\nThe connection is added to the connections pool if not yet included.","param":["SingleConnectionInterface $connection Connection instance.","int                       $slot       Target slot index."]}},"onErrorResponse":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"error":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Handles -ERR responses returned by Redis.","param":["CommandInterface       $command Command that generated the -ERR response.","ResponseErrorInterface $error   Redis error response object."],"return":["mixed"]}},"onMovedResponse":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"details":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Handles -MOVED responses by executing again the command against the node\nindicated by the Redis response.","param":["CommandInterface $command Command that generated the -MOVED response.","string           $details Parameters of the -MOVED response."],"return":["mixed"]}},"onAskResponse":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"details":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Handles -ASK responses by executing again the command against the node\nindicated by the Redis response.","param":["CommandInterface $command Command that generated the -ASK response.","string           $details Parameters of the -ASK response."],"return":["mixed"]}},"writeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Write a Redis command on the connection.","param":["CommandInterface $command Instance of a Redis command."]}},"readResponse":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Reads the reply for a Redis command from the connection.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}},"executeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Writes a Redis command to the connection and reads back the reply.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}},"count":{"parameters":[],"annotations":{" short_description":""}},"getIterator":{"parameters":[],"annotations":{" short_description":""}},"getCommandHashStrategy":{"parameters":[],"annotations":{" short_description":"Returns the underlying hash strategy used to hash commands by their keys.","return":["CommandHashStrategyInterface"]}},"enableClusterNodes":{"parameters":{"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Enables automatic fetching of the current slots map from one of the nodes\nusing the CLUSTER SLOTS command. This option is disabled by default but\nasking the current slots map to Redis upon -MOVED responses may reduce\noverhead by eliminating the trial-and-error nature of the node guessing\nprocedure, mostly when targeting many keys that would end up in a lot of\nredirections."," long_description":"The slots map can still be manually fetched using the askClusterNodes()\nmethod whether or not this option is enabled.","param":["bool $value Enable or disable the use of CLUSTER SLOTS."]}},"setDefaultParameters":{"parameters":{"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets a default array of connection parameters to be applied when creating\nnew connection instances on the fly when they are not part of the initial\npool supplied upon cluster initialization."," long_description":"These parameters are not applied to connections added to the pool using\nthe add() method.","param":["array $parameters Array of connection parameters."]}}}},"ConnectionException":{"namespace":"Predis\\Connection","functions":{"__construct":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"code":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"innerException":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["SingleConnectionInterface $connection     Connection that generated the exception.","string                    $message        Error message.","int                       $code           Error code.","\\Exception                $innerException Inner exception for wrapping the original error."]}},"getConnection":{"parameters":[],"annotations":{" short_description":"Gets the connection that generated the exception.","return":["SingleConnectionInterface"]}},"shouldResetConnection":{"parameters":[],"annotations":{" short_description":"Indicates if the receiver should reset the underlying connection.","return":["bool"]}},"handle":{"parameters":{"exception":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Offers a generic and reusable method to handle exceptions generated by\na connection object.","param":["CommunicationException $exception Exception."]}},"__clone":{"parameters":[],"annotations":[]},"getMessage":{"parameters":[],"annotations":[]},"getCode":{"parameters":[],"annotations":[]},"getFile":{"parameters":[],"annotations":[]},"getLine":{"parameters":[],"annotations":[]},"getTrace":{"parameters":[],"annotations":[]},"getPrevious":{"parameters":[],"annotations":[]},"getTraceAsString":{"parameters":[],"annotations":[]},"__toString":{"parameters":[],"annotations":[]}}},"MasterSlaveReplication":{"namespace":"Predis\\Connection","functions":{"__construct":{"parameters":{"strategy":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":[]},"check":{"parameters":[],"annotations":{" short_description":"Checks if one master and at least one slave have been defined."}},"reset":{"parameters":[],"annotations":{" short_description":"Resets the connection state."}},"add":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Adds a connection instance to the aggregated connection.","param":["SingleConnectionInterface $connection Instance of a connection."]}},"remove":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Removes the specified connection instance from the aggregated\nconnection.","param":["SingleConnectionInterface $connection Instance of a connection."],"return":["bool                      Returns true if the connection was in the pool."]}},"getConnection":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the actual connection instance in charge of the specified command.","param":["CommandInterface          $command Instance of a Redis command."],"return":["SingleConnectionInterface"]}},"getConnectionById":{"parameters":{"connectionId":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Retrieves a connection instance from the aggregated connection\nusing an alias.","param":["string                    $connectionId Alias of a connection"],"return":["SingleConnectionInterface"]}},"switchTo":{"parameters":{"connection":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Switches the internal connection object being used.","param":["string $connection Alias of a connection"]}},"getCurrent":{"parameters":[],"annotations":{" short_description":"Retrieves the connection object currently being used.","return":["SingleConnectionInterface"]}},"getMaster":{"parameters":[],"annotations":{" short_description":"Retrieves the connection object to the master Redis server.","return":["SingleConnectionInterface"]}},"getSlaves":{"parameters":[],"annotations":{" short_description":"Retrieves a list of connection objects to slaves Redis servers.","return":["SingleConnectionInterface"]}},"getReplicationStrategy":{"parameters":[],"annotations":{" short_description":"Returns the underlying replication strategy.","return":["ReplicationStrategy"]}},"pickSlave":{"parameters":[],"annotations":{" short_description":"Returns a random slave.","return":["SingleConnectionInterface"]}},"isConnected":{"parameters":[],"annotations":{" short_description":"Returns if the connection is open.","return":["bool"]}},"connect":{"parameters":[],"annotations":{" short_description":"Opens the connection."}},"disconnect":{"parameters":[],"annotations":{" short_description":"Closes the connection."}},"writeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Write a Redis command on the connection.","param":["CommandInterface $command Instance of a Redis command."]}},"readResponse":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Reads the reply for a Redis command from the connection.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}},"executeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Writes a Redis command to the connection and reads back the reply.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}},"__sleep":{"parameters":[],"annotations":{" short_description":""}}}},"PredisCluster":{"namespace":"Predis\\Connection","functions":{"__construct":{"parameters":{"distributor":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["DistributionStrategyInterface $distributor Distribution strategy used by the cluster."]}},"isConnected":{"parameters":[],"annotations":{" short_description":"Returns if the connection is open.","return":["bool"]}},"connect":{"parameters":[],"annotations":{" short_description":"Opens the connection."}},"disconnect":{"parameters":[],"annotations":{" short_description":"Closes the connection."}},"add":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Adds a connection instance to the aggregated connection.","param":["SingleConnectionInterface $connection Instance of a connection."]}},"remove":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Removes the specified connection instance from the aggregated\nconnection.","param":["SingleConnectionInterface $connection Instance of a connection."],"return":["bool                      Returns true if the connection was in the pool."]}},"removeById":{"parameters":{"connectionId":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Removes a connection instance using its alias or index.","param":["string $connectionId Alias or index of a connection."],"return":["bool   Returns true if the connection was in the pool."]}},"getConnection":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the actual connection instance in charge of the specified command.","param":["CommandInterface          $command Instance of a Redis command."],"return":["SingleConnectionInterface"]}},"getConnectionById":{"parameters":{"connectionId":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Retrieves a connection instance from the aggregated connection\nusing an alias.","param":["string                    $connectionId Alias of a connection"],"return":["SingleConnectionInterface"]}},"getConnectionByKey":{"parameters":{"key":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Retrieves a connection instance from the cluster using a key.","param":["string                    $key Key of a Redis value."],"return":["SingleConnectionInterface"]}},"getCommandHashStrategy":{"parameters":[],"annotations":{" short_description":"Returns the underlying command hash strategy used to hash\ncommands by their keys.","return":["CommandHashStrategyInterface"]}},"count":{"parameters":[],"annotations":{" short_description":""}},"getIterator":{"parameters":[],"annotations":{" short_description":""}},"writeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Write a Redis command on the connection.","param":["CommandInterface $command Instance of a Redis command."]}},"readResponse":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Reads the reply for a Redis command from the connection.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}},"executeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Writes a Redis command to the connection and reads back the reply.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}},"executeCommandOnNodes":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Executes the specified Redis command on all the nodes of a cluster.","param":["CommandInterface $command A Redis command."],"return":["array"]}}}},"RedisClusterTest":{"namespace":"Predis\\Connection","functions":{"testExposesCommandHashStrategy":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAddingConnectionsToCluster":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRemovingConnectionsFromCluster":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRemovingConnectionsFromClusterByAlias":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCountReturnsNumberOfConnectionsInPool":{"parameters":[],"annotations":{"group":["disconnected"]}},"testConnectPicksRandomConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testDisconnectForcesAllConnectionsToDisconnect":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIsConnectedReturnsTrueIfAtLeastOneConnectionIsOpen":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIsConnectedReturnsFalseIfAllConnectionsAreClosed":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCanReturnAnIteratorForConnections":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCanAssignConnectionsToCustomSlots":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAddingConnectionResetsSlotsMap":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRemovingConnectionResetsSlotsMap":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCanAssignConnectionsToCustomSlotsFromParameters":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsCorrectConnectionUsingSlotID":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsCorrectConnectionUsingCommandInstance":{"parameters":[],"annotations":{"group":["disconnected"]}},"testWritesCommandToCorrectConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReadsCommandFromCorrectConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSupportsKeyTags":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAskResponseWithConnectionInPool":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAskResponseWithConnectionNotInPool":{"parameters":[],"annotations":{"group":["disconnected"]}},"testMovedResponseWithConnectionInPool":{"parameters":[],"annotations":{"group":["disconnected"]}},"testMovedResponseWithConnectionNotInPool":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFetchSlotsMapFromClusterWithClusterSlotsCommand":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAskSlotsMapToRedisClusterOnMovedResponseByDefault":{"parameters":[],"annotations":{"group":["disconnected"]}},"testThrowsExceptionOnNonSupportedCommand":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\NotSupportedException"],"expectedExceptionMessage":["Cannot use PING with redis-cluster"]}},"testCanBeSerialized":{"parameters":[],"annotations":{"group":["disconnected"]}},"getMockConnection":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a base mocked connection from Predis\\Connection\\SingleConnectionInterface.","param":["mixed $parameters Optional parameters."],"return":["mixed"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"WebdisConnectionTest":{"namespace":"Predis\\Connection","functions":{"testIsConnectedAlwaysReturnsTrue":{"parameters":[],"annotations":{"group":["disconnected"]}},"testWritingCommandsIsNotSupported":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\NotSupportedException"],"expectedExceptionMessage":["The method Predis\\Connection\\WebdisConnection::writeCommand() is not supported"]}},"testReadingResponsesIsNotSupported":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\NotSupportedException"],"expectedExceptionMessage":["The method Predis\\Connection\\WebdisConnection::readResponse() is not supported"]}},"testReadingFromConnectionIsNotSupported":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\NotSupportedException"],"expectedExceptionMessage":["The method Predis\\Connection\\WebdisConnection::read() is not supported"]}},"testPushingInitCommandsIsNotSupported":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\NotSupportedException"],"expectedExceptionMessage":["The method Predis\\Connection\\WebdisConnection::pushInitCommand() is not supported"]}},"testRejectCommandSelect":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\NotSupportedException"],"expectedExceptionMessage":["Disabled command: SELECT"]}},"testRejectCommandAuth":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\NotSupportedException"],"expectedExceptionMessage":["Disabled command: AUTH"]}},"testCanBeSerialized":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExecutesCommandsOnServer":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowExceptionWhenUnableToConnect":{"parameters":[],"annotations":{"medium":[""],"group":["disconnected","slow"],"expectedException":["Predis\\Connection\\ConnectionException"]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["Array Default connection parameters."]}},"getConnection":{"parameters":{"profile":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":true,"canBePassedByValue":false,"isArray":false},"parameters":{"default":[],"isNull":false,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new instance of a connection instance.","param":["mixed            $profile    Redis profile.","array            $parameters Additional connection parameters."],"return":["WebdisConnection"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ConnectionExceptionTest":{"namespace":"Predis\\Connection","functions":{"getException":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"code":{"default":0,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"inner":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a connection exception instance.","param":["Connection\\SingleConnectionInterface $connection Connection instance.","string                               $message    Exception message.","int                                  $code       Exception code.","\\Exception                           $inner      Inner exception."],"return":["\\Exception"]}},"testExceptionMessage":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExceptionConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testShouldResetConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCommunicationExceptionHandling":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\CommunicationException"],"expectedExceptionMessage":["Communication error"]}},"getMockedConnectionBase":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a mocked connection instance.","param":["mixed                     $parameters Connection parameters."],"return":["SingleConnectionInterface"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"MasterSlaveReplicationTest":{"namespace":"Predis\\Connection","functions":{"testAddingConnectionsToReplication":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRemovingConnectionsFromReplication":{"parameters":[],"annotations":{"group":["disconnected"]}},"testThrowsExceptionOnEmptyReplication":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["RuntimeException"],"expectedExceptionMessage":["Replication needs a master and at least one slave"]}},"testThrowsExceptionOnMissingMaster":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["RuntimeException"],"expectedExceptionMessage":["Replication needs a master and at least one slave"]}},"testThrowsExceptionOnMissingSlave":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["RuntimeException"],"expectedExceptionMessage":["Replication needs a master and at least one slave"]}},"testConnectForcesConnectionToOneOfSlaves":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIsConnectedReturnsTrueIfAtLeastOneConnectionIsOpen":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIsConnectedReturnsFalseIfAllConnectionsAreClosed":{"parameters":[],"annotations":{"group":["disconnected"]}},"testDisconnectForcesCurrentConnectionToDisconnect":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCanSwitchConnectionByAlias":{"parameters":[],"annotations":{"group":["disconnected"]}},"testThrowsErrorWhenSwitchingToUnknownConnection":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["InvalidArgumentException"],"expectedExceptionMessage":["The specified connection is not valid"]}},"testUsesSlavesOnReadOnlyCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"testUsesMasterOnWriteCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSwitchesFromSlaveToMasterOnWriteCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"testWritesCommandToCorrectConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReadsCommandFromCorrectConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExecutesCommandOnCorrectConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testWatchTriggersSwitchToMasterConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testMultiTriggersSwitchToMasterConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testEvalTriggersSwitchToMasterConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSortTriggersSwitchToMasterConnectionOnStoreModifier":{"parameters":[],"annotations":{"group":["disconnected"]}},"testThrowsExceptionOnNonSupportedCommand":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\NotSupportedException"],"expectedExceptionMessage":["The command INFO is not allowed in replication mode"]}},"testCanOverrideReadOnlyFlagForCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAcceptsCallableToOverrideReadOnlyFlagForCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCanSetReadOnlyFlagForEvalScripts":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExposesReplicationStrategy":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCanBeSerialized":{"parameters":[],"annotations":{"group":["disconnected"]}},"getMockConnection":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a base mocked connection from Predis\\Connection\\SingleConnectionInterface.","param":["mixed $parameters Optional parameters."],"return":["mixed"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ConnectionFactoryTest":{"namespace":"Predis\\Connection","functions":{"testImplementsCorrectInterface":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCreateConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCreateConnectionWithNullParameters":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCreateConnectionWithArrayParameters":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCreateConnectionWithStringURI":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCreateConnectionWithoutInitializationCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCreateConnectionWithInitializationCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCreateConnectionWithDatabaseAndPasswordButNoProfile":{"parameters":[],"annotations":{"group":["disconnected"],"todo":["This test smells but there's no other way around it right now."]}},"testCreateUndefinedConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testDefineConnectionWithFQN":{"parameters":[],"annotations":{"group":["disconnected"]}},"testDefineConnectionWithCallable":{"parameters":[],"annotations":{"group":["disconnected"]}},"testDefineConnectionWithInvalidArgument":{"parameters":[],"annotations":{"group":["disconnected"]}},"testUndefineDefinedConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testUndefineUndefinedConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testDefineAndUndefineConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAggregatedConnectionSkipCreationOnConnectionInstance":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAggregatedConnectionWithMixedParameters":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAggregatedConnectionWithEmptyListOfParameters":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAggregatedConnectionWithServerProfileArgument":{"parameters":[],"annotations":{"group":["disconnected"],"todo":["We might want to add a test for SingleConnectionInterface::pushInitCommand()."]}},"getMockConnectionClass":{"parameters":[],"annotations":{" short_description":"Returns a mocked Predis\\Connection\\SingleConnectionInterface.","return":["Array Mock instance and class name"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ComposableStreamConnectionTest":{"namespace":"Predis\\Connection","functions":{"testConstructorDoesNotOpenConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExposesParameters":{"parameters":[],"annotations":{"group":["disconnected"]}},"testThrowsExceptionOnInvalidScheme":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["InvalidArgumentException"],"expectedExceptionMessage":["Invalid scheme: udp"]}},"testCanBeSerialized":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReadsMultibulkRepliesAsIterators":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnProtocolDesynchronizationErrors":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\Protocol\\ProtocolException"],"expectedExceptionMessage":["Unknown prefix: 'P'"]}},"getConnection":{"parameters":{"profile":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":true,"canBePassedByValue":false,"isArray":false},"initialize":{"default":false,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"parameters":{"default":[],"isNull":false,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new instance of a connection instance.","param":["ServerProfile    $profile    Reference to the server profile instance.","bool             $initialize Push default initialization commands (SELECT and FLUSHDB).","array            $parameters Additional connection parameters."],"return":["StreamConnection"]}},"testThrowExceptionWhenUnableToConnect":{"parameters":[],"annotations":{"group":["disconnected","slow"],"expectedException":["Predis\\Connection\\ConnectionException"]}},"testConnectForcesConnection":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnConnectWhenAlreadyConnected":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ClientException"],"expectedExceptionMessage":["Connection already estabilished"]}},"testDisconnectForcesDisconnection":{"parameters":[],"annotations":{"group":["connected"]}},"testDoesNotThrowExceptionOnDisconnectWhenAlreadyDisconnected":{"parameters":[],"annotations":{"group":["disconnected"]}},"testGetResourceForcesConnection":{"parameters":[],"annotations":{"group":["connected"]}},"testSendingCommandForcesConnection":{"parameters":[],"annotations":{"group":["connected"]}},"testExecutesCommandOnServer":{"parameters":[],"annotations":{"group":["connected"]}},"testWritesCommandToServer":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsCommandFromServer":{"parameters":[],"annotations":{"group":["connected"]}},"testIsAbleToWriteMultipleCommandsAndReadThemBackForPipelining":{"parameters":[],"annotations":{"group":["connected"]}},"testSendsInitializationCommandsOnConnection":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsStatusReplies":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsBulkReplies":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsIntegerReplies":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsErrorRepliesAsResponseErrorObjects":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsMultibulkRepliesAsArrays":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnConnectionTimeout":{"parameters":[],"annotations":{"group":["connected","slow"],"expectedException":["Predis\\Connection\\ConnectionException"]}},"testThrowsExceptionOnReadWriteTimeout":{"parameters":[],"annotations":{"group":["connected","slow"],"expectedException":["Predis\\Connection\\ConnectionException"]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["Array Default connection parameters."]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"StreamConnectionTest":{"namespace":"Predis\\Connection","functions":{"testConstructorDoesNotOpenConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExposesParameters":{"parameters":[],"annotations":{"group":["disconnected"]}},"testThrowsExceptionOnInvalidScheme":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["InvalidArgumentException"],"expectedExceptionMessage":["Invalid scheme: udp"]}},"testCanBeSerialized":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAcceptsTcpNodelayParameter":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsMultibulkRepliesAsIterators":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnProtocolDesynchronizationErrors":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\Protocol\\ProtocolException"],"expectedExceptionMessage":["Unknown prefix: 'P'"]}},"getConnection":{"parameters":{"profile":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":true,"canBePassedByValue":false,"isArray":false},"initialize":{"default":false,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"parameters":{"default":[],"isNull":false,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new instance of a connection instance.","param":["ServerProfile    $profile    Reference to the server profile instance.","bool             $initialize Push default initialization commands (SELECT and FLUSHDB).","array            $parameters Additional connection parameters."],"return":["StreamConnection"]}},"testThrowExceptionWhenUnableToConnect":{"parameters":[],"annotations":{"group":["disconnected","slow"],"expectedException":["Predis\\Connection\\ConnectionException"]}},"testConnectForcesConnection":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnConnectWhenAlreadyConnected":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ClientException"],"expectedExceptionMessage":["Connection already estabilished"]}},"testDisconnectForcesDisconnection":{"parameters":[],"annotations":{"group":["connected"]}},"testDoesNotThrowExceptionOnDisconnectWhenAlreadyDisconnected":{"parameters":[],"annotations":{"group":["disconnected"]}},"testGetResourceForcesConnection":{"parameters":[],"annotations":{"group":["connected"]}},"testSendingCommandForcesConnection":{"parameters":[],"annotations":{"group":["connected"]}},"testExecutesCommandOnServer":{"parameters":[],"annotations":{"group":["connected"]}},"testWritesCommandToServer":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsCommandFromServer":{"parameters":[],"annotations":{"group":["connected"]}},"testIsAbleToWriteMultipleCommandsAndReadThemBackForPipelining":{"parameters":[],"annotations":{"group":["connected"]}},"testSendsInitializationCommandsOnConnection":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsStatusReplies":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsBulkReplies":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsIntegerReplies":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsErrorRepliesAsResponseErrorObjects":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsMultibulkRepliesAsArrays":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnConnectionTimeout":{"parameters":[],"annotations":{"group":["connected","slow"],"expectedException":["Predis\\Connection\\ConnectionException"]}},"testThrowsExceptionOnReadWriteTimeout":{"parameters":[],"annotations":{"group":["connected","slow"],"expectedException":["Predis\\Connection\\ConnectionException"]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["Array Default connection parameters."]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"PhpiredisStreamConnectionTest":{"namespace":"Predis\\Connection","functions":{"testConstructorDoesNotOpenConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExposesParameters":{"parameters":[],"annotations":{"group":["disconnected"]}},"testThrowsExceptionOnInvalidScheme":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["InvalidArgumentException"],"expectedExceptionMessage":["Invalid scheme: udp"]}},"testCanBeSerialized":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAcceptsTcpNodelayParameter":{"parameters":[],"annotations":{"group":["connected"]}},"testExecutesCommandsOnServer":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnProtocolDesynchronizationErrors":{"parameters":[],"annotations":{"medium":[""],"group":["connected"],"expectedException":["Predis\\Protocol\\ProtocolException"],"expectedExceptionMessage":["Protocol error, got \"P\" as reply type byte"]}},"getConnection":{"parameters":{"profile":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":true,"canBePassedByValue":false,"isArray":false},"initialize":{"default":false,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"parameters":{"default":[],"isNull":false,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new instance of a connection instance.","param":["ServerProfile    $profile    Reference to the server profile instance.","bool             $initialize Push default initialization commands (SELECT and FLUSHDB).","array            $parameters Additional connection parameters."],"return":["StreamConnection"]}},"testThrowExceptionWhenUnableToConnect":{"parameters":[],"annotations":{"group":["disconnected","slow"],"expectedException":["Predis\\Connection\\ConnectionException"]}},"testConnectForcesConnection":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnConnectWhenAlreadyConnected":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ClientException"],"expectedExceptionMessage":["Connection already estabilished"]}},"testDisconnectForcesDisconnection":{"parameters":[],"annotations":{"group":["connected"]}},"testDoesNotThrowExceptionOnDisconnectWhenAlreadyDisconnected":{"parameters":[],"annotations":{"group":["disconnected"]}},"testGetResourceForcesConnection":{"parameters":[],"annotations":{"group":["connected"]}},"testSendingCommandForcesConnection":{"parameters":[],"annotations":{"group":["connected"]}},"testExecutesCommandOnServer":{"parameters":[],"annotations":{"group":["connected"]}},"testWritesCommandToServer":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsCommandFromServer":{"parameters":[],"annotations":{"group":["connected"]}},"testIsAbleToWriteMultipleCommandsAndReadThemBackForPipelining":{"parameters":[],"annotations":{"group":["connected"]}},"testSendsInitializationCommandsOnConnection":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsStatusReplies":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsBulkReplies":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsIntegerReplies":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsErrorRepliesAsResponseErrorObjects":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsMultibulkRepliesAsArrays":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnConnectionTimeout":{"parameters":[],"annotations":{"group":["connected","slow"],"expectedException":["Predis\\Connection\\ConnectionException"]}},"testThrowsExceptionOnReadWriteTimeout":{"parameters":[],"annotations":{"group":["connected","slow"],"expectedException":["Predis\\Connection\\ConnectionException"]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["Array Default connection parameters."]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"PredisClusterTest":{"namespace":"Predis\\Connection","functions":{"testExposesCommandHashStrategy":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAddingConnectionsToCluster":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAddingConnectionsToClusterUsesConnectionAlias":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRemovingConnectionsFromCluster":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRemovingConnectionsFromClusterByAlias":{"parameters":[],"annotations":{"group":["disconnected"]}},"testConnectForcesAllConnectionsToConnect":{"parameters":[],"annotations":{"group":["disconnected"]}},"testDisconnectForcesAllConnectionsToDisconnect":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIsConnectedReturnsTrueIfAtLeastOneConnectionIsOpen":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIsConnectedReturnsFalseIfAllConnectionsAreClosed":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCanReturnAnIteratorForConnections":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsCorrectConnectionUsingKey":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsCorrectConnectionUsingCommandInstance":{"parameters":[],"annotations":{"group":["disconnected"]}},"testThrowsExceptionOnNonShardableCommand":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\NotSupportedException"],"expectedExceptionMessage":["Cannot use PING with a cluster of connections"]}},"testWritesCommandToCorrectConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReadsCommandFromCorrectConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExecutesCommandOnCorrectConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExecuteCommandOnEachNode":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCanBeSerialized":{"parameters":[],"annotations":{"group":["disconnected"]}},"getMockConnection":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a base mocked connection from Predis\\Connection\\SingleConnectionInterface.","param":["mixed $parameters Optional parameters."],"return":["mixed"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"PhpiredisConnectionTest":{"namespace":"Predis\\Connection","functions":{"testConstructorDoesNotOpenConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExposesParameters":{"parameters":[],"annotations":{"group":["disconnected"]}},"testThrowsExceptionOnInvalidScheme":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["InvalidArgumentException"],"expectedExceptionMessage":["Invalid scheme: udp"]}},"testCanBeSerialized":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExecutesCommandsOnServer":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnUnresolvableHostname":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\Connection\\ConnectionException"],"expectedExceptionMessage":["Cannot resolve the address of 'bogus.tld'."]}},"testThrowsExceptionOnProtocolDesynchronizationErrors":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\Protocol\\ProtocolException"],"expectedExceptionMessage":["Protocol error, got \"P\" as reply type byte"]}},"getConnection":{"parameters":{"profile":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":true,"canBePassedByValue":false,"isArray":false},"initialize":{"default":false,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"parameters":{"default":[],"isNull":false,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new instance of a connection instance.","param":["ServerProfile    $profile    Reference to the server profile instance.","bool             $initialize Push default initialization commands (SELECT and FLUSHDB).","array            $parameters Additional connection parameters."],"return":["StreamConnection"]}},"testThrowExceptionWhenUnableToConnect":{"parameters":[],"annotations":{"group":["disconnected","slow"],"expectedException":["Predis\\Connection\\ConnectionException"]}},"testConnectForcesConnection":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnConnectWhenAlreadyConnected":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ClientException"],"expectedExceptionMessage":["Connection already estabilished"]}},"testDisconnectForcesDisconnection":{"parameters":[],"annotations":{"group":["connected"]}},"testDoesNotThrowExceptionOnDisconnectWhenAlreadyDisconnected":{"parameters":[],"annotations":{"group":["disconnected"]}},"testGetResourceForcesConnection":{"parameters":[],"annotations":{"group":["connected"]}},"testSendingCommandForcesConnection":{"parameters":[],"annotations":{"group":["connected"]}},"testExecutesCommandOnServer":{"parameters":[],"annotations":{"group":["connected"]}},"testWritesCommandToServer":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsCommandFromServer":{"parameters":[],"annotations":{"group":["connected"]}},"testIsAbleToWriteMultipleCommandsAndReadThemBackForPipelining":{"parameters":[],"annotations":{"group":["connected"]}},"testSendsInitializationCommandsOnConnection":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsStatusReplies":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsBulkReplies":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsIntegerReplies":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsErrorRepliesAsResponseErrorObjects":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsMultibulkRepliesAsArrays":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnConnectionTimeout":{"parameters":[],"annotations":{"group":["connected","slow"],"expectedException":["Predis\\Connection\\ConnectionException"]}},"testThrowsExceptionOnReadWriteTimeout":{"parameters":[],"annotations":{"group":["connected","slow"],"expectedException":["Predis\\Connection\\ConnectionException"]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["Array Default connection parameters."]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ConnectionParametersTest":{"namespace":"Predis\\Connection","functions":{"testDefaultValues":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIsSet":{"parameters":[],"annotations":{"group":["disconnected"]}},"testUserDefinedParameters":{"parameters":[],"annotations":{"group":["disconnected"]}},"testConstructWithUriString":{"parameters":[],"annotations":{"group":["disconnected"]}},"testToArray":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSerialization":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParsingURI":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParsingUnixDomainURI":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParsingURIWithIncompletePairInQueryString":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParsingURIWithMoreThanOneEqualSignInQueryStringPairValue":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParsingURIWhenQueryStringHasBracketsInFieldnames":{"parameters":[],"annotations":{"group":["disconnected"]}},"testParsingURIThrowOnInvalidURI":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\ClientException"],"expectedExceptionMessage":["Invalid URI: tcp:\/\/invalid:uri"]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["Array Default connection parameters."]}},"getParametersString":{"parameters":{"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns an URI string representation of the specified connection parameters.","param":["Array  $parameters Array of connection parameters."],"return":["String URI string."]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"PredisConnectionTestCase":{"namespace":"Predis\\Connection","functions":{"testThrowExceptionWhenUnableToConnect":{"parameters":[],"annotations":{"group":["disconnected","slow"],"expectedException":["Predis\\Connection\\ConnectionException"]}},"testConnectForcesConnection":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnConnectWhenAlreadyConnected":{"parameters":[],"annotations":{"group":["connected"],"expectedException":["Predis\\ClientException"],"expectedExceptionMessage":["Connection already estabilished"]}},"testDisconnectForcesDisconnection":{"parameters":[],"annotations":{"group":["connected"]}},"testDoesNotThrowExceptionOnDisconnectWhenAlreadyDisconnected":{"parameters":[],"annotations":{"group":["disconnected"]}},"testGetResourceForcesConnection":{"parameters":[],"annotations":{"group":["connected"]}},"testSendingCommandForcesConnection":{"parameters":[],"annotations":{"group":["connected"]}},"testExecutesCommandOnServer":{"parameters":[],"annotations":{"group":["connected"]}},"testWritesCommandToServer":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsCommandFromServer":{"parameters":[],"annotations":{"group":["connected"]}},"testIsAbleToWriteMultipleCommandsAndReadThemBackForPipelining":{"parameters":[],"annotations":{"group":["connected"]}},"testSendsInitializationCommandsOnConnection":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsStatusReplies":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsBulkReplies":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsIntegerReplies":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsErrorRepliesAsResponseErrorObjects":{"parameters":[],"annotations":{"group":["connected"]}},"testReadsMultibulkRepliesAsArrays":{"parameters":[],"annotations":{"group":["connected"]}},"testThrowsExceptionOnConnectionTimeout":{"parameters":[],"annotations":{"group":["connected","slow"],"expectedException":["Predis\\Connection\\ConnectionException"]}},"testThrowsExceptionOnReadWriteTimeout":{"parameters":[],"annotations":{"group":["connected","slow"],"expectedException":["Predis\\Connection\\ConnectionException"]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["Array Default connection parameters."]}},"getConnection":{"parameters":{"profile":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":true,"canBePassedByValue":false,"isArray":false},"initialize":{"default":false,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"parameters":{"default":[],"isNull":false,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a new instance of a connection instance.","param":["ServerProfile    $profile    Reference to the server profile instance.","bool             $initialize Push default initialization commands (SELECT and FLUSHDB).","array            $parameters Additional connection parameters."],"return":["StreamConnection"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ReplicationStrategy":{"namespace":"Predis\\Replication","functions":{"__construct":{"parameters":[],"annotations":[]},"isReadOperation":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns if the specified command performs a read-only operation\nagainst a key stored on Redis.","param":["CommandInterface $command Instance of Redis command."],"return":["bool"]}},"isDisallowedOperation":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns if the specified command is disallowed in a master\/slave\nreplication context.","param":["CommandInterface $command Instance of Redis command."],"return":["bool"]}},"isSortReadOnly":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks if a SORT command is a readable operation by parsing the arguments\narray of the specified commad instance.","param":["CommandInterface $command Instance of Redis command."],"return":["bool"]}},"setCommandReadOnly":{"parameters":{"commandID":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"readonly":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Marks a command as a read-only operation. When the behaviour of a\ncommand can be decided only at runtime depending on its arguments,\na callable object can be provided to dynamically check if the passed\ninstance of a command performs write operations or not.","param":["string $commandID ID of the command.","mixed  $readonly  A boolean or a callable object."]}},"setScriptReadOnly":{"parameters":{"script":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"readonly":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Marks a Lua script for EVAL and EVALSHA as a read-only operation. When\nthe behaviour of a script can be decided only at runtime depending on\nits arguments, a callable object can be provided to dynamically check\nif the passed instance of EVAL or EVALSHA performs write operations or\nnot.","param":["string $script   Body of the Lua script.","mixed  $readonly A boolean or a callable object."]}},"getDisallowedOperations":{"parameters":[],"annotations":{" short_description":"Returns the default list of disallowed commands.","return":["array"]}},"getReadOnlyOperations":{"parameters":[],"annotations":{" short_description":"Returns the default list of commands performing read-only operations.","return":["array"]}}}},"ReplicationStrategyTest":{"namespace":"Predis\\Replication","functions":{"testReadCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"testWriteCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"testDisallowedCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSortCommand":{"parameters":[],"annotations":{"group":["disconnected"]}},"testUsingDisallowedCommandThrowsException":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\NotSupportedException"],"expectedExceptionMessage":["The command INFO is not allowed in replication mode"]}},"testDefaultIsWriteOperation":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCanSetCommandAsReadOperation":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCanSetCommandAsWriteOperation":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCanUseCallableToCheckCommand":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSetLuaScriptAsReadOperation":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSetLuaScriptAsReadOperationWorksWithScriptedCommand":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSetLuaScriptAsReadOperationWorksWithScriptedCommandAndCallableCheck":{"parameters":[],"annotations":{"group":["disconnected"]}},"getExpectedCommands":{"parameters":{"type":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the list of expected supported commands.","param":["string $type Optional type of command (based on its keys)"],"return":["array"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"HashKey":{"namespace":"Predis\\Collection\\Iterator","functions":{"__construct":{"parameters":{"client":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"key":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"match":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"count":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"","param":["ClientInterface $client Client connected to Redis.","string          $match  Pattern to match during the server-side iteration.","int             $count  Hints used by Redis to compute the number of results per iteration."]}},"executeCommand":{"parameters":[],"annotations":{" short_description":"Fetches a new set of elements from the remote collection,\neffectively advancing the iteration process.","return":["array"]}},"extractNext":{"parameters":[],"annotations":{" short_description":"Extracts next values for key() and current()."}},"requiredCommand":{"parameters":{"client":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"commandID":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Ensures that the client instance supports the specified Redis\ncommand required to fetch elements from the server to perform\nthe iteration.","param":["ClientInterface $client    Client connected to Redis.","string          $commandID Command ID."]}},"reset":{"parameters":[],"annotations":{" short_description":"Resets the inner state of the iterator."}},"getScanOptions":{"parameters":[],"annotations":{" short_description":"Returns an array of options for the `SCAN` command.","return":["array"]}},"fetch":{"parameters":[],"annotations":{" short_description":"Populates the local buffer of elements fetched from the\nserver during the iteration."}},"rewind":{"parameters":[],"annotations":{" short_description":""}},"current":{"parameters":[],"annotations":{" short_description":""}},"key":{"parameters":[],"annotations":{" short_description":""}},"next":{"parameters":[],"annotations":{" short_description":""}},"valid":{"parameters":[],"annotations":{" short_description":""}}}},"Keyspace":{"namespace":"Predis\\Collection\\Iterator","functions":{"__construct":{"parameters":{"client":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"match":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"count":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"","param":["ClientInterface $client Client connected to Redis.","string          $match  Pattern to match during the server-side iteration.","int             $count  Hints used by Redis to compute the number of results per iteration."]}},"executeCommand":{"parameters":[],"annotations":{" short_description":"Fetches a new set of elements from the remote collection,\neffectively advancing the iteration process.","return":["array"]}},"requiredCommand":{"parameters":{"client":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"commandID":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Ensures that the client instance supports the specified Redis\ncommand required to fetch elements from the server to perform\nthe iteration.","param":["ClientInterface $client    Client connected to Redis.","string          $commandID Command ID."]}},"reset":{"parameters":[],"annotations":{" short_description":"Resets the inner state of the iterator."}},"getScanOptions":{"parameters":[],"annotations":{" short_description":"Returns an array of options for the `SCAN` command.","return":["array"]}},"fetch":{"parameters":[],"annotations":{" short_description":"Populates the local buffer of elements fetched from the\nserver during the iteration."}},"extractNext":{"parameters":[],"annotations":{" short_description":"Extracts next values for key() and current()."}},"rewind":{"parameters":[],"annotations":{" short_description":""}},"current":{"parameters":[],"annotations":{" short_description":""}},"key":{"parameters":[],"annotations":{" short_description":""}},"next":{"parameters":[],"annotations":{" short_description":""}},"valid":{"parameters":[],"annotations":{" short_description":""}}}},"ListKey":{"namespace":"Predis\\Collection\\Iterator","functions":{"__construct":{"parameters":{"client":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"key":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"count":{"default":10,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["ClientInterface $client Client connected to Redis.","string          $key    Redis list key.","int             $count  Number of items retrieved on each fetch operation."]}},"requiredCommand":{"parameters":{"client":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"commandID":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Ensures that the client instance supports the specified Redis\ncommand required to fetch elements from the server to perform\nthe iteration.","param":["ClientInterface $client    Client connected to Redis.","string          $commandID Command ID."]}},"reset":{"parameters":[],"annotations":{" short_description":"Resets the inner state of the iterator."}},"executeCommand":{"parameters":[],"annotations":{" short_description":"Fetches a new set of elements from the remote collection,\neffectively advancing the iteration process.","return":["array"]}},"fetch":{"parameters":[],"annotations":{" short_description":"Populates the local buffer of elements fetched from the\nserver during the iteration."}},"extractNext":{"parameters":[],"annotations":{" short_description":"Extracts next values for key() and current()."}},"rewind":{"parameters":[],"annotations":{" short_description":""}},"current":{"parameters":[],"annotations":{" short_description":""}},"key":{"parameters":[],"annotations":{" short_description":""}},"next":{"parameters":[],"annotations":{" short_description":""}},"valid":{"parameters":[],"annotations":{" short_description":""}}}},"SortedSetKey":{"namespace":"Predis\\Collection\\Iterator","functions":{"__construct":{"parameters":{"client":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"key":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"match":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"count":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"","param":["ClientInterface $client Client connected to Redis.","string          $match  Pattern to match during the server-side iteration.","int             $count  Hints used by Redis to compute the number of results per iteration."]}},"executeCommand":{"parameters":[],"annotations":{" short_description":"Fetches a new set of elements from the remote collection,\neffectively advancing the iteration process.","return":["array"]}},"extractNext":{"parameters":[],"annotations":{" short_description":"Extracts next values for key() and current()."}},"requiredCommand":{"parameters":{"client":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"commandID":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Ensures that the client instance supports the specified Redis\ncommand required to fetch elements from the server to perform\nthe iteration.","param":["ClientInterface $client    Client connected to Redis.","string          $commandID Command ID."]}},"reset":{"parameters":[],"annotations":{" short_description":"Resets the inner state of the iterator."}},"getScanOptions":{"parameters":[],"annotations":{" short_description":"Returns an array of options for the `SCAN` command.","return":["array"]}},"fetch":{"parameters":[],"annotations":{" short_description":"Populates the local buffer of elements fetched from the\nserver during the iteration."}},"rewind":{"parameters":[],"annotations":{" short_description":""}},"current":{"parameters":[],"annotations":{" short_description":""}},"key":{"parameters":[],"annotations":{" short_description":""}},"next":{"parameters":[],"annotations":{" short_description":""}},"valid":{"parameters":[],"annotations":{" short_description":""}}}},"CursorBasedIterator":{"namespace":"Predis\\Collection\\Iterator","functions":{"__construct":{"parameters":{"client":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"match":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"count":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["ClientInterface $client Client connected to Redis.","string          $match  Pattern to match during the server-side iteration.","int             $count  Hints used by Redis to compute the number of results per iteration."]}},"requiredCommand":{"parameters":{"client":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"commandID":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Ensures that the client instance supports the specified Redis\ncommand required to fetch elements from the server to perform\nthe iteration.","param":["ClientInterface $client    Client connected to Redis.","string          $commandID Command ID."]}},"reset":{"parameters":[],"annotations":{" short_description":"Resets the inner state of the iterator."}},"getScanOptions":{"parameters":[],"annotations":{" short_description":"Returns an array of options for the `SCAN` command.","return":["array"]}},"executeCommand":{"parameters":[],"annotations":{" short_description":"Fetches a new set of elements from the remote collection,\neffectively advancing the iteration process.","return":["array"]}},"fetch":{"parameters":[],"annotations":{" short_description":"Populates the local buffer of elements fetched from the\nserver during the iteration."}},"extractNext":{"parameters":[],"annotations":{" short_description":"Extracts next values for key() and current()."}},"rewind":{"parameters":[],"annotations":{" short_description":""}},"current":{"parameters":[],"annotations":{" short_description":""}},"key":{"parameters":[],"annotations":{" short_description":""}},"next":{"parameters":[],"annotations":{" short_description":""}},"valid":{"parameters":[],"annotations":{" short_description":""}}}},"SetKey":{"namespace":"Predis\\Collection\\Iterator","functions":{"__construct":{"parameters":{"client":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"key":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"match":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"count":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"","param":["ClientInterface $client Client connected to Redis.","string          $match  Pattern to match during the server-side iteration.","int             $count  Hints used by Redis to compute the number of results per iteration."]}},"executeCommand":{"parameters":[],"annotations":{" short_description":"Fetches a new set of elements from the remote collection,\neffectively advancing the iteration process.","return":["array"]}},"requiredCommand":{"parameters":{"client":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"commandID":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Ensures that the client instance supports the specified Redis\ncommand required to fetch elements from the server to perform\nthe iteration.","param":["ClientInterface $client    Client connected to Redis.","string          $commandID Command ID."]}},"reset":{"parameters":[],"annotations":{" short_description":"Resets the inner state of the iterator."}},"getScanOptions":{"parameters":[],"annotations":{" short_description":"Returns an array of options for the `SCAN` command.","return":["array"]}},"fetch":{"parameters":[],"annotations":{" short_description":"Populates the local buffer of elements fetched from the\nserver during the iteration."}},"extractNext":{"parameters":[],"annotations":{" short_description":"Extracts next values for key() and current()."}},"rewind":{"parameters":[],"annotations":{" short_description":""}},"current":{"parameters":[],"annotations":{" short_description":""}},"key":{"parameters":[],"annotations":{" short_description":""}},"next":{"parameters":[],"annotations":{" short_description":""}},"valid":{"parameters":[],"annotations":{" short_description":""}}}},"SortedSetKeyTest":{"namespace":"Predis\\Collection\\Iterator","functions":{"testThrowsExceptionOnInvalidServerProfile":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\NotSupportedException"],"expectedExceptionMessage":["The specified server profile does not support the `ZSCAN` command."]}},"testIterationWithNoResults":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationOnSingleFetch":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationOnMultipleFetches":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationOnMultipleFetchesAndHoleInFirstFetch":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationOnMultipleFetchesAndHoleInMidFetch":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationWithOptionMatch":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationWithOptionMatchOnMultipleFetches":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationWithOptionCount":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationWithOptionCountOnMultipleFetches":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationWithOptionsMatchAndCount":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationWithOptionsMatchAndCountOnMultipleFetches":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationRewindable":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"KeyspaceTest":{"namespace":"Predis\\Collection\\Iterator","functions":{"testThrowsExceptionOnInvalidServerProfile":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\NotSupportedException"],"expectedExceptionMessage":["The specified server profile does not support the `SCAN` command."]}},"testIterationWithNoResults":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationOnSingleFetch":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationOnMultipleFetches":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationOnMultipleFetchesAndHoleInFirstFetch":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationOnMultipleFetchesAndHoleInMidFetch":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationWithOptionMatch":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationWithOptionMatchOnMultipleFetches":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationWithOptionCount":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationWithOptionCountOnMultipleFetches":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationWithOptionsMatchAndCount":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationWithOptionsMatchAndCountOnMultipleFetches":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationRewindable":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ListKeyTest":{"namespace":"Predis\\Collection\\Iterator","functions":{"testIterationWithNoResults":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationOnSingleFetch":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationOnMultipleFetches":{"parameters":[],"annotations":{"group":["disconnected"]}},"testThrowsExceptionOnConstructorWithNonIntegerCountParameter":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["InvalidArgumentException"],"expectedExceptionMessage":["The $count argument must be a positive integer."]}},"testThrowsExceptionOnConstructorWithNegativeCountParameter":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["InvalidArgumentException"],"expectedExceptionMessage":["The $count argument must be a positive integer."]}},"testIterationWithCountParameter":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationWithCountParameterOnMultipleFetches":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationRewindable":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"HashKeyTest":{"namespace":"Predis\\Collection\\Iterator","functions":{"testThrowsExceptionOnInvalidServerProfile":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\NotSupportedException"],"expectedExceptionMessage":["The specified server profile does not support the `HSCAN` command."]}},"testIterationWithNoResults":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationOnSingleFetch":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationOnMultipleFetches":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationOnMultipleFetchesAndHoleInFirstFetch":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationOnMultipleFetchesAndHoleInMidFetch":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationWithOptionMatch":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationWithOptionMatchOnMultipleFetches":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationWithOptionCount":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationWithOptionCountOnMultipleFetches":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationWithOptionsMatchAndCount":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationWithOptionsMatchAndCountOnMultipleFetches":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationRewindable":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"SetKeyTest":{"namespace":"Predis\\Collection\\Iterator","functions":{"testThrowsExceptionOnInvalidServerProfile":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\NotSupportedException"],"expectedExceptionMessage":["The specified server profile does not support the `SSCAN` command."]}},"testIterationWithNoResults":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationOnSingleFetch":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationOnMultipleFetches":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationOnMultipleFetchesAndHoleInFirstFetch":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationOnMultipleFetchesAndHoleInMidFetch":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationWithOptionMatch":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationWithOptionMatchOnMultipleFetches":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationWithOptionCount":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationWithOptionCountOnMultipleFetches":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationWithOptionsMatchAndCount":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationWithOptionsMatchAndCountOnMultipleFetches":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIterationRewindable":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"CRC16HashGenerator":{"namespace":"Predis\\Cluster\\Hash","functions":{"hash":{"parameters":{"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Generates an hash that is used by the distributor algorithm","param":["string $value Value used to generate the hash."],"return":["int"]}}}},"HashGeneratorInterface":{"namespace":"Predis\\Cluster\\Hash","functions":{"hash":{"parameters":{"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Generates an hash that is used by the distributor algorithm","param":["string $value Value used to generate the hash."],"return":["int"]}}}},"HashRing":{"namespace":"Predis\\Cluster\\Distribution","functions":{"__construct":{"parameters":{"replicas":{"default":128,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"nodeHashCallback":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["int   $replicas         Number of replicas in the ring.","mixed $nodeHashCallback Callback returning the string used to calculate the hash of a node."]}},"add":{"parameters":{"node":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"weight":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Adds a node to the ring with an optional weight.","param":["mixed $node   Node object.","int   $weight Weight for the node."]}},"remove":{"parameters":{"node":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Removes a node from the distributor.","param":["mixed $node Node object."]}},"reset":{"parameters":[],"annotations":{" short_description":"Resets the distributor."}},"isInitialized":{"parameters":[],"annotations":{" short_description":"Returns the initialization status of the distributor.","return":["bool"]}},"computeTotalWeight":{"parameters":[],"annotations":{" short_description":"Calculates the total weight of all the nodes in the distributor.","return":["int"]}},"initialize":{"parameters":[],"annotations":{" short_description":"Initializes the distributor."}},"addNodeToRing":{"parameters":{"ring":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":true,"canBePassedByValue":false,"isArray":false},"node":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"totalNodes":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"replicas":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"weightRatio":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Implements the logic needed to add a node to the hashring.","param":["array $ring        Source hashring.","mixed $node        Node object to be added.","int   $totalNodes  Total number of nodes.","int   $replicas    Number of replicas in the ring.","float $weightRatio Weight ratio for the node."]}},"getNodeHash":{"parameters":{"nodeObject":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":""}},"hash":{"parameters":{"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Calculates the hash for the specified value.","param":["string $value Input value."],"return":["int"]}},"get":{"parameters":{"key":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets a node from the distributor using the computed hash of a key.","param":["mixed $key"],"return":["mixed"]}},"getNodeKey":{"parameters":{"key":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Calculates the corrisponding key of a node distributed in the hashring.","param":["int $key Computed hash of a key."],"return":["int"]}},"wrapAroundStrategy":{"parameters":{"upper":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"lower":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"ringKeysCount":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Implements a strategy to deal with wrap-around errors during binary searches.","param":["int $upper","int $lower","int $ringKeysCount"],"return":["int"]}},"getHashGenerator":{"parameters":[],"annotations":{" short_description":"Returns the underlying hash generator instance.","return":["HashGeneratorInterface"]}}}},"KetamaPureRing":{"namespace":"Predis\\Cluster\\Distribution","functions":{"__construct":{"parameters":{"nodeHashCallback":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["mixed $nodeHashCallback Callback returning the string used to calculate the hash of a node."]}},"addNodeToRing":{"parameters":{"ring":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":true,"canBePassedByValue":false,"isArray":false},"node":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"totalNodes":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"replicas":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"weightRatio":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Implements the logic needed to add a node to the hashring.","param":["array $ring        Source hashring.","mixed $node        Node object to be added.","int   $totalNodes  Total number of nodes.","int   $replicas    Number of replicas in the ring.","float $weightRatio Weight ratio for the node."]}},"hash":{"parameters":{"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Calculates the hash for the specified value.","param":["string $value Input value."],"return":["int"]}},"wrapAroundStrategy":{"parameters":{"upper":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"lower":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"ringKeysCount":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Implements a strategy to deal with wrap-around errors during binary searches.","param":["int $upper","int $lower","int $ringKeysCount"],"return":["int"]}},"add":{"parameters":{"node":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"weight":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Adds a node to the ring with an optional weight.","param":["mixed $node   Node object.","int   $weight Weight for the node."]}},"remove":{"parameters":{"node":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Removes a node from the distributor.","param":["mixed $node Node object."]}},"reset":{"parameters":[],"annotations":{" short_description":"Resets the distributor."}},"isInitialized":{"parameters":[],"annotations":{" short_description":"Returns the initialization status of the distributor.","return":["bool"]}},"computeTotalWeight":{"parameters":[],"annotations":{" short_description":"Calculates the total weight of all the nodes in the distributor.","return":["int"]}},"initialize":{"parameters":[],"annotations":{" short_description":"Initializes the distributor."}},"getNodeHash":{"parameters":{"nodeObject":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":""}},"get":{"parameters":{"key":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets a node from the distributor using the computed hash of a key.","param":["mixed $key"],"return":["mixed"]}},"getNodeKey":{"parameters":{"key":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Calculates the corrisponding key of a node distributed in the hashring.","param":["int $key Computed hash of a key."],"return":["int"]}},"getHashGenerator":{"parameters":[],"annotations":{" short_description":"Returns the underlying hash generator instance.","return":["HashGeneratorInterface"]}}}},"DistributionStrategyInterface":{"namespace":"Predis\\Cluster\\Distribution","functions":{"add":{"parameters":{"node":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"weight":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Adds a node to the distributor with an optional weight.","param":["mixed $node   Node object.","int   $weight Weight for the node."]}},"remove":{"parameters":{"node":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Removes a node from the distributor.","param":["mixed $node Node object."]}},"get":{"parameters":{"key":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets a node from the distributor using the computed hash of a key.","param":["mixed $key"],"return":["mixed"]}},"getHashGenerator":{"parameters":[],"annotations":{" short_description":"Returns the underlying hash generator instance.","return":["HashGeneratorInterface"]}}}},"EmptyRingException":{"namespace":"Predis\\Cluster\\Distribution","functions":{"__clone":{"parameters":[],"annotations":[]},"__construct":{"parameters":{"message":{"default":"","isNull":false,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"code":{"default":"","isNull":false,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"previous":{"default":"","isNull":false,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":[]},"getMessage":{"parameters":[],"annotations":[]},"getCode":{"parameters":[],"annotations":[]},"getFile":{"parameters":[],"annotations":[]},"getLine":{"parameters":[],"annotations":[]},"getTrace":{"parameters":[],"annotations":[]},"getPrevious":{"parameters":[],"annotations":[]},"getTraceAsString":{"parameters":[],"annotations":[]},"__toString":{"parameters":[],"annotations":[]}}},"HashRingTest":{"namespace":"Predis\\Cluster\\Distribution","functions":{"getDistributorInstance":{"parameters":[],"annotations":{" short_description":"Returns a new instance of the tested distributor.","return":["Predis\\Cluster\\Distribution\\DistributionStrategyInterface"]}},"testHash":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSingleNodeInRing":{"parameters":[],"annotations":{"group":["disconnected"]}},"testMultipleNodesInRing":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSubsequendAddAndRemoveFromRing":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCallbackToGetNodeHash":{"parameters":[],"annotations":{"todo":["This tests should be moved in Predis\\Cluster\\Distribution\\DistributionStrategyTestCase"],"group":["disconnected"]}},"getNodes":{"parameters":{"ring":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"iterations":{"default":10,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a list of nodes from the hashring.","param":["DistributionStrategyInterface $ring       Hashring instance.","int                           $iterations Number of nodes to fetch."],"return":["array                         Nodes from the hashring."]}},"testEmptyRingThrowsException":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRemoveOnEmptyRingDoesNotThrowException":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"EmptyRingExceptionTest":{"namespace":"Predis\\Cluster\\Distribution","functions":{"testExceptionMessage":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"KetamaPureRingTest":{"namespace":"Predis\\Cluster\\Distribution","functions":{"getDistributorInstance":{"parameters":[],"annotations":{" short_description":"Returns a new instance of the tested distributor.","return":["Predis\\Cluster\\Distribution\\DistributionStrategyInterface"]}},"testHash":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSingleNodeInRing":{"parameters":[],"annotations":{"group":["disconnected"]}},"testMultipleNodesInRing":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSubsequendAddAndRemoveFromRing":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCallbackToGetNodeHash":{"parameters":[],"annotations":{"todo":["This tests should be moved in Predis\\Cluster\\Distribution\\DistributionStrategyTestCase"],"group":["disconnected"]}},"getNodes":{"parameters":{"ring":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"iterations":{"default":10,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a list of nodes from the hashring.","param":["DistributionStrategyInterface $ring       Hashring instance.","int                           $iterations Number of nodes to fetch."],"return":["array                         Nodes from the hashring."]}},"testEmptyRingThrowsException":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRemoveOnEmptyRingDoesNotThrowException":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"PredisDistributorTestCase":{"namespace":"Predis\\Cluster\\Distribution","functions":{"getDistributorInstance":{"parameters":[],"annotations":{" short_description":"Returns a new instance of the tested distributor.","return":["Predis\\Cluster\\Distribution\\DistributionStrategyInterface"]}},"getNodes":{"parameters":{"ring":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"iterations":{"default":10,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a list of nodes from the hashring.","param":["DistributionStrategyInterface $ring       Hashring instance.","int                           $iterations Number of nodes to fetch."],"return":["array                         Nodes from the hashring."]}},"testEmptyRingThrowsException":{"parameters":[],"annotations":{"group":["disconnected"]}},"testRemoveOnEmptyRingDoesNotThrowException":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"RedisClusterHashStrategy":{"namespace":"Predis\\Cluster","functions":{"__construct":{"parameters":{"hashGenerator":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["HashGeneratorInterface $hashGenerator Hash generator instance."]}},"extractKeyTag":{"parameters":{"key":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns only the hashable part of a key (delimited by \"{...}\"), or the\nwhole key if a key tag is not found in the string.","param":["string $key A key."],"return":["string"]}},"getDefaultCommands":{"parameters":[],"annotations":{" short_description":"Returns the default map of supported commands with their handlers.","return":["array"]}},"getSupportedCommands":{"parameters":[],"annotations":{" short_description":"Returns the list of IDs for the supported commands.","return":["array"]}},"setCommandHandler":{"parameters":{"commandId":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sets an handler for the specified command ID."," long_description":"The signature of the callback must have a single parameter\nof type Predis\\Command\\CommandInterface.\n\nWhen the callback argument is omitted or NULL, the previously\nassociated handler for the specified command ID is removed.","param":["string $commandId The ID of the command to be handled.","mixed  $callback  A valid callable object or NULL."]}},"getKeyFromFirstArgument":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Extracts the key from the first argument of a command instance.","param":["CommandInterface $command Command instance."],"return":["string"]}},"getKeyFromAllArguments":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Extracts the key from a command with multiple keys only when all keys\nin the arguments array produce the same hash.","param":["CommandInterface $command Command instance."],"return":["string"]}},"getKeyFromInterleavedArguments":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Extracts the key from a command with multiple keys only when all keys\nin the arguments array produce the same hash.","param":["CommandInterface $command Command instance."],"return":["string"]}},"getKeyFromBlockingListCommands":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Extracts the key from BLPOP and BRPOP commands.","param":["CommandInterface $command Command instance."],"return":["string"]}},"getKeyFromBitOp":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Extracts the key from BITOP command.","param":["CommandInterface $command Command instance."],"return":["string"]}},"getKeyFromZsetAggregationCommands":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Extracts the key from ZINTERSTORE and ZUNIONSTORE commands.","param":["CommandInterface $command Command instance."],"return":["string"]}},"getKeyFromScriptingCommands":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Extracts the key from EVAL and EVALSHA commands.","param":["CommandInterface $command Command instance."],"return":["string"]}},"getHash":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the hash for the given command using the specified algorithm, or null\nif the command cannot be hashed.","param":["CommandInterface $command Command to be hashed."],"return":["int"]}},"getKeyHash":{"parameters":{"key":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the hash for the given key using the specified algorithm.","param":["string $key Key to be hashed."],"return":["string"]}},"checkSameHashForKeys":{"parameters":{"keys":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Checks if the specified array of keys will generate the same hash.","param":["array $keys Array of keys."],"return":["bool"]}}}},"PredisClusterHashStrategy":{"namespace":"Predis\\Cluster","functions":{"__construct":{"parameters":{"hashGenerator":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["HashGeneratorInterface $hashGenerator Hash generator instance."]}},"getDefaultCommands":{"parameters":[],"annotations":{" short_description":"Returns the default map of supported commands with their handlers.","return":["array"]}},"getSupportedCommands":{"parameters":[],"annotations":{" short_description":"Returns the list of IDs for the supported commands.","return":["array"]}},"setCommandHandler":{"parameters":{"commandId":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sets an handler for the specified command ID."," long_description":"The signature of the callback must have a single parameter\nof type Predis\\Command\\CommandInterface.\n\nWhen the callback argument is omitted or NULL, the previously\nassociated handler for the specified command ID is removed.","param":["string $commandId The ID of the command to be handled.","mixed  $callback  A valid callable object or NULL."]}},"getKeyFromFirstArgument":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Extracts the key from the first argument of a command instance.","param":["CommandInterface $command Command instance."],"return":["string"]}},"getKeyFromAllArguments":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Extracts the key from a command with multiple keys only when all keys\nin the arguments array produce the same hash.","param":["CommandInterface $command Command instance."],"return":["string"]}},"getKeyFromInterleavedArguments":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Extracts the key from a command with multiple keys only when all keys\nin the arguments array produce the same hash.","param":["CommandInterface $command Command instance."],"return":["string"]}},"getKeyFromBlockingListCommands":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Extracts the key from BLPOP and BRPOP commands.","param":["CommandInterface $command Command instance."],"return":["string"]}},"getKeyFromBitOp":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Extracts the key from BITOP command.","param":["CommandInterface $command Command instance."],"return":["string"]}},"getKeyFromZsetAggregationCommands":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Extracts the key from ZINTERSTORE and ZUNIONSTORE commands.","param":["CommandInterface $command Command instance."],"return":["string"]}},"getKeyFromScriptingCommands":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Extracts the key from EVAL and EVALSHA commands.","param":["CommandInterface $command Command instance."],"return":["string"]}},"getHash":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the hash for the given command using the specified algorithm, or null\nif the command cannot be hashed.","param":["CommandInterface $command Command to be hashed."],"return":["int"]}},"getKeyHash":{"parameters":{"key":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the hash for the given key using the specified algorithm.","param":["string $key Key to be hashed."],"return":["string"]}},"checkSameHashForKeys":{"parameters":{"keys":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Checks if the specified array of keys will generate the same hash.","param":["array $keys Array of keys."],"return":["bool"]}},"extractKeyTag":{"parameters":{"key":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns only the hashable part of a key (delimited by \"{...}\"), or the\nwhole key if a key tag is not found in the string.","param":["string $key A key."],"return":["string"]}}}},"CommandHashStrategyInterface":{"namespace":"Predis\\Cluster","functions":{"getHash":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the hash for the given command using the specified algorithm, or null\nif the command cannot be hashed.","param":["CommandInterface $command Command to be hashed."],"return":["int"]}},"getKeyHash":{"parameters":{"key":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the hash for the given key using the specified algorithm.","param":["string $key Key to be hashed."],"return":["string"]}}}},"PredisClusterHashStrategyTest":{"namespace":"Predis\\Cluster","functions":{"testSupportsKeyTags":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSupportedCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsNullOnUnsupportedCommand":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFirstKeyCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAllKeysCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"testInterleavedKeysCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"testKeysForBlockingListCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"testKeysForZsetAggregationCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"testKeysForBitOpCommand":{"parameters":[],"annotations":{"group":["disconnected"]}},"testKeysForScriptCommand":{"parameters":[],"annotations":{"group":["disconnected"]}},"testKeysForScriptedCommand":{"parameters":[],"annotations":{"group":["disconnected"]}},"testUnsettingCommandHandler":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSettingCustomCommandHandler":{"parameters":[],"annotations":{"group":["disconnected"]}},"getHashStrategy":{"parameters":[],"annotations":{" short_description":"Creates the default hash strategy object.","return":["CommandHashStrategyInterface"]}},"getExpectedCommands":{"parameters":{"type":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the list of expected supported commands.","param":["string $type Optional type of command (based on its keys)"],"return":["array"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"RedisClusterHashStrategyTest":{"namespace":"Predis\\Cluster","functions":{"testSupportsKeyTags":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSupportedCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"testReturnsNullOnUnsupportedCommand":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFirstKeyCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAllKeysCommandsWithOneKey":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAllKeysCommandsWithMoreKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testInterleavedKeysCommandsWithOneKey":{"parameters":[],"annotations":{"group":["disconnected"]}},"testInterleavedKeysCommandsWithMoreKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testKeysForBlockingListCommandsWithOneKey":{"parameters":[],"annotations":{"group":["disconnected"]}},"testKeysForBlockingListCommandsWithMoreKeys":{"parameters":[],"annotations":{"group":["disconnected"]}},"testKeysForScriptCommand":{"parameters":[],"annotations":{"group":["disconnected"]}},"testKeysForScriptedCommand":{"parameters":[],"annotations":{"group":["disconnected"]}},"testUnsettingCommandHandler":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSettingCustomCommandHandler":{"parameters":[],"annotations":{"group":["disconnected"]}},"getHashStrategy":{"parameters":[],"annotations":{" short_description":"Creates the default hash strategy object.","return":["CommandHashStrategyInterface"]}},"getExpectedCommands":{"parameters":{"type":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns the list of expected supported commands.","param":["string $type Optional type of command (based on its keys)"],"return":["array"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"PipelineExecutorInterface":{"namespace":"Predis\\Pipeline","functions":{"execute":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"commands":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Writes a list of commands to the network and reads back their replies.","param":["ConnectionInterface $connection Connection to Redis.","SplQueue            $commands   Commands queued for execution."],"return":["array"]}}}},"SafeExecutor":{"namespace":"Predis\\Pipeline","functions":{"execute":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"commands":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Writes a list of commands to the network and reads back their replies.","param":["ConnectionInterface $connection Connection to Redis.","SplQueue            $commands   Commands queued for execution."],"return":["array"]}}}},"StandardExecutor":{"namespace":"Predis\\Pipeline","functions":{"__construct":{"parameters":{"exceptions":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["bool $exceptions Specifies if the executor should throw exceptions on server errors."]}},"checkConnection":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Allows the pipeline executor to perform operations on the\nconnection before starting to execute the commands stored\nin the pipeline.","param":["ConnectionInterface $connection Connection instance."]}},"onResponseObject":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"response":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Handles a response object.","param":["ConnectionInterface     $connection","CommandInterface        $command","ResponseObjectInterface $response"],"return":["mixed"]}},"onResponseError":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"response":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Handles -ERR responses returned by Redis.","param":["ConnectionInterface    $connection The connection that returned the error.","ResponseErrorInterface $response   The error response instance."],"return":["ResponseErrorInterface"]}},"execute":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"commands":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Writes a list of commands to the network and reads back their replies.","param":["ConnectionInterface $connection Connection to Redis.","SplQueue            $commands   Commands queued for execution."],"return":["array"]}}}},"FireAndForgetExecutor":{"namespace":"Predis\\Pipeline","functions":{"checkConnection":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Allows the pipeline executor to perform operations on the\nconnection before starting to execute the commands stored\nin the pipeline.","param":["ConnectionInterface $connection Connection instance."]}},"execute":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"commands":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Writes a list of commands to the network and reads back their replies.","param":["ConnectionInterface $connection Connection to Redis.","SplQueue            $commands   Commands queued for execution."],"return":["array"]}}}},"SafeClusterExecutor":{"namespace":"Predis\\Pipeline","functions":{"execute":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"commands":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Writes a list of commands to the network and reads back their replies.","param":["ConnectionInterface $connection Connection to Redis.","SplQueue            $commands   Commands queued for execution."],"return":["array"]}}}},"MultiExecExecutor":{"namespace":"Predis\\Pipeline","functions":{"__construct":{"parameters":{"profile":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":[]},"checkConnection":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Allows the pipeline executor to perform operations on the\nconnection before starting to execute the commands stored\nin the pipeline.","param":["ConnectionInterface $connection Connection instance."]}},"execute":{"parameters":{"connection":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"commands":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Writes a list of commands to the network and reads back their replies.","param":["ConnectionInterface $connection Connection to Redis.","SplQueue            $commands   Commands queued for execution."],"return":["array"]}},"consumeIteratorResponse":{"parameters":{"commands":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"responses":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Consumes an iterator response returned by EXEC.","param":["SplQueue $commands  Pipelined commands","Iterator $responses Responses returned by EXEC."],"return":["array"]}},"consumeArrayResponse":{"parameters":{"commands":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"responses":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":true,"canBePassedByValue":false,"isArray":true}},"annotations":{" short_description":"Consumes an array response returned by EXEC.","param":["SplQueue $commands  Pipelined commands","Array    $responses Responses returned by EXEC."],"return":["array"]}},"setProfile":{"parameters":{"profile":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["ServerProfileInterface $profile Server profile."]}}}},"PipelineContext":{"namespace":"Predis\\Pipeline","functions":{"__construct":{"parameters":{"client":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"executor":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["ClientInterface           $client   Client instance used by the context.","PipelineExecutorInterface $executor Pipeline executor instace."]}},"createExecutor":{"parameters":{"client":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a pipeline executor depending on the kind of the underlying\nconnection and the passed options.","param":["ClientInterface           $client Client instance used by the context."],"return":["PipelineExecutorInterface"]}},"__call":{"parameters":{"method":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Queues a command into the pipeline buffer.","param":["string $method    Command ID.","array  $arguments Arguments for the command."],"return":["$this"]}},"recordCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Queues a command instance into the pipeline buffer.","param":["CommandInterface $command Command to queue in the buffer."]}},"executeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Queues a command instance into the pipeline buffer.","param":["CommandInterface $command Command to queue in the buffer."],"return":["$this"]}},"flushPipeline":{"parameters":{"send":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Flushes the buffer that holds the queued commands.","param":["bool            $send Specifies if the commands in the buffer should be sent to Redis."],"return":["PipelineContext"]}},"setRunning":{"parameters":{"bool":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Marks the running status of the pipeline.","param":["bool $bool True if the pipeline is running.\n                  False if the pipeline is not running."]}},"execute":{"parameters":{"callable":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Handles the actual execution of the whole pipeline.","param":["mixed $callable Optional callback for execution."],"return":["array"]}},"getClient":{"parameters":[],"annotations":{" short_description":"Returns the underlying client instance used by the pipeline object.","return":["ClientInterface"]}},"getExecutor":{"parameters":[],"annotations":{" short_description":"Returns the underlying pipeline executor used by the pipeline object.","return":["PipelineExecutorInterface"]}}}},"FireAndForgetExecutorTest":{"namespace":"Predis\\Pipeline","functions":{"testExecutorWithSingleConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExecutorWithReplicationConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"getCommandsQueue":{"parameters":[],"annotations":{" short_description":"Returns a list of queued command instances.","return":["SplQueue"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"ResponseIteratorStub":{"namespace":"Predis\\Pipeline","functions":{"__construct":{"parameters":{"array":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":[]},"offsetExists":{"parameters":{"index":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":[]},"offsetGet":{"parameters":{"index":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":[]},"offsetSet":{"parameters":{"index":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"newval":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":[]},"offsetUnset":{"parameters":{"index":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":[]},"append":{"parameters":{"value":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":[]},"getArrayCopy":{"parameters":[],"annotations":[]},"count":{"parameters":[],"annotations":[]},"getFlags":{"parameters":[],"annotations":[]},"setFlags":{"parameters":{"flags":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":[]},"asort":{"parameters":[],"annotations":[]},"ksort":{"parameters":[],"annotations":[]},"uasort":{"parameters":{"cmp_function":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":[]},"uksort":{"parameters":{"cmp_function":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":[]},"natsort":{"parameters":[],"annotations":[]},"natcasesort":{"parameters":[],"annotations":[]},"unserialize":{"parameters":{"serialized":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":[]},"serialize":{"parameters":[],"annotations":[]},"rewind":{"parameters":[],"annotations":[]},"current":{"parameters":[],"annotations":[]},"key":{"parameters":[],"annotations":[]},"next":{"parameters":[],"annotations":[]},"valid":{"parameters":[],"annotations":[]},"seek":{"parameters":{"position":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":[]}}},"MultiExecExecutorTest":{"namespace":"Predis\\Pipeline","functions":{"testExecutorWithSingleConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExecutorWithSingleConnectionReturningIterator":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExecutorWithAbortedTransaction":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\ClientException"],"expectedExceptionMessage":["The underlying transaction has been aborted by the server"]}},"testExecutorWithErrorInTransaction":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR Test error"]}},"testExecutorWithErrorInCommandResponse":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExecutorWithAggregatedConnection":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\ClientException"],"expectedExceptionMessage":["Predis\\Pipeline\\MultiExecExecutor can be used only with single connections"]}},"getCommandsQueue":{"parameters":[],"annotations":{" short_description":"Returns a list of queued command instances.","return":["SplQueue"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"PipelineContextTest":{"namespace":"Predis\\Pipeline","functions":{"testConstructorWithoutOptions":{"parameters":[],"annotations":{"group":["disconnected"]}},"testConstructorWithExecutorArgument":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCallDoesNotSendCommandsWithoutExecute":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCallReturnsPipelineForFluentInterface":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExecuteReturnsPipelineForFluentInterface":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExecuteCommandDoesNotSendCommandsWithoutExecute":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExecuteWithEmptyBuffer":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExecuteWithFilledBuffer":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFlushWithFalseArgumentDiscardsBuffer":{"parameters":[],"annotations":{"group":["disconnected"]}},"testFlushHandlesPartialBuffers":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExecuteAcceptsCallableArgument":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExecuteDoesNotAcceptNonCallableArgument":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["InvalidArgumentException"]}},"testExecuteInsideCallableArgumentThrowsException":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\ClientException"]}},"testExecuteWithCallableArgumentRunsPipelineInCallable":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExecuteWithCallableArgumentHandlesExceptions":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIntegrationWithFluentInterface":{"parameters":[],"annotations":{"group":["connected"]}},"testIntegrationWithCallableBlock":{"parameters":[],"annotations":{"group":["connected"]}},"testOutOfBandMessagesInsidePipeline":{"parameters":[],"annotations":{"group":["connected"]}},"testIntegrationWithClientExceptionInCallableBlock":{"parameters":[],"annotations":{"group":["connected"]}},"testIntegrationWithServerExceptionInCallableBlock":{"parameters":[],"annotations":{"group":["connected"]}},"testIntegrationWithServerErrorInCallableBlock":{"parameters":[],"annotations":{"group":["connected"]}},"getClient":{"parameters":{"parameters":{"default":[],"isNull":false,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":[],"isNull":false,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a client instance connected to the specified Redis\nserver instance to perform integration tests.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options."],"return":["Client"]}},"getReadCallback":{"parameters":[],"annotations":{" short_description":"Helper method that returns a callback used to emulate a reply\nto an ECHO command.","return":["\\Closure"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"StandardExecutorTest":{"namespace":"Predis\\Pipeline","functions":{"testExecutorWithSingleConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExecutorWithReplicationConnection":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExecutorDoesNotParseResponseObjects":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExecutorCanReturnRedisErrors":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExecutorCanThrowExceptions":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\ServerException"],"expectedExceptionMessage":["ERR Test error"]}},"simpleResponseObjectTest":{"parameters":{"executor":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"response":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Executes a test for the Predis\\ResponseObjectInterface type.","param":["PipelineExecutorInterface $executor","ResponseObjectInterface   $response"]}},"getCommandsQueue":{"parameters":[],"annotations":{" short_description":"Returns a list of queued command instances.","return":["SplQueue"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"AbortedMultiExecException":{"namespace":"Predis\\Transaction","functions":{"__construct":{"parameters":{"transaction":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"code":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["MultiExecContext $transaction Transaction that generated the exception.","string           $message     Error message.","int              $code        Error code."]}},"getTransaction":{"parameters":[],"annotations":{" short_description":"Returns the transaction that generated the exception.","return":["MultiExecContext"]}},"__clone":{"parameters":[],"annotations":[]},"getMessage":{"parameters":[],"annotations":[]},"getCode":{"parameters":[],"annotations":[]},"getFile":{"parameters":[],"annotations":[]},"getLine":{"parameters":[],"annotations":[]},"getTrace":{"parameters":[],"annotations":[]},"getPrevious":{"parameters":[],"annotations":[]},"getTraceAsString":{"parameters":[],"annotations":[]},"__toString":{"parameters":[],"annotations":[]}}},"MultiExecContext":{"namespace":"Predis\\Transaction","functions":{"__construct":{"parameters":{"client":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{"param":["ClientInterface $client  Client instance used by the context.","array           $options Options for the context initialization."]}},"setState":{"parameters":{"flags":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sets the internal state flags.","param":["int $flags Set of flags"]}},"getState":{"parameters":[],"annotations":{" short_description":"Gets the internal state flags.","return":["int"]}},"flagState":{"parameters":{"flags":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sets one or more flags.","param":["int $flags Set of flags"]}},"unflagState":{"parameters":{"flags":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Resets one or more flags.","param":["int $flags Set of flags"]}},"checkState":{"parameters":{"flags":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks is a flag is set.","param":["int  $flags Flag"],"return":["bool"]}},"checkCapabilities":{"parameters":{"client":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks if the passed client instance satisfies the required conditions\nneeded to initialize a transaction context.","param":["ClientInterface $client Client instance used by the context."]}},"isWatchSupported":{"parameters":[],"annotations":{" short_description":"Checks if WATCH and UNWATCH are supported by the server profile."}},"reset":{"parameters":[],"annotations":{" short_description":"Resets the state of a transaction."}},"initialize":{"parameters":[],"annotations":{" short_description":"Initializes a new transaction."}},"__call":{"parameters":{"method":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Dynamically invokes a Redis command with the specified arguments.","param":["string $method    Command ID.","array  $arguments Arguments for the command."],"return":["mixed"]}},"executeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Executes the specified Redis command.","param":["CommandInterface $command Command instance."],"return":["$this|mixed"]}},"watch":{"parameters":{"keys":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Executes WATCH on one or more keys.","param":["string|array $keys One or more keys."],"return":["mixed"]}},"multi":{"parameters":[],"annotations":{" short_description":"Finalizes the transaction on the server by executing MULTI on the server.","return":["MultiExecContext"]}},"unwatch":{"parameters":[],"annotations":{" short_description":"Executes UNWATCH.","return":["MultiExecContext"]}},"discard":{"parameters":[],"annotations":{" short_description":"Resets a transaction by UNWATCHing the keys that are being WATCHed and\nDISCARDing the pending commands that have been already sent to the server.","return":["MultiExecContext"]}},"exec":{"parameters":[],"annotations":{" short_description":"Executes the whole transaction.","return":["mixed"]}},"checkBeforeExecution":{"parameters":{"callable":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks the state of the transaction before execution.","param":["mixed $callable Callback for execution."]}},"execute":{"parameters":{"callable":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Handles the actual execution of the whole transaction.","param":["mixed $callable Optional callback for execution."],"return":["array"]}},"executeTransactionBlock":{"parameters":{"callable":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Passes the current transaction context to a callable block for execution.","param":["mixed $callable Callback."]}},"onProtocolError":{"parameters":{"message":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper method that handles protocol errors encountered inside a transaction.","param":["string $message Error message."]}}}},"AbortedMultiExecExceptionTest":{"namespace":"Predis\\Transaction","functions":{"testExceptionClass":{"parameters":[],"annotations":{"group":["disconnected"]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"MultiExecContextTest":{"namespace":"Predis\\Transaction","functions":{"testThrowsExceptionOnUnsupportedMultiExecInProfile":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\NotSupportedException"],"expectedExceptionMessage":["The current profile does not support MULTI, EXEC and DISCARD"]}},"testThrowsExceptionOnUnsupportedWatchUnwatchInProfile":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\NotSupportedException"],"expectedExceptionMessage":["The current profile does not support WATCH and UNWATCH"]}},"testExecutionWithFluentInterface":{"parameters":[],"annotations":{"group":["disconnected"]}},"testExecutionWithCallable":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCannotMixExecutionWithFluentInterfaceAndCallable":{"parameters":[],"annotations":{"group":["disconnected"]}},"testEmptyTransactionDoesNotSendMultiExecCommands":{"parameters":[],"annotations":{"group":["disconnected"]}},"testThrowsExceptionOnExecInsideTransactionBlock":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\ClientException"],"expectedExceptionMessage":["Cannot invoke 'execute' or 'exec' inside an active client transaction block"]}},"testEmptyTransactionIgnoresDiscard":{"parameters":[],"annotations":{"group":["disconnected"]}},"testTransactionWithCommandsSendsDiscard":{"parameters":[],"annotations":{"group":["disconnected"]}},"testSendMultiOnCommandsFollowingDiscard":{"parameters":[],"annotations":{"group":["disconnected"]}},"testThrowsExceptionOnWatchInsideMulti":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\ClientException"]}},"testUnwatchInsideMulti":{"parameters":[],"annotations":{"group":["disconnected"]}},"testAutomaticWatchInOptions":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCheckAndSetWithFluentInterface":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCheckAndSetWithBlock":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCheckAndSetWithEmptyBlock":{"parameters":[],"annotations":{"group":["disconnected"]}},"testCheckAndSetWithoutExec":{"parameters":[],"annotations":{"group":["disconnected"]}},"testThrowsExceptionOnAutomaticRetriesWithFluentInterface":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["InvalidArgumentException"],"expectedExceptionMessage":["Automatic retries can be used only when a transaction block is provided"]}},"testAutomaticRetryOnServerSideTransactionAbort":{"parameters":[],"annotations":{"group":["disconnected"]}},"testThrowsExceptionOnServerSideTransactionAbort":{"parameters":[],"annotations":{"group":["disconnected"],"expectedException":["Predis\\Transaction\\AbortedMultiExecException"]}},"testHandlesStandardExceptionsInBlock":{"parameters":[],"annotations":{"group":["disconnected"]}},"testHandlesServerExceptionsInBlock":{"parameters":[],"annotations":{"group":["disconnected"]}},"testProperlyDiscardsTransactionAfterServerExceptionInBlock":{"parameters":[],"annotations":{"group":["disconnected"]}},"testIntegrationHandlesStandardExceptionsInBlock":{"parameters":[],"annotations":{"group":["connected"]}},"testIntegrationThrowsExceptionOnRedisErrorInBlock":{"parameters":[],"annotations":{"group":["connected"]}},"testIntegrationReturnsErrorObjectOnRedisErrorInBlock":{"parameters":[],"annotations":{"group":["connected"]}},"testIntegrationSendMultiOnCommandsAfterDiscard":{"parameters":[],"annotations":{"group":["connected"]}},"testIntegrationWritesOnWatchedKeysAbortTransaction":{"parameters":[],"annotations":{"group":["connected"]}},"testIntegrationCheckAndSetWithDiscardAndRetry":{"parameters":[],"annotations":{"group":["connected"]}},"getMockedConnection":{"parameters":{"executeCallback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a mocked instance of Predis\\Connection\\SingleConnectionInterface\nusingthe specified callback to return values from executeCommand().","param":["\\Closure                                     $executeCallback"],"return":["\\Predis\\Connection\\SingleConnectionInterface"]}},"getMockedTransaction":{"parameters":{"executeCallback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"options":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a mocked instance of Predis\\Transaction\\MultiExecContext using\nthe specified callback to return values from the executeCommand method\nof the underlying connection.","param":["\\Closure         $executeCallback","array            $options"],"return":["MultiExecContext"]}},"getExecuteCallback":{"parameters":{"expected":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"commands":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":true,"canBePassedByValue":false,"isArray":false},"cas":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":true,"canBePassedByValue":false,"isArray":false}},"annotations":{" short_description":"Returns a callback that emulates a server-side MULTI\/EXEC transaction context.","param":["array    $expected Expected responses.","array    $commands Reference to an array storing the whole flow of commands.","array    $cas      Check and set operations performed by the transaction."],"return":["\\Closure"]}},"commandsToIDs":{"parameters":{"commands":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Converts an array of instances of Predis\\Command\\CommandInterface and\nreturns an array containing their IDs.","param":["array $commands List of commands instances."],"return":["array"]}},"getClient":{"parameters":{"parameters":{"default":[],"isNull":false,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":[],"isNull":false,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a client instance connected to the specified Redis\nserver instance to perform integration tests.","param":["array Additional connection parameters.","array Additional client options."],"return":["Client client instance."]}},"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}},"HashMultipleGetAll":{"namespace":"","functions":{"getScript":{"parameters":[],"annotations":{" short_description":"Gets the body of a Lua script.","return":["string"]}},"getKeysCount":{"parameters":[],"annotations":{" short_description":"Specifies the number of arguments that should be considered as keys."," long_description":"The default behaviour for the base class is to return 0 to indicate that\nall the elements of the arguments array should be considered as keys, but\nsubclasses can enforce a static number of keys.","return":["int"]}},"getKeys":{"parameters":[],"annotations":{" short_description":"Returns the elements from the arguments that are identified as keys.","return":["array"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"getEvalArguments":{"parameters":[],"annotations":{"return":["array"]}},"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"getScriptHash":{"parameters":[],"annotations":{" short_description":"Returns the SHA1 hash of the body of the script.","return":["string SHA1 hash."]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"EventsListener":{"namespace":"","functions":{"__construct":{"parameters":[],"annotations":[]},"count":{"parameters":[],"annotations":[]},"getEvents":{"parameters":[],"annotations":[]},"__invoke":{"parameters":{"payload":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":[]}}},"IncrementExistingKeysBy":{"namespace":"","functions":{"getKeysCount":{"parameters":[],"annotations":{" short_description":"Specifies the number of arguments that should be considered as keys."," long_description":"The default behaviour for the base class is to return 0 to indicate that\nall the elements of the arguments array should be considered as keys, but\nsubclasses can enforce a static number of keys.","return":["int"]}},"getScript":{"parameters":[],"annotations":{" short_description":"Gets the body of a Lua script.","return":["string"]}},"getKeys":{"parameters":[],"annotations":{" short_description":"Returns the elements from the arguments that are identified as keys.","return":["array"]}},"filterArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a filtered array of the arguments.","param":["array $arguments List of arguments."],"return":["array"]}},"getEvalArguments":{"parameters":[],"annotations":{"return":["array"]}},"getId":{"parameters":[],"annotations":{" short_description":"Gets the ID of a Redis command.","return":["string"]}},"getScriptHash":{"parameters":[],"annotations":{" short_description":"Returns the SHA1 hash of the body of the script.","return":["string SHA1 hash."]}},"prefixKeys":{"parameters":{"prefix":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Prefixes all the keys found in the arguments of the command.","param":["string $prefix String used to prefix the keys."]}},"setArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the arguments for the command.","param":["array $arguments List of arguments."]}},"setRawArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Sets the raw arguments for the command without processing them.","param":["array $arguments List of arguments."]}},"getArguments":{"parameters":[],"annotations":{" short_description":"Gets the arguments of the command.","return":["array"]}},"getArgument":{"parameters":{"index":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets the argument of the command at the specified index.","param":["int   $index Index of the desired argument."],"return":["mixed"]}},"setHash":{"parameters":{"hash":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Set the hash for the command.","param":["int $hash Calculated hash."]}},"getHash":{"parameters":[],"annotations":{" short_description":"Returns the hash of the command.","return":["int"]}},"parseResponse":{"parameters":{"data":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Parses a reply buffer and returns a PHP object.","param":["string $data Binary string containing the whole reply."],"return":["mixed"]}},"toStringArgumentReducer":{"parameters":{"accumulator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"argument":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper function used to reduce a list of arguments to a string.","param":["string $accumulator Temporary string.","string $argument    Current argument."],"return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a partial string representation of the command with its arguments.","return":["string"]}},"normalizeArguments":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}},"normalizeVariadic":{"parameters":{"arguments":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Normalizes the arguments array passed to a variadic Redis command.","param":["array $arguments Arguments for a command."],"return":["array"]}}}},"NaiveDistributionStrategy":{"namespace":"","functions":{"__construct":{"parameters":[],"annotations":[]},"add":{"parameters":{"node":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"weight":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Adds a node to the distributor with an optional weight.","param":["mixed $node   Node object.","int   $weight Weight for the node."]}},"remove":{"parameters":{"node":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Removes a node from the distributor.","param":["mixed $node Node object."]}},"get":{"parameters":{"key":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Gets a node from the distributor using the computed hash of a key.","param":["mixed $key"],"return":["mixed"]}},"hash":{"parameters":{"value":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Generates an hash that is used by the distributor algorithm","param":["string $value Value used to generate the hash."],"return":["int"]}},"getHashGenerator":{"parameters":[],"annotations":{" short_description":"Returns the underlying hash generator instance.","return":["HashGeneratorInterface"]}}}},"SimpleDebuggableConnection":{"namespace":"","functions":{"connect":{"parameters":[],"annotations":{" short_description":"Opens the connection."}},"storeDebug":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"direction":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":[]},"writeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Write a Redis command on the connection.","param":["CommandInterface $command Instance of a Redis command."]}},"readResponse":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Reads the reply for a Redis command from the connection.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}},"getDebugBuffer":{"parameters":[],"annotations":[]},"__construct":{"parameters":{"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"","param":["ConnectionParametersInterface $parameters Parameters used to initialize the connection."]}},"__destruct":{"parameters":[],"annotations":{" short_description":"Disconnects from the server and destroys the underlying resource when\nPHP's garbage collector kicks in only if the connection has not been\nmarked as persistent."}},"createResource":{"parameters":[],"annotations":{" short_description":"Creates the underlying resource used to communicate with Redis.","return":["mixed"]}},"tcpStreamInitializer":{"parameters":{"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Initializes a TCP stream resource.","param":["ConnectionParametersInterface $parameters Parameters used to initialize the connection."],"return":["resource"]}},"unixStreamInitializer":{"parameters":{"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Initializes a UNIX stream resource.","param":["ConnectionParametersInterface $parameters Parameters used to initialize the connection."],"return":["resource"]}},"disconnect":{"parameters":[],"annotations":{" short_description":"Closes the connection."}},"sendInitializationCommands":{"parameters":[],"annotations":{" short_description":"Sends the initialization commands to Redis when the connection is opened."}},"writeBytes":{"parameters":{"buffer":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Performs a write operation on the stream of the buffer containing a\ncommand serialized with the Redis wire protocol.","param":["string $buffer Redis wire protocol representation of a command."]}},"read":{"parameters":[],"annotations":{" short_description":"Reads a reply from the server.","return":["mixed"]}},"__sleep":{"parameters":[],"annotations":{" short_description":""}},"checkParameters":{"parameters":{"parameters":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Checks some of the parameters used to initialize the connection.","param":["ConnectionParametersInterface $parameters Initialization parameters for the connection."],"return":["ConnectionParametersInterface"]}},"isConnected":{"parameters":[],"annotations":{" short_description":"Returns if the connection is open.","return":["bool"]}},"pushInitCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Pushes the instance of a Redis command to the queue of commands executed\nwhen the actual connection to a server is estabilished.","param":["CommandInterface $command Instance of a Redis command."]}},"executeCommand":{"parameters":{"command":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Writes a Redis command to the connection and reads back the reply.","param":["CommandInterface $command Instance of a Redis command."],"return":["mixed"]}},"onConnectionError":{"parameters":{"message":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"code":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper method to handle connection errors.","param":["string $message Error message.","int    $code    Error code."]}},"onProtocolError":{"parameters":{"message":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper method to handle protocol errors.","param":["string $message Error message."]}},"onInvalidOption":{"parameters":{"option":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Helper method to handle not supported connection parameters.","param":["string $option     Name of the option.","mixed  $parameters Parameters used to initialize the connection."]}},"getResource":{"parameters":[],"annotations":{" short_description":"Returns the underlying resource used to communicate with a Redis server.","return":["mixed"]}},"getParameters":{"parameters":[],"annotations":{" short_description":"Gets the parameters used to initialize the connection object.","return":["ConnectionParametersInterface"]}},"getIdentifier":{"parameters":[],"annotations":{" short_description":"Gets an identifier for the connection.","return":["string"]}},"__toString":{"parameters":[],"annotations":{" short_description":"Returns a string representation of the connection.","return":["string"]}}}},"RedisCommandConstraint":{"namespace":"","functions":{"__construct":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{"param":["string|CommandInterface $command   Expected command ID or instance.","array                   $arguments Expected command arguments."]}},"matches":{"parameters":{"other":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":""}},"toString":{"parameters":[],"annotations":{" short_description":"","todo":["Improve output using diff when expected and actual arguments of a\n      command do not match."]}},"failureDescription":{"parameters":{"other":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":""}}}},"ArrayHasSameValuesConstraint":{"namespace":"","functions":{"__construct":{"parameters":{"array":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["array $array"]}},"matches":{"parameters":{"other":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":""}},"toString":{"parameters":[],"annotations":{" short_description":""}},"failureDescription":{"parameters":{"other":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":""}}}},"PredisTestCase":{"namespace":"","functions":{"isRedisCommand":{"parameters":{"command":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"arguments":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments.","param":["string|CommandInterface $command   Expected command or command ID.","array                   $arguments Expected command arguments."],"return":["RedisCommandConstraint"]}},"assertRedisCommand":{"parameters":{"expected":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"actual":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Verifies that a Redis command is a valid Predis\\Command\\CommandInterface\ninstance with the specified ID and command arguments. The comparison does\nnot check for identity when passing a Predis\\Command\\CommandInterface\ninstance for $expected.","param":["array|string|CommandInterface $expected Expected command.","mixed                         $actual   Actual command.","string                        $message  Optional assertion message."]}},"assertSameValues":{"parameters":{"expected":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"actual":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"message":{"default":"","isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Asserts that two arrays have the same values, even if with different order.","param":["array  $expected Expected array.","array  $actual   Actual array.","string $message  Optional assertion message."]}},"getDefaultParametersArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default connection parameters and their values.","return":["array Default connection parameters."]}},"getDefaultOptionsArray":{"parameters":[],"annotations":{" short_description":"Returns a named array with the default client options and their values.","return":["array Default connection parameters."]}},"getParametersArray":{"parameters":{"additional":{"default":"","isNull":false,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true}},"annotations":{" short_description":"Returns a named array with the default connection parameters merged with\nthe specified additional parameters.","param":["array $additional Additional connection parameters."],"return":["array Connection parameters."]}},"getParameters":{"parameters":{"additional":{"default":[],"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of connection parameters.","param":["array                           $additional Additional connection parameters."],"return":["Connection\\ConnectionParameters Default connection parameters."]}},"getProfile":{"parameters":{"version":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new instance of server profile.","param":["string                 $version Redis profile."],"return":["ServerProfileInterface"]}},"createClient":{"parameters":{"parameters":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"options":{"default":null,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":true},"flushdb":{"default":true,"isNull":true,"isOptional":true,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Returns a new client instance.","param":["array  $parameters Additional connection parameters.","array  $options    Additional client options.","bool   $flushdb    Flush selected database before returning the client."],"return":["Client"]}},"getRedisServerVersion":{"parameters":[],"annotations":{" short_description":"Returns the server version of the Redis instance used by the test suite.","return":["string"],"throws":["RuntimeException When the client cannot retrieve the current server version"]}},"executeOnRedisVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met"]}},"executeOnProfileVersion":{"parameters":{"expectedVersion":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"operator":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false},"callback":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{"param":["string                             $expectedVersion Expected redis version.","string                             $operator        Comparison operator.","callable                           $callback        Callback for matching version."],"throws":["PHPUnit_Framework_SkippedTestError When expected redis version is not met."]}},"sleep":{"parameters":{"seconds":{"default":"","isNull":true,"isOptional":false,"isPassedByReference":false,"canBePassedByValue":true,"isArray":false}},"annotations":{" short_description":"Sleep the test case with microseconds resolution.","param":["float $seconds Seconds to sleep."]}},"setRequiredRedisVersionFromAnnotation":{"parameters":[],"annotations":[]},"checkRequiredRedisVersion":{"parameters":[],"annotations":[]},"setRequirementsFromAnnotation":{"parameters":[],"annotations":{" short_description":""}},"checkRequirements":{"parameters":[],"annotations":{" short_description":""}}}}}Sending HTTP HEAD request...Socket created. OK.
Attempting to connect to '127.0.0.1' on port '9040'...OK.
send length and offset 3160313 0after send length and offset 3160313 3160313OK.
Reading response:
Closing socket...OK.

